# 1 "signals.c"
# 1 "/home/akkana/outsrc/openzmail/zmail/shell//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "signals.c"


# 1 "../include/zmail.h" 1
# 20 "../include/zmail.h"
# 1 "../config/config.h" 1
# 19 "../config/config.h"
# 1 "../osconfig.h" 1
# 278 "../osconfig.h"
# 1 "/usr/include/features.h" 1
# 313 "/usr/include/features.h"
# 1 "/usr/include/bits/predefs.h" 1 3 4
# 314 "/usr/include/features.h" 2
# 346 "/usr/include/features.h"
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 353 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 354 "/usr/include/sys/cdefs.h" 2 3 4
# 347 "/usr/include/features.h" 2
# 378 "/usr/include/features.h"
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 379 "/usr/include/features.h" 2
# 279 "../osconfig.h" 2
# 20 "../config/config.h" 2







# 1 "../config/features.h" 1
# 28 "../config/config.h" 2
# 39 "../config/config.h"
# 1 "../config/defaults.h" 1
# 40 "../config/config.h" 2
# 228 "../config/config.h"
# 1 "/usr/include/X11/Intrinsic.h" 1 3 4
# 56 "/usr/include/X11/Intrinsic.h" 3 4
# 1 "/usr/include/X11/Xlib.h" 1 3 4
# 41 "/usr/include/X11/Xlib.h" 3 4
# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4
# 1 "../config/features.h" 1 3 4
# 28 "/usr/include/sys/types.h" 2 3 4



# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 32 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 62 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 100 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4
# 147 "/usr/include/sys/types.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 217 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 218 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4


typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4

# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);



# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__));
# 224 "/usr/include/sys/types.h" 2 3 4
# 235 "/usr/include/sys/types.h" 3 4
typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 270 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;
# 67 "/usr/include/bits/pthreadtypes.h" 3 4
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;





typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;





    int __kind;





    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };

  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
# 170 "/usr/include/bits/pthreadtypes.h" 3 4
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;

  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4



# 42 "/usr/include/X11/Xlib.h" 2 3 4





# 1 "/usr/include/X11/X.h" 1 3 4
# 71 "/usr/include/X11/X.h" 3 4
typedef unsigned long XID;



typedef unsigned long Mask;



typedef unsigned long Atom;

typedef unsigned long VisualID;
typedef unsigned long Time;
# 101 "/usr/include/X11/X.h" 3 4
typedef XID Window;
typedef XID Drawable;


typedef XID Font;

typedef XID Pixmap;
typedef XID Cursor;
typedef XID Colormap;
typedef XID GContext;
typedef XID KeySym;

typedef unsigned char KeyCode;
# 48 "/usr/include/X11/Xlib.h" 2 3 4


# 1 "/usr/include/X11/Xfuncproto.h" 1 3 4
# 51 "/usr/include/X11/Xlib.h" 2 3 4
# 1 "/usr/include/X11/Xosdefs.h" 1 3 4
# 52 "/usr/include/X11/Xlib.h" 2 3 4


# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 323 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 3 4
typedef int wchar_t;
# 55 "/usr/include/X11/Xlib.h" 2 3 4
# 72 "/usr/include/X11/Xlib.h" 3 4
extern int
_Xmblen(




    char *str,
    int len

    );





typedef char *XPointer;
# 159 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XExtData {
 int number;
 struct _XExtData *next;
 int (*free_private)(
 struct _XExtData *extension
 );
 XPointer private_data;
} XExtData;




typedef struct {
 int extension;
 int major_opcode;
 int first_event;
 int first_error;
} XExtCodes;





typedef struct {
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} XPixmapFormatValues;





typedef struct {
 int function;
 unsigned long plane_mask;
 unsigned long foreground;
 unsigned long background;
 int line_width;
 int line_style;
 int cap_style;

 int join_style;
 int fill_style;

 int fill_rule;
 int arc_mode;
 Pixmap tile;
 Pixmap stipple;
 int ts_x_origin;
 int ts_y_origin;
        Font font;
 int subwindow_mode;
 int graphics_exposures;
 int clip_x_origin;
 int clip_y_origin;
 Pixmap clip_mask;
 int dash_offset;
 char dashes;
} XGCValues;






typedef struct _XGC

{
    XExtData *ext_data;
    GContext gid;

}

*GC;




typedef struct {
 XExtData *ext_data;
 VisualID visualid;



 int class;

 unsigned long red_mask, green_mask, blue_mask;
 int bits_per_rgb;
 int map_entries;
} Visual;




typedef struct {
 int depth;
 int nvisuals;
 Visual *visuals;
} Depth;







struct _XDisplay;

typedef struct {
 XExtData *ext_data;
 struct _XDisplay *display;
 Window root;
 int width, height;
 int mwidth, mheight;
 int ndepths;
 Depth *depths;
 int root_depth;
 Visual *root_visual;
 GC default_gc;
 Colormap cmap;
 unsigned long white_pixel;
 unsigned long black_pixel;
 int max_maps, min_maps;
 int backing_store;
 int save_unders;
 long root_input_mask;
} Screen;




typedef struct {
 XExtData *ext_data;
 int depth;
 int bits_per_pixel;
 int scanline_pad;
} ScreenFormat;




typedef struct {
    Pixmap background_pixmap;
    unsigned long background_pixel;
    Pixmap border_pixmap;
    unsigned long border_pixel;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long backing_planes;
    unsigned long backing_pixel;
    int save_under;
    long event_mask;
    long do_not_propagate_mask;
    int override_redirect;
    Colormap colormap;
    Cursor cursor;
} XSetWindowAttributes;

typedef struct {
    int x, y;
    int width, height;
    int border_width;
    int depth;
    Visual *visual;
    Window root;



    int class;

    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long backing_planes;
    unsigned long backing_pixel;
    int save_under;
    Colormap colormap;
    int map_installed;
    int map_state;
    long all_event_masks;
    long your_event_mask;
    long do_not_propagate_mask;
    int override_redirect;
    Screen *screen;
} XWindowAttributes;






typedef struct {
 int family;
 int length;
 char *address;
} XHostAddress;




typedef struct {
 int typelength;
 int valuelength;
 char *type;
 char *value;
} XServerInterpretedAddress;




typedef struct _XImage {
    int width, height;
    int xoffset;
    int format;
    char *data;
    int byte_order;
    int bitmap_unit;
    int bitmap_bit_order;
    int bitmap_pad;
    int depth;
    int bytes_per_line;
    int bits_per_pixel;
    unsigned long red_mask;
    unsigned long green_mask;
    unsigned long blue_mask;
    XPointer obdata;
    struct funcs {
 struct _XImage *(*create_image)(
  struct _XDisplay* ,
  Visual* ,
  unsigned int ,
  int ,
  int ,
  char* ,
  unsigned int ,
  unsigned int ,
  int ,
  int );
 int (*destroy_image) (struct _XImage *);
 unsigned long (*get_pixel) (struct _XImage *, int, int);
 int (*put_pixel) (struct _XImage *, int, int, unsigned long);
 struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);
 int (*add_pixel) (struct _XImage *, long);
 } f;
} XImage;




typedef struct {
    int x, y;
    int width, height;
    int border_width;
    Window sibling;
    int stack_mode;
} XWindowChanges;




typedef struct {
 unsigned long pixel;
 unsigned short red, green, blue;
 char flags;
 char pad;
} XColor;






typedef struct {
    short x1, y1, x2, y2;
} XSegment;

typedef struct {
    short x, y;
} XPoint;

typedef struct {
    short x, y;
    unsigned short width, height;
} XRectangle;

typedef struct {
    short x, y;
    unsigned short width, height;
    short angle1, angle2;
} XArc;




typedef struct {
        int key_click_percent;
        int bell_percent;
        int bell_pitch;
        int bell_duration;
        int led;
        int led_mode;
        int key;
        int auto_repeat_mode;
} XKeyboardControl;



typedef struct {
        int key_click_percent;
 int bell_percent;
 unsigned int bell_pitch, bell_duration;
 unsigned long led_mask;
 int global_auto_repeat;
 char auto_repeats[32];
} XKeyboardState;



typedef struct {
        Time time;
 short x, y;
} XTimeCoord;



typedef struct {
  int max_keypermod;
  KeyCode *modifiermap;
} XModifierKeymap;
# 501 "/usr/include/X11/Xlib.h" 3 4
struct _XPrivate;
struct _XrmHashBucketRec;

typedef struct

_XDisplay

{
 XExtData *ext_data;
 struct _XPrivate *private1;
 int fd;
 int private2;
 int proto_major_version;
 int proto_minor_version;
 char *vendor;
        XID private3;
 XID private4;
 XID private5;
 int private6;
 XID (*resource_alloc)(
  struct _XDisplay*
 );
 int byte_order;
 int bitmap_unit;
 int bitmap_pad;
 int bitmap_bit_order;
 int nformats;
 ScreenFormat *pixmap_format;
 int private8;
 int release;
 struct _XPrivate *private9, *private10;
 int qlen;
 unsigned long last_request_read;
 unsigned long request;
 XPointer private11;
 XPointer private12;
 XPointer private13;
 XPointer private14;
 unsigned max_request_size;
 struct _XrmHashBucketRec *db;
 int (*private15)(
  struct _XDisplay*
  );
 char *display_name;
 int default_screen;
 int nscreens;
 Screen *screens;
 unsigned long motion_buffer;
 unsigned long private16;
 int min_keycode;
 int max_keycode;
 XPointer private17;
 XPointer private18;
 int private19;
 char *xdefaults;

}

Display,

*_XPrivDisplay;






typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 unsigned int keycode;
 int same_screen;
} XKeyEvent;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 unsigned int button;
 int same_screen;
} XButtonEvent;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 char is_hint;
 int same_screen;
} XMotionEvent;
typedef XMotionEvent XPointerMovedEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 int mode;
 int detail;




 int same_screen;
 int focus;
 unsigned int state;
} XCrossingEvent;
typedef XCrossingEvent XEnterWindowEvent;
typedef XCrossingEvent XLeaveWindowEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int mode;

 int detail;





} XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;


typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 char key_vector[32];
} XKeymapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int x, y;
 int width, height;
 int count;
} XExposeEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Drawable drawable;
 int x, y;
 int width, height;
 int count;
 int major_code;
 int minor_code;
} XGraphicsExposeEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Drawable drawable;
 int major_code;
 int minor_code;
} XNoExposeEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int state;
} XVisibilityEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 int override_redirect;
} XCreateWindowEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
} XDestroyWindowEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int from_configure;
} XUnmapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int override_redirect;
} XMapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
} XMapRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 Window parent;
 int x, y;
 int override_redirect;
} XReparentEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 Window above;
 int override_redirect;
} XConfigureEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int x, y;
} XGravityEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int width, height;
} XResizeRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 Window above;
 int detail;
 unsigned long value_mask;
} XConfigureRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int place;
} XCirculateEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int place;
} XCirculateRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom atom;
 Time time;
 int state;
} XPropertyEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom selection;
 Time time;
} XSelectionClearEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window owner;
 Window requestor;
 Atom selection;
 Atom target;
 Atom property;
 Time time;
} XSelectionRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window requestor;
 Atom selection;
 Atom target;
 Atom property;
 Time time;
} XSelectionEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Colormap colormap;



 int new;

 int state;
} XColormapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom message_type;
 int format;
 union {
  char b[20];
  short s[10];
  long l[5];
  } data;
} XClientMessageEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int request;

 int first_keycode;
 int count;
} XMappingEvent;

typedef struct {
 int type;
 Display *display;
 XID resourceid;
 unsigned long serial;
 unsigned char error_code;
 unsigned char request_code;
 unsigned char minor_code;
} XErrorEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
} XAnyEvent;







typedef struct
    {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    int extension;
    int evtype;
    } XGenericEvent;





typedef union _XEvent {
        int type;
 XAnyEvent xany;
 XKeyEvent xkey;
 XButtonEvent xbutton;
 XMotionEvent xmotion;
 XCrossingEvent xcrossing;
 XFocusChangeEvent xfocus;
 XExposeEvent xexpose;
 XGraphicsExposeEvent xgraphicsexpose;
 XNoExposeEvent xnoexpose;
 XVisibilityEvent xvisibility;
 XCreateWindowEvent xcreatewindow;
 XDestroyWindowEvent xdestroywindow;
 XUnmapEvent xunmap;
 XMapEvent xmap;
 XMapRequestEvent xmaprequest;
 XReparentEvent xreparent;
 XConfigureEvent xconfigure;
 XGravityEvent xgravity;
 XResizeRequestEvent xresizerequest;
 XConfigureRequestEvent xconfigurerequest;
 XCirculateEvent xcirculate;
 XCirculateRequestEvent xcirculaterequest;
 XPropertyEvent xproperty;
 XSelectionClearEvent xselectionclear;
 XSelectionRequestEvent xselectionrequest;
 XSelectionEvent xselection;
 XColormapEvent xcolormap;
 XClientMessageEvent xclient;
 XMappingEvent xmapping;
 XErrorEvent xerror;
 XKeymapEvent xkeymap;
 long pad[24];
} XEvent;







typedef struct {
    short lbearing;
    short rbearing;
    short width;
    short ascent;
    short descent;
    unsigned short attributes;
} XCharStruct;





typedef struct {
    Atom name;
    unsigned long card32;
} XFontProp;

typedef struct {
    XExtData *ext_data;
    Font fid;
    unsigned direction;
    unsigned min_char_or_byte2;
    unsigned max_char_or_byte2;
    unsigned min_byte1;
    unsigned max_byte1;
    int all_chars_exist;
    unsigned default_char;
    int n_properties;
    XFontProp *properties;
    XCharStruct min_bounds;
    XCharStruct max_bounds;
    XCharStruct *per_char;
    int ascent;
    int descent;
} XFontStruct;




typedef struct {
    char *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem;

typedef struct {
    unsigned char byte1;
    unsigned char byte2;
}



XChar2b;


typedef struct {
    XChar2b *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem16;


typedef union { Display *display;
  GC gc;
  Visual *visual;
  Screen *screen;
  ScreenFormat *pixmap_format;
  XFontStruct *font; } XEDataObject;

typedef struct {
    XRectangle max_ink_extent;
    XRectangle max_logical_extent;
} XFontSetExtents;





typedef struct _XOM *XOM;
typedef struct _XOC *XOC, *XFontSet;

typedef struct {
    char *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XmbTextItem;

typedef struct {
    wchar_t *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XwcTextItem;
# 1124 "/usr/include/X11/Xlib.h" 3 4
typedef struct {
    int charset_count;
    char **charset_list;
} XOMCharSetList;

typedef enum {
    XOMOrientation_LTR_TTB,
    XOMOrientation_RTL_TTB,
    XOMOrientation_TTB_LTR,
    XOMOrientation_TTB_RTL,
    XOMOrientation_Context
} XOrientation;

typedef struct {
    int num_orientation;
    XOrientation *orientation;
} XOMOrientation;

typedef struct {
    int num_font;
    XFontStruct **font_struct_list;
    char **font_name_list;
} XOMFontInfo;

typedef struct _XIM *XIM;
typedef struct _XIC *XIC;

typedef void (*XIMProc)(
    XIM,
    XPointer,
    XPointer
);

typedef int (*XICProc)(
    XIC,
    XPointer,
    XPointer
);

typedef void (*XIDProc)(
    Display*,
    XPointer,
    XPointer
);

typedef unsigned long XIMStyle;

typedef struct {
    unsigned short count_styles;
    XIMStyle *supported_styles;
} XIMStyles;
# 1236 "/usr/include/X11/Xlib.h" 3 4
typedef void *XVaNestedList;

typedef struct {
    XPointer client_data;
    XIMProc callback;
} XIMCallback;

typedef struct {
    XPointer client_data;
    XICProc callback;
} XICCallback;

typedef unsigned long XIMFeedback;
# 1260 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XIMText {
    unsigned short length;
    XIMFeedback *feedback;
    int encoding_is_wchar;
    union {
 char *multi_byte;
 wchar_t *wide_char;
    } string;
} XIMText;

typedef unsigned long XIMPreeditState;





typedef struct _XIMPreeditStateNotifyCallbackStruct {
    XIMPreeditState state;
} XIMPreeditStateNotifyCallbackStruct;

typedef unsigned long XIMResetState;




typedef unsigned long XIMStringConversionFeedback;
# 1294 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XIMStringConversionText {
    unsigned short length;
    XIMStringConversionFeedback *feedback;
    int encoding_is_wchar;
    union {
 char *mbs;
 wchar_t *wcs;
    } string;
} XIMStringConversionText;

typedef unsigned short XIMStringConversionPosition;

typedef unsigned short XIMStringConversionType;






typedef unsigned short XIMStringConversionOperation;




typedef enum {
    XIMForwardChar, XIMBackwardChar,
    XIMForwardWord, XIMBackwardWord,
    XIMCaretUp, XIMCaretDown,
    XIMNextLine, XIMPreviousLine,
    XIMLineStart, XIMLineEnd,
    XIMAbsolutePosition,
    XIMDontChange
} XIMCaretDirection;

typedef struct _XIMStringConversionCallbackStruct {
    XIMStringConversionPosition position;
    XIMCaretDirection direction;
    XIMStringConversionOperation operation;
    unsigned short factor;
    XIMStringConversionText *text;
} XIMStringConversionCallbackStruct;

typedef struct _XIMPreeditDrawCallbackStruct {
    int caret;
    int chg_first;
    int chg_length;
    XIMText *text;
} XIMPreeditDrawCallbackStruct;

typedef enum {
    XIMIsInvisible,
    XIMIsPrimary,
    XIMIsSecondary
} XIMCaretStyle;

typedef struct _XIMPreeditCaretCallbackStruct {
    int position;
    XIMCaretDirection direction;
    XIMCaretStyle style;
} XIMPreeditCaretCallbackStruct;

typedef enum {
    XIMTextType,
    XIMBitmapType
} XIMStatusDataType;

typedef struct _XIMStatusDrawCallbackStruct {
    XIMStatusDataType type;
    union {
 XIMText *text;
 Pixmap bitmap;
    } data;
} XIMStatusDrawCallbackStruct;

typedef struct _XIMHotKeyTrigger {
    KeySym keysym;
    int modifier;
    int modifier_mask;
} XIMHotKeyTrigger;

typedef struct _XIMHotKeyTriggers {
    int num_hot_key;
    XIMHotKeyTrigger *key;
} XIMHotKeyTriggers;

typedef unsigned long XIMHotKeyState;




typedef struct {
    unsigned short count_values;
    char **supported_values;
} XIMValuesList;







extern int _Xdebug;

extern XFontStruct *XLoadQueryFont(
    Display* ,
    const char*
);

extern XFontStruct *XQueryFont(
    Display* ,
    XID
);


extern XTimeCoord *XGetMotionEvents(
    Display* ,
    Window ,
    Time ,
    Time ,
    int*
);

extern XModifierKeymap *XDeleteModifiermapEntry(
    XModifierKeymap* ,



    KeyCode ,

    int
);

extern XModifierKeymap *XGetModifierMapping(
    Display*
);

extern XModifierKeymap *XInsertModifiermapEntry(
    XModifierKeymap* ,



    KeyCode ,

    int
);

extern XModifierKeymap *XNewModifiermap(
    int
);

extern XImage *XCreateImage(
    Display* ,
    Visual* ,
    unsigned int ,
    int ,
    int ,
    char* ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XInitImage(
    XImage*
);
extern XImage *XGetImage(
    Display* ,
    Drawable ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    int
);
extern XImage *XGetSubImage(
    Display* ,
    Drawable ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    int ,
    XImage* ,
    int ,
    int
);




extern Display *XOpenDisplay(
    const char*
);

extern void XrmInitialize(
    void
);

extern char *XFetchBytes(
    Display* ,
    int*
);
extern char *XFetchBuffer(
    Display* ,
    int* ,
    int
);
extern char *XGetAtomName(
    Display* ,
    Atom
);
extern int XGetAtomNames(
    Display* ,
    Atom* ,
    int ,
    char**
);
extern char *XGetDefault(
    Display* ,
    const char* ,
    const char*
);
extern char *XDisplayName(
    const char*
);
extern char *XKeysymToString(
    KeySym
);

extern int (*XSynchronize(
    Display* ,
    int
))(
    Display*
);
extern int (*XSetAfterFunction(
    Display* ,
    int (*) (
      Display*
            )
))(
    Display*
);
extern Atom XInternAtom(
    Display* ,
    const char* ,
    int
);
extern int XInternAtoms(
    Display* ,
    char** ,
    int ,
    int ,
    Atom*
);
extern Colormap XCopyColormapAndFree(
    Display* ,
    Colormap
);
extern Colormap XCreateColormap(
    Display* ,
    Window ,
    Visual* ,
    int
);
extern Cursor XCreatePixmapCursor(
    Display* ,
    Pixmap ,
    Pixmap ,
    XColor* ,
    XColor* ,
    unsigned int ,
    unsigned int
);
extern Cursor XCreateGlyphCursor(
    Display* ,
    Font ,
    Font ,
    unsigned int ,
    unsigned int ,
    XColor const * ,
    XColor const *
);
extern Cursor XCreateFontCursor(
    Display* ,
    unsigned int
);
extern Font XLoadFont(
    Display* ,
    const char*
);
extern GC XCreateGC(
    Display* ,
    Drawable ,
    unsigned long ,
    XGCValues*
);
extern GContext XGContextFromGC(
    GC
);
extern void XFlushGC(
    Display* ,
    GC
);
extern Pixmap XCreatePixmap(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int
);
extern Pixmap XCreateBitmapFromData(
    Display* ,
    Drawable ,
    const char* ,
    unsigned int ,
    unsigned int
);
extern Pixmap XCreatePixmapFromBitmapData(
    Display* ,
    Drawable ,
    char* ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    unsigned long ,
    unsigned int
);
extern Window XCreateSimpleWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    unsigned long
);
extern Window XGetSelectionOwner(
    Display* ,
    Atom
);
extern Window XCreateWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    int ,
    unsigned int ,
    Visual* ,
    unsigned long ,
    XSetWindowAttributes*
);
extern Colormap *XListInstalledColormaps(
    Display* ,
    Window ,
    int*
);
extern char **XListFonts(
    Display* ,
    const char* ,
    int ,
    int*
);
extern char **XListFontsWithInfo(
    Display* ,
    const char* ,
    int ,
    int* ,
    XFontStruct**
);
extern char **XGetFontPath(
    Display* ,
    int*
);
extern char **XListExtensions(
    Display* ,
    int*
);
extern Atom *XListProperties(
    Display* ,
    Window ,
    int*
);
extern XHostAddress *XListHosts(
    Display* ,
    int* ,
    int*
);
extern KeySym XKeycodeToKeysym(
    Display* ,



    KeyCode ,

    int
);
extern KeySym XLookupKeysym(
    XKeyEvent* ,
    int
);
extern KeySym *XGetKeyboardMapping(
    Display* ,



    KeyCode ,

    int ,
    int*
);
extern KeySym XStringToKeysym(
    const char*
);
extern long XMaxRequestSize(
    Display*
);
extern long XExtendedMaxRequestSize(
    Display*
);
extern char *XResourceManagerString(
    Display*
);
extern char *XScreenResourceString(
 Screen*
);
extern unsigned long XDisplayMotionBufferSize(
    Display*
);
extern VisualID XVisualIDFromVisual(
    Visual*
);



extern int XInitThreads(
    void
);

extern void XLockDisplay(
    Display*
);

extern void XUnlockDisplay(
    Display*
);



extern XExtCodes *XInitExtension(
    Display* ,
    const char*
);

extern XExtCodes *XAddExtension(
    Display*
);
extern XExtData *XFindOnExtensionList(
    XExtData** ,
    int
);
extern XExtData **XEHeadOfExtensionList(
    XEDataObject
);


extern Window XRootWindow(
    Display* ,
    int
);
extern Window XDefaultRootWindow(
    Display*
);
extern Window XRootWindowOfScreen(
    Screen*
);
extern Visual *XDefaultVisual(
    Display* ,
    int
);
extern Visual *XDefaultVisualOfScreen(
    Screen*
);
extern GC XDefaultGC(
    Display* ,
    int
);
extern GC XDefaultGCOfScreen(
    Screen*
);
extern unsigned long XBlackPixel(
    Display* ,
    int
);
extern unsigned long XWhitePixel(
    Display* ,
    int
);
extern unsigned long XAllPlanes(
    void
);
extern unsigned long XBlackPixelOfScreen(
    Screen*
);
extern unsigned long XWhitePixelOfScreen(
    Screen*
);
extern unsigned long XNextRequest(
    Display*
);
extern unsigned long XLastKnownRequestProcessed(
    Display*
);
extern char *XServerVendor(
    Display*
);
extern char *XDisplayString(
    Display*
);
extern Colormap XDefaultColormap(
    Display* ,
    int
);
extern Colormap XDefaultColormapOfScreen(
    Screen*
);
extern Display *XDisplayOfScreen(
    Screen*
);
extern Screen *XScreenOfDisplay(
    Display* ,
    int
);
extern Screen *XDefaultScreenOfDisplay(
    Display*
);
extern long XEventMaskOfScreen(
    Screen*
);

extern int XScreenNumberOfScreen(
    Screen*
);

typedef int (*XErrorHandler) (
    Display* ,
    XErrorEvent*
);

extern XErrorHandler XSetErrorHandler (
    XErrorHandler
);


typedef int (*XIOErrorHandler) (
    Display*
);

extern XIOErrorHandler XSetIOErrorHandler (
    XIOErrorHandler
);


extern XPixmapFormatValues *XListPixmapFormats(
    Display* ,
    int*
);
extern int *XListDepths(
    Display* ,
    int ,
    int*
);



extern int XReconfigureWMWindow(
    Display* ,
    Window ,
    int ,
    unsigned int ,
    XWindowChanges*
);

extern int XGetWMProtocols(
    Display* ,
    Window ,
    Atom** ,
    int*
);
extern int XSetWMProtocols(
    Display* ,
    Window ,
    Atom* ,
    int
);
extern int XIconifyWindow(
    Display* ,
    Window ,
    int
);
extern int XWithdrawWindow(
    Display* ,
    Window ,
    int
);
extern int XGetCommand(
    Display* ,
    Window ,
    char*** ,
    int*
);
extern int XGetWMColormapWindows(
    Display* ,
    Window ,
    Window** ,
    int*
);
extern int XSetWMColormapWindows(
    Display* ,
    Window ,
    Window* ,
    int
);
extern void XFreeStringList(
    char**
);
extern int XSetTransientForHint(
    Display* ,
    Window ,
    Window
);



extern int XActivateScreenSaver(
    Display*
);

extern int XAddHost(
    Display* ,
    XHostAddress*
);

extern int XAddHosts(
    Display* ,
    XHostAddress* ,
    int
);

extern int XAddToExtensionList(
    struct _XExtData** ,
    XExtData*
);

extern int XAddToSaveSet(
    Display* ,
    Window
);

extern int XAllocColor(
    Display* ,
    Colormap ,
    XColor*
);

extern int XAllocColorCells(
    Display* ,
    Colormap ,
    int ,
    unsigned long* ,
    unsigned int ,
    unsigned long* ,
    unsigned int
);

extern int XAllocColorPlanes(
    Display* ,
    Colormap ,
    int ,
    unsigned long* ,
    int ,
    int ,
    int ,
    int ,
    unsigned long* ,
    unsigned long* ,
    unsigned long*
);

extern int XAllocNamedColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor* ,
    XColor*
);

extern int XAllowEvents(
    Display* ,
    int ,
    Time
);

extern int XAutoRepeatOff(
    Display*
);

extern int XAutoRepeatOn(
    Display*
);

extern int XBell(
    Display* ,
    int
);

extern int XBitmapBitOrder(
    Display*
);

extern int XBitmapPad(
    Display*
);

extern int XBitmapUnit(
    Display*
);

extern int XCellsOfScreen(
    Screen*
);

extern int XChangeActivePointerGrab(
    Display* ,
    unsigned int ,
    Cursor ,
    Time
);

extern int XChangeGC(
    Display* ,
    GC ,
    unsigned long ,
    XGCValues*
);

extern int XChangeKeyboardControl(
    Display* ,
    unsigned long ,
    XKeyboardControl*
);

extern int XChangeKeyboardMapping(
    Display* ,
    int ,
    int ,
    KeySym* ,
    int
);

extern int XChangePointerControl(
    Display* ,
    int ,
    int ,
    int ,
    int ,
    int
);

extern int XChangeProperty(
    Display* ,
    Window ,
    Atom ,
    Atom ,
    int ,
    int ,
    const unsigned char* ,
    int
);

extern int XChangeSaveSet(
    Display* ,
    Window ,
    int
);

extern int XChangeWindowAttributes(
    Display* ,
    Window ,
    unsigned long ,
    XSetWindowAttributes*
);

extern int XCheckIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);

extern int XCheckMaskEvent(
    Display* ,
    long ,
    XEvent*
);

extern int XCheckTypedEvent(
    Display* ,
    int ,
    XEvent*
);

extern int XCheckTypedWindowEvent(
    Display* ,
    Window ,
    int ,
    XEvent*
);

extern int XCheckWindowEvent(
    Display* ,
    Window ,
    long ,
    XEvent*
);

extern int XCirculateSubwindows(
    Display* ,
    Window ,
    int
);

extern int XCirculateSubwindowsDown(
    Display* ,
    Window
);

extern int XCirculateSubwindowsUp(
    Display* ,
    Window
);

extern int XClearArea(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int
);

extern int XClearWindow(
    Display* ,
    Window
);

extern int XCloseDisplay(
    Display*
);

extern int XConfigureWindow(
    Display* ,
    Window ,
    unsigned int ,
    XWindowChanges*
);

extern int XConnectionNumber(
    Display*
);

extern int XConvertSelection(
    Display* ,
    Atom ,
    Atom ,
    Atom ,
    Window ,
    Time
);

extern int XCopyArea(
    Display* ,
    Drawable ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XCopyGC(
    Display* ,
    GC ,
    unsigned long ,
    GC
);

extern int XCopyPlane(
    Display* ,
    Drawable ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int ,
    unsigned long
);

extern int XDefaultDepth(
    Display* ,
    int
);

extern int XDefaultDepthOfScreen(
    Screen*
);

extern int XDefaultScreen(
    Display*
);

extern int XDefineCursor(
    Display* ,
    Window ,
    Cursor
);

extern int XDeleteProperty(
    Display* ,
    Window ,
    Atom
);

extern int XDestroyWindow(
    Display* ,
    Window
);

extern int XDestroySubwindows(
    Display* ,
    Window
);

extern int XDoesBackingStore(
    Screen*
);

extern int XDoesSaveUnders(
    Screen*
);

extern int XDisableAccessControl(
    Display*
);


extern int XDisplayCells(
    Display* ,
    int
);

extern int XDisplayHeight(
    Display* ,
    int
);

extern int XDisplayHeightMM(
    Display* ,
    int
);

extern int XDisplayKeycodes(
    Display* ,
    int* ,
    int*
);

extern int XDisplayPlanes(
    Display* ,
    int
);

extern int XDisplayWidth(
    Display* ,
    int
);

extern int XDisplayWidthMM(
    Display* ,
    int
);

extern int XDrawArc(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XDrawArcs(
    Display* ,
    Drawable ,
    GC ,
    XArc* ,
    int
);

extern int XDrawImageString(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern int XDrawImageString16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const XChar2b* ,
    int
);

extern int XDrawLine(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    int ,
    int
);

extern int XDrawLines(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int
);

extern int XDrawPoint(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int
);

extern int XDrawPoints(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int
);

extern int XDrawRectangle(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XDrawRectangles(
    Display* ,
    Drawable ,
    GC ,
    XRectangle* ,
    int
);

extern int XDrawSegments(
    Display* ,
    Drawable ,
    GC ,
    XSegment* ,
    int
);

extern int XDrawString(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern int XDrawString16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const XChar2b* ,
    int
);

extern int XDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XTextItem* ,
    int
);

extern int XDrawText16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XTextItem16* ,
    int
);

extern int XEnableAccessControl(
    Display*
);

extern int XEventsQueued(
    Display* ,
    int
);

extern int XFetchName(
    Display* ,
    Window ,
    char**
);

extern int XFillArc(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XFillArcs(
    Display* ,
    Drawable ,
    GC ,
    XArc* ,
    int
);

extern int XFillPolygon(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int ,
    int
);

extern int XFillRectangle(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XFillRectangles(
    Display* ,
    Drawable ,
    GC ,
    XRectangle* ,
    int
);

extern int XFlush(
    Display*
);

extern int XForceScreenSaver(
    Display* ,
    int
);

extern int XFree(
    void*
);

extern int XFreeColormap(
    Display* ,
    Colormap
);

extern int XFreeColors(
    Display* ,
    Colormap ,
    unsigned long* ,
    int ,
    unsigned long
);

extern int XFreeCursor(
    Display* ,
    Cursor
);

extern int XFreeExtensionList(
    char**
);

extern int XFreeFont(
    Display* ,
    XFontStruct*
);

extern int XFreeFontInfo(
    char** ,
    XFontStruct* ,
    int
);

extern int XFreeFontNames(
    char**
);

extern int XFreeFontPath(
    char**
);

extern int XFreeGC(
    Display* ,
    GC
);

extern int XFreeModifiermap(
    XModifierKeymap*
);

extern int XFreePixmap(
    Display* ,
    Pixmap
);

extern int XGeometry(
    Display* ,
    int ,
    const char* ,
    const char* ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    int ,
    int ,
    int* ,
    int* ,
    int* ,
    int*
);

extern int XGetErrorDatabaseText(
    Display* ,
    const char* ,
    const char* ,
    const char* ,
    char* ,
    int
);

extern int XGetErrorText(
    Display* ,
    int ,
    char* ,
    int
);

extern int XGetFontProperty(
    XFontStruct* ,
    Atom ,
    unsigned long*
);

extern int XGetGCValues(
    Display* ,
    GC ,
    unsigned long ,
    XGCValues*
);

extern int XGetGeometry(
    Display* ,
    Drawable ,
    Window* ,
    int* ,
    int* ,
    unsigned int* ,
    unsigned int* ,
    unsigned int* ,
    unsigned int*
);

extern int XGetIconName(
    Display* ,
    Window ,
    char**
);

extern int XGetInputFocus(
    Display* ,
    Window* ,
    int*
);

extern int XGetKeyboardControl(
    Display* ,
    XKeyboardState*
);

extern int XGetPointerControl(
    Display* ,
    int* ,
    int* ,
    int*
);

extern int XGetPointerMapping(
    Display* ,
    unsigned char* ,
    int
);

extern int XGetScreenSaver(
    Display* ,
    int* ,
    int* ,
    int* ,
    int*
);

extern int XGetTransientForHint(
    Display* ,
    Window ,
    Window*
);

extern int XGetWindowProperty(
    Display* ,
    Window ,
    Atom ,
    long ,
    long ,
    int ,
    Atom ,
    Atom* ,
    int* ,
    unsigned long* ,
    unsigned long* ,
    unsigned char**
);

extern int XGetWindowAttributes(
    Display* ,
    Window ,
    XWindowAttributes*
);

extern int XGrabButton(
    Display* ,
    unsigned int ,
    unsigned int ,
    Window ,
    int ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor
);

extern int XGrabKey(
    Display* ,
    int ,
    unsigned int ,
    Window ,
    int ,
    int ,
    int
);

extern int XGrabKeyboard(
    Display* ,
    Window ,
    int ,
    int ,
    int ,
    Time
);

extern int XGrabPointer(
    Display* ,
    Window ,
    int ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor ,
    Time
);

extern int XGrabServer(
    Display*
);

extern int XHeightMMOfScreen(
    Screen*
);

extern int XHeightOfScreen(
    Screen*
);

extern int XIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);

extern int XImageByteOrder(
    Display*
);

extern int XInstallColormap(
    Display* ,
    Colormap
);

extern KeyCode XKeysymToKeycode(
    Display* ,
    KeySym
);

extern int XKillClient(
    Display* ,
    XID
);

extern int XLookupColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor* ,
    XColor*
);

extern int XLowerWindow(
    Display* ,
    Window
);

extern int XMapRaised(
    Display* ,
    Window
);

extern int XMapSubwindows(
    Display* ,
    Window
);

extern int XMapWindow(
    Display* ,
    Window
);

extern int XMaskEvent(
    Display* ,
    long ,
    XEvent*
);

extern int XMaxCmapsOfScreen(
    Screen*
);

extern int XMinCmapsOfScreen(
    Screen*
);

extern int XMoveResizeWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XMoveWindow(
    Display* ,
    Window ,
    int ,
    int
);

extern int XNextEvent(
    Display* ,
    XEvent*
);

extern int XNoOp(
    Display*
);

extern int XParseColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor*
);

extern int XParseGeometry(
    const char* ,
    int* ,
    int* ,
    unsigned int* ,
    unsigned int*
);

extern int XPeekEvent(
    Display* ,
    XEvent*
);

extern int XPeekIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);

extern int XPending(
    Display*
);

extern int XPlanesOfScreen(
    Screen*
);

extern int XProtocolRevision(
    Display*
);

extern int XProtocolVersion(
    Display*
);


extern int XPutBackEvent(
    Display* ,
    XEvent*
);

extern int XPutImage(
    Display* ,
    Drawable ,
    GC ,
    XImage* ,
    int ,
    int ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XQLength(
    Display*
);

extern int XQueryBestCursor(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryBestSize(
    Display* ,
    int ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryBestStipple(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryBestTile(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryColor(
    Display* ,
    Colormap ,
    XColor*
);

extern int XQueryColors(
    Display* ,
    Colormap ,
    XColor* ,
    int
);

extern int XQueryExtension(
    Display* ,
    const char* ,
    int* ,
    int* ,
    int*
);

extern int XQueryKeymap(
    Display* ,
    char [32]
);

extern int XQueryPointer(
    Display* ,
    Window ,
    Window* ,
    Window* ,
    int* ,
    int* ,
    int* ,
    int* ,
    unsigned int*
);

extern int XQueryTextExtents(
    Display* ,
    XID ,
    const char* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XQueryTextExtents16(
    Display* ,
    XID ,
    const XChar2b* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XQueryTree(
    Display* ,
    Window ,
    Window* ,
    Window* ,
    Window** ,
    unsigned int*
);

extern int XRaiseWindow(
    Display* ,
    Window
);

extern int XReadBitmapFile(
    Display* ,
    Drawable ,
    const char* ,
    unsigned int* ,
    unsigned int* ,
    Pixmap* ,
    int* ,
    int*
);

extern int XReadBitmapFileData(
    const char* ,
    unsigned int* ,
    unsigned int* ,
    unsigned char** ,
    int* ,
    int*
);

extern int XRebindKeysym(
    Display* ,
    KeySym ,
    KeySym* ,
    int ,
    const unsigned char* ,
    int
);

extern int XRecolorCursor(
    Display* ,
    Cursor ,
    XColor* ,
    XColor*
);

extern int XRefreshKeyboardMapping(
    XMappingEvent*
);

extern int XRemoveFromSaveSet(
    Display* ,
    Window
);

extern int XRemoveHost(
    Display* ,
    XHostAddress*
);

extern int XRemoveHosts(
    Display* ,
    XHostAddress* ,
    int
);

extern int XReparentWindow(
    Display* ,
    Window ,
    Window ,
    int ,
    int
);

extern int XResetScreenSaver(
    Display*
);

extern int XResizeWindow(
    Display* ,
    Window ,
    unsigned int ,
    unsigned int
);

extern int XRestackWindows(
    Display* ,
    Window* ,
    int
);

extern int XRotateBuffers(
    Display* ,
    int
);

extern int XRotateWindowProperties(
    Display* ,
    Window ,
    Atom* ,
    int ,
    int
);

extern int XScreenCount(
    Display*
);

extern int XSelectInput(
    Display* ,
    Window ,
    long
);

extern int XSendEvent(
    Display* ,
    Window ,
    int ,
    long ,
    XEvent*
);

extern int XSetAccessControl(
    Display* ,
    int
);

extern int XSetArcMode(
    Display* ,
    GC ,
    int
);

extern int XSetBackground(
    Display* ,
    GC ,
    unsigned long
);

extern int XSetClipMask(
    Display* ,
    GC ,
    Pixmap
);

extern int XSetClipOrigin(
    Display* ,
    GC ,
    int ,
    int
);

extern int XSetClipRectangles(
    Display* ,
    GC ,
    int ,
    int ,
    XRectangle* ,
    int ,
    int
);

extern int XSetCloseDownMode(
    Display* ,
    int
);

extern int XSetCommand(
    Display* ,
    Window ,
    char** ,
    int
);

extern int XSetDashes(
    Display* ,
    GC ,
    int ,
    const char* ,
    int
);

extern int XSetFillRule(
    Display* ,
    GC ,
    int
);

extern int XSetFillStyle(
    Display* ,
    GC ,
    int
);

extern int XSetFont(
    Display* ,
    GC ,
    Font
);

extern int XSetFontPath(
    Display* ,
    char** ,
    int
);

extern int XSetForeground(
    Display* ,
    GC ,
    unsigned long
);

extern int XSetFunction(
    Display* ,
    GC ,
    int
);

extern int XSetGraphicsExposures(
    Display* ,
    GC ,
    int
);

extern int XSetIconName(
    Display* ,
    Window ,
    const char*
);

extern int XSetInputFocus(
    Display* ,
    Window ,
    int ,
    Time
);

extern int XSetLineAttributes(
    Display* ,
    GC ,
    unsigned int ,
    int ,
    int ,
    int
);

extern int XSetModifierMapping(
    Display* ,
    XModifierKeymap*
);

extern int XSetPlaneMask(
    Display* ,
    GC ,
    unsigned long
);

extern int XSetPointerMapping(
    Display* ,
    const unsigned char* ,
    int
);

extern int XSetScreenSaver(
    Display* ,
    int ,
    int ,
    int ,
    int
);

extern int XSetSelectionOwner(
    Display* ,
    Atom ,
    Window ,
    Time
);

extern int XSetState(
    Display* ,
    GC ,
    unsigned long ,
    unsigned long ,
    int ,
    unsigned long
);

extern int XSetStipple(
    Display* ,
    GC ,
    Pixmap
);

extern int XSetSubwindowMode(
    Display* ,
    GC ,
    int
);

extern int XSetTSOrigin(
    Display* ,
    GC ,
    int ,
    int
);

extern int XSetTile(
    Display* ,
    GC ,
    Pixmap
);

extern int XSetWindowBackground(
    Display* ,
    Window ,
    unsigned long
);

extern int XSetWindowBackgroundPixmap(
    Display* ,
    Window ,
    Pixmap
);

extern int XSetWindowBorder(
    Display* ,
    Window ,
    unsigned long
);

extern int XSetWindowBorderPixmap(
    Display* ,
    Window ,
    Pixmap
);

extern int XSetWindowBorderWidth(
    Display* ,
    Window ,
    unsigned int
);

extern int XSetWindowColormap(
    Display* ,
    Window ,
    Colormap
);

extern int XStoreBuffer(
    Display* ,
    const char* ,
    int ,
    int
);

extern int XStoreBytes(
    Display* ,
    const char* ,
    int
);

extern int XStoreColor(
    Display* ,
    Colormap ,
    XColor*
);

extern int XStoreColors(
    Display* ,
    Colormap ,
    XColor* ,
    int
);

extern int XStoreName(
    Display* ,
    Window ,
    const char*
);

extern int XStoreNamedColor(
    Display* ,
    Colormap ,
    const char* ,
    unsigned long ,
    int
);

extern int XSync(
    Display* ,
    int
);

extern int XTextExtents(
    XFontStruct* ,
    const char* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XTextExtents16(
    XFontStruct* ,
    const XChar2b* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XTextWidth(
    XFontStruct* ,
    const char* ,
    int
);

extern int XTextWidth16(
    XFontStruct* ,
    const XChar2b* ,
    int
);

extern int XTranslateCoordinates(
    Display* ,
    Window ,
    Window ,
    int ,
    int ,
    int* ,
    int* ,
    Window*
);

extern int XUndefineCursor(
    Display* ,
    Window
);

extern int XUngrabButton(
    Display* ,
    unsigned int ,
    unsigned int ,
    Window
);

extern int XUngrabKey(
    Display* ,
    int ,
    unsigned int ,
    Window
);

extern int XUngrabKeyboard(
    Display* ,
    Time
);

extern int XUngrabPointer(
    Display* ,
    Time
);

extern int XUngrabServer(
    Display*
);

extern int XUninstallColormap(
    Display* ,
    Colormap
);

extern int XUnloadFont(
    Display* ,
    Font
);

extern int XUnmapSubwindows(
    Display* ,
    Window
);

extern int XUnmapWindow(
    Display* ,
    Window
);

extern int XVendorRelease(
    Display*
);

extern int XWarpPointer(
    Display* ,
    Window ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XWidthMMOfScreen(
    Screen*
);

extern int XWidthOfScreen(
    Screen*
);

extern int XWindowEvent(
    Display* ,
    Window ,
    long ,
    XEvent*
);

extern int XWriteBitmapFile(
    Display* ,
    const char* ,
    Pixmap ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XSupportsLocale (void);

extern char *XSetLocaleModifiers(
    const char*
);

extern XOM XOpenOM(
    Display* ,
    struct _XrmHashBucketRec* ,
    const char* ,
    const char*
);

extern int XCloseOM(
    XOM
);

extern char *XSetOMValues(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));

extern char *XGetOMValues(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));

extern Display *XDisplayOfOM(
    XOM
);

extern char *XLocaleOfOM(
    XOM
);

extern XOC XCreateOC(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XDestroyOC(
    XOC
);

extern XOM XOMOfOC(
    XOC
);

extern char *XSetOCValues(
    XOC ,
    ...
) __attribute__ ((__sentinel__(0)));

extern char *XGetOCValues(
    XOC ,
    ...
) __attribute__ ((__sentinel__(0)));

extern XFontSet XCreateFontSet(
    Display* ,
    const char* ,
    char*** ,
    int* ,
    char**
);

extern void XFreeFontSet(
    Display* ,
    XFontSet
);

extern int XFontsOfFontSet(
    XFontSet ,
    XFontStruct*** ,
    char***
);

extern char *XBaseFontNameListOfFontSet(
    XFontSet
);

extern char *XLocaleOfFontSet(
    XFontSet
);

extern int XContextDependentDrawing(
    XFontSet
);

extern int XDirectionalDependentDrawing(
    XFontSet
);

extern int XContextualDrawing(
    XFontSet
);

extern XFontSetExtents *XExtentsOfFontSet(
    XFontSet
);

extern int XmbTextEscapement(
    XFontSet ,
    const char* ,
    int
);

extern int XwcTextEscapement(
    XFontSet ,
    const wchar_t* ,
    int
);

extern int Xutf8TextEscapement(
    XFontSet ,
    const char* ,
    int
);

extern int XmbTextExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle*
);

extern int XwcTextExtents(
    XFontSet ,
    const wchar_t* ,
    int ,
    XRectangle* ,
    XRectangle*
);

extern int Xutf8TextExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle*
);

extern int XmbTextPerCharExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);

extern int XwcTextPerCharExtents(
    XFontSet ,
    const wchar_t* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);

extern int Xutf8TextPerCharExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);

extern void XmbDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XmbTextItem* ,
    int
);

extern void XwcDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XwcTextItem* ,
    int
);

extern void Xutf8DrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XmbTextItem* ,
    int
);

extern void XmbDrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern void XwcDrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const wchar_t* ,
    int
);

extern void Xutf8DrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern void XmbDrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern void XwcDrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const wchar_t* ,
    int
);

extern void Xutf8DrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern XIM XOpenIM(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char*
);

extern int XCloseIM(
    XIM
);

extern char *XGetIMValues(
    XIM , ...
) __attribute__ ((__sentinel__(0)));

extern char *XSetIMValues(
    XIM , ...
) __attribute__ ((__sentinel__(0)));

extern Display *XDisplayOfIM(
    XIM
);

extern char *XLocaleOfIM(
    XIM
);

extern XIC XCreateIC(
    XIM , ...
) __attribute__ ((__sentinel__(0)));

extern void XDestroyIC(
    XIC
);

extern void XSetICFocus(
    XIC
);

extern void XUnsetICFocus(
    XIC
);

extern wchar_t *XwcResetIC(
    XIC
);

extern char *XmbResetIC(
    XIC
);

extern char *Xutf8ResetIC(
    XIC
);

extern char *XSetICValues(
    XIC , ...
) __attribute__ ((__sentinel__(0)));

extern char *XGetICValues(
    XIC , ...
) __attribute__ ((__sentinel__(0)));

extern XIM XIMOfIC(
    XIC
);

extern int XFilterEvent(
    XEvent* ,
    Window
);

extern int XmbLookupString(
    XIC ,
    XKeyPressedEvent* ,
    char* ,
    int ,
    KeySym* ,
    int*
);

extern int XwcLookupString(
    XIC ,
    XKeyPressedEvent* ,
    wchar_t* ,
    int ,
    KeySym* ,
    int*
);

extern int Xutf8LookupString(
    XIC ,
    XKeyPressedEvent* ,
    char* ,
    int ,
    KeySym* ,
    int*
);

extern XVaNestedList XVaCreateNestedList(
    int , ...
) __attribute__ ((__sentinel__(0)));



extern int XRegisterIMInstantiateCallback(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char* ,
    XIDProc ,
    XPointer
);

extern int XUnregisterIMInstantiateCallback(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char* ,
    XIDProc ,
    XPointer
);

typedef void (*XConnectionWatchProc)(
    Display* ,
    XPointer ,
    int ,
    int ,
    XPointer*
);


extern int XInternalConnectionNumbers(
    Display* ,
    int** ,
    int*
);

extern void XProcessInternalConnection(
    Display* ,
    int
);

extern int XAddConnectionWatch(
    Display* ,
    XConnectionWatchProc ,
    XPointer
);

extern void XRemoveConnectionWatch(
    Display* ,
    XConnectionWatchProc ,
    XPointer
);

extern void XSetAuthorization(
    char * ,
    int ,
    char * ,
    int
);

extern int _Xmbtowc(
    wchar_t * ,




    char * ,
    int

);

extern int _Xwctomb(
    char * ,
    wchar_t
);


# 57 "/usr/include/X11/Intrinsic.h" 2 3 4
# 1 "/usr/include/X11/Xutil.h" 1 3 4
# 56 "/usr/include/X11/Xutil.h" 3 4
# 1 "/usr/include/X11/keysym.h" 1 3 4
# 75 "/usr/include/X11/keysym.h" 3 4
# 1 "/usr/include/X11/keysymdef.h" 1 3 4
# 76 "/usr/include/X11/keysym.h" 2 3 4
# 57 "/usr/include/X11/Xutil.h" 2 3 4
# 75 "/usr/include/X11/Xutil.h" 3 4
typedef struct {
     long flags;
 int x, y;
 int width, height;
 int min_width, min_height;
 int max_width, max_height;
     int width_inc, height_inc;
 struct {
  int x;
  int y;
 } min_aspect, max_aspect;
 int base_width, base_height;
 int win_gravity;
} XSizeHints;
# 113 "/usr/include/X11/Xutil.h" 3 4
typedef struct {
 long flags;
 int input;

 int initial_state;
 Pixmap icon_pixmap;
 Window icon_window;
 int icon_x, icon_y;
 Pixmap icon_mask;
 XID window_group;

} XWMHints;
# 157 "/usr/include/X11/Xutil.h" 3 4
typedef struct {
    unsigned char *value;
    Atom encoding;
    int format;
    unsigned long nitems;
} XTextProperty;





typedef enum {
    XStringStyle,
    XCompoundTextStyle,
    XTextStyle,
    XStdICCTextStyle,

    XUTF8StringStyle
} XICCEncodingStyle;

typedef struct {
 int min_width, min_height;
 int max_width, max_height;
 int width_inc, height_inc;
} XIconSize;

typedef struct {
 char *res_name;
 char *res_class;
} XClassHint;
# 225 "/usr/include/X11/Xutil.h" 3 4
typedef struct _XComposeStatus {
    XPointer compose_ptr;
    int chars_matched;
} XComposeStatus;
# 267 "/usr/include/X11/Xutil.h" 3 4
typedef struct _XRegion *Region;
# 281 "/usr/include/X11/Xutil.h" 3 4
typedef struct {
  Visual *visual;
  VisualID visualid;
  int screen;
  int depth;



  int class;

  unsigned long red_mask;
  unsigned long green_mask;
  unsigned long blue_mask;
  int colormap_size;
  int bits_per_rgb;
} XVisualInfo;
# 314 "/usr/include/X11/Xutil.h" 3 4
typedef struct {
 Colormap colormap;
 unsigned long red_max;
 unsigned long red_mult;
 unsigned long green_max;
 unsigned long green_mult;
 unsigned long blue_max;
 unsigned long blue_mult;
 unsigned long base_pixel;
 VisualID visualid;
 XID killid;
} XStandardColormap;
# 351 "/usr/include/X11/Xutil.h" 3 4
typedef int XContext;








extern XClassHint *XAllocClassHint (
    void
);

extern XIconSize *XAllocIconSize (
    void
);

extern XSizeHints *XAllocSizeHints (
    void
);

extern XStandardColormap *XAllocStandardColormap (
    void
);

extern XWMHints *XAllocWMHints (
    void
);

extern int XClipBox(
    Region ,
    XRectangle*
);

extern Region XCreateRegion(
    void
);

extern const char *XDefaultString (void);

extern int XDeleteContext(
    Display* ,
    XID ,
    XContext
);

extern int XDestroyRegion(
    Region
);

extern int XEmptyRegion(
    Region
);

extern int XEqualRegion(
    Region ,
    Region
);

extern int XFindContext(
    Display* ,
    XID ,
    XContext ,
    XPointer*
);

extern int XGetClassHint(
    Display* ,
    Window ,
    XClassHint*
);

extern int XGetIconSizes(
    Display* ,
    Window ,
    XIconSize** ,
    int*
);

extern int XGetNormalHints(
    Display* ,
    Window ,
    XSizeHints*
);

extern int XGetRGBColormaps(
    Display* ,
    Window ,
    XStandardColormap** ,
    int* ,
    Atom
);

extern int XGetSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    Atom
);

extern int XGetStandardColormap(
    Display* ,
    Window ,
    XStandardColormap* ,
    Atom
);

extern int XGetTextProperty(
    Display* ,
    Window ,
    XTextProperty* ,
    Atom
);

extern XVisualInfo *XGetVisualInfo(
    Display* ,
    long ,
    XVisualInfo* ,
    int*
);

extern int XGetWMClientMachine(
    Display* ,
    Window ,
    XTextProperty*
);

extern XWMHints *XGetWMHints(
    Display* ,
    Window
);

extern int XGetWMIconName(
    Display* ,
    Window ,
    XTextProperty*
);

extern int XGetWMName(
    Display* ,
    Window ,
    XTextProperty*
);

extern int XGetWMNormalHints(
    Display* ,
    Window ,
    XSizeHints* ,
    long*
);

extern int XGetWMSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    long* ,
    Atom
);

extern int XGetZoomHints(
    Display* ,
    Window ,
    XSizeHints*
);

extern int XIntersectRegion(
    Region ,
    Region ,
    Region
);

extern void XConvertCase(
    KeySym ,
    KeySym* ,
    KeySym*
);

extern int XLookupString(
    XKeyEvent* ,
    char* ,
    int ,
    KeySym* ,
    XComposeStatus*
);

extern int XMatchVisualInfo(
    Display* ,
    int ,
    int ,
    int ,
    XVisualInfo*
);

extern int XOffsetRegion(
    Region ,
    int ,
    int
);

extern int XPointInRegion(
    Region ,
    int ,
    int
);

extern Region XPolygonRegion(
    XPoint* ,
    int ,
    int
);

extern int XRectInRegion(
    Region ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XSaveContext(
    Display* ,
    XID ,
    XContext ,
    const char*
);

extern int XSetClassHint(
    Display* ,
    Window ,
    XClassHint*
);

extern int XSetIconSizes(
    Display* ,
    Window ,
    XIconSize* ,
    int
);

extern int XSetNormalHints(
    Display* ,
    Window ,
    XSizeHints*
);

extern void XSetRGBColormaps(
    Display* ,
    Window ,
    XStandardColormap* ,
    int ,
    Atom
);

extern int XSetSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    Atom
);

extern int XSetStandardProperties(
    Display* ,
    Window ,
    const char* ,
    const char* ,
    Pixmap ,
    char** ,
    int ,
    XSizeHints*
);

extern void XSetTextProperty(
    Display* ,
    Window ,
    XTextProperty* ,
    Atom
);

extern void XSetWMClientMachine(
    Display* ,
    Window ,
    XTextProperty*
);

extern int XSetWMHints(
    Display* ,
    Window ,
    XWMHints*
);

extern void XSetWMIconName(
    Display* ,
    Window ,
    XTextProperty*
);

extern void XSetWMName(
    Display* ,
    Window ,
    XTextProperty*
);

extern void XSetWMNormalHints(
    Display* ,
    Window ,
    XSizeHints*
);

extern void XSetWMProperties(
    Display* ,
    Window ,
    XTextProperty* ,
    XTextProperty* ,
    char** ,
    int ,
    XSizeHints* ,
    XWMHints* ,
    XClassHint*
);

extern void XmbSetWMProperties(
    Display* ,
    Window ,
    const char* ,
    const char* ,
    char** ,
    int ,
    XSizeHints* ,
    XWMHints* ,
    XClassHint*
);

extern void Xutf8SetWMProperties(
    Display* ,
    Window ,
    const char* ,
    const char* ,
    char** ,
    int ,
    XSizeHints* ,
    XWMHints* ,
    XClassHint*
);

extern void XSetWMSizeHints(
    Display* ,
    Window ,
    XSizeHints* ,
    Atom
);

extern int XSetRegion(
    Display* ,
    GC ,
    Region
);

extern void XSetStandardColormap(
    Display* ,
    Window ,
    XStandardColormap* ,
    Atom
);

extern int XSetZoomHints(
    Display* ,
    Window ,
    XSizeHints*
);

extern int XShrinkRegion(
    Region ,
    int ,
    int
);

extern int XStringListToTextProperty(
    char** ,
    int ,
    XTextProperty*
);

extern int XSubtractRegion(
    Region ,
    Region ,
    Region
);

extern int XmbTextListToTextProperty(
    Display* display,
    char** list,
    int count,
    XICCEncodingStyle style,
    XTextProperty* text_prop_return
);

extern int XwcTextListToTextProperty(
    Display* display,
    wchar_t** list,
    int count,
    XICCEncodingStyle style,
    XTextProperty* text_prop_return
);

extern int Xutf8TextListToTextProperty(
    Display* display,
    char** list,
    int count,
    XICCEncodingStyle style,
    XTextProperty* text_prop_return
);

extern void XwcFreeStringList(
    wchar_t** list
);

extern int XTextPropertyToStringList(
    XTextProperty* ,
    char*** ,
    int*
);

extern int XmbTextPropertyToTextList(
    Display* display,
    const XTextProperty* text_prop,
    char*** list_return,
    int* count_return
);

extern int XwcTextPropertyToTextList(
    Display* display,
    const XTextProperty* text_prop,
    wchar_t*** list_return,
    int* count_return
);

extern int Xutf8TextPropertyToTextList(
    Display* display,
    const XTextProperty* text_prop,
    char*** list_return,
    int* count_return
);

extern int XUnionRectWithRegion(
    XRectangle* ,
    Region ,
    Region
);

extern int XUnionRegion(
    Region ,
    Region ,
    Region
);

extern int XWMGeometry(
    Display* ,
    int ,
    const char* ,
    const char* ,
    unsigned int ,
    XSizeHints* ,
    int* ,
    int* ,
    int* ,
    int* ,
    int*
);

extern int XXorRegion(
    Region ,
    Region ,
    Region
);


# 58 "/usr/include/X11/Intrinsic.h" 2 3 4
# 1 "/usr/include/X11/Xresource.h" 1 3 4
# 68 "/usr/include/X11/Xresource.h" 3 4








extern char *Xpermalloc(
    unsigned int
);







typedef int XrmQuark, *XrmQuarkList;


typedef char *XrmString;



extern XrmQuark XrmStringToQuark(
    const char*
);

extern XrmQuark XrmPermStringToQuark(
    const char*
);


extern XrmString XrmQuarkToString(
    XrmQuark
);

extern XrmQuark XrmUniqueQuark(
    void
);
# 119 "/usr/include/X11/Xresource.h" 3 4
typedef enum {XrmBindTightly, XrmBindLoosely} XrmBinding, *XrmBindingList;

extern void XrmStringToQuarkList(
    const char* ,
    XrmQuarkList
);

extern void XrmStringToBindingQuarkList(
    const char* ,
    XrmBindingList ,
    XrmQuarkList
);







typedef XrmQuark XrmName;
typedef XrmQuarkList XrmNameList;




typedef XrmQuark XrmClass;
typedef XrmQuarkList XrmClassList;
# 158 "/usr/include/X11/Xresource.h" 3 4
typedef XrmQuark XrmRepresentation;



typedef struct {
    unsigned int size;
    XPointer addr;
} XrmValue, *XrmValuePtr;
# 174 "/usr/include/X11/Xresource.h" 3 4
typedef struct _XrmHashBucketRec *XrmHashBucket;
typedef XrmHashBucket *XrmHashTable;
typedef XrmHashTable XrmSearchList[];
typedef struct _XrmHashBucketRec *XrmDatabase;


extern void XrmDestroyDatabase(
    XrmDatabase
);

extern void XrmQPutResource(
    XrmDatabase* ,
    XrmBindingList ,
    XrmQuarkList ,
    XrmRepresentation ,
    XrmValue*
);

extern void XrmPutResource(
    XrmDatabase* ,
    const char* ,
    const char* ,
    XrmValue*
);

extern void XrmQPutStringResource(
    XrmDatabase* ,
    XrmBindingList ,
    XrmQuarkList ,
    const char*
);

extern void XrmPutStringResource(
    XrmDatabase* ,
    const char* ,
    const char*
);

extern void XrmPutLineResource(
    XrmDatabase* ,
    const char*
);

extern int XrmQGetResource(
    XrmDatabase ,
    XrmNameList ,
    XrmClassList ,
    XrmRepresentation* ,
    XrmValue*
);

extern int XrmGetResource(
    XrmDatabase ,
    const char* ,
    const char* ,
    char** ,
    XrmValue*
);

extern int XrmQGetSearchList(
    XrmDatabase ,
    XrmNameList ,
    XrmClassList ,
    XrmSearchList ,
    int
);

extern int XrmQGetSearchResource(
    XrmSearchList ,
    XrmName ,
    XrmClass ,
    XrmRepresentation* ,
    XrmValue*
);
# 257 "/usr/include/X11/Xresource.h" 3 4
extern void XrmSetDatabase(
    Display* ,
    XrmDatabase
);

extern XrmDatabase XrmGetDatabase(
    Display*
);



extern XrmDatabase XrmGetFileDatabase(
    const char*
);

extern int XrmCombineFileDatabase(
    const char* ,
    XrmDatabase* ,
    int
);

extern XrmDatabase XrmGetStringDatabase(
    const char*
);

extern void XrmPutFileDatabase(
    XrmDatabase ,
    const char*
);

extern void XrmMergeDatabases(
    XrmDatabase ,
    XrmDatabase*
);

extern void XrmCombineDatabase(
    XrmDatabase ,
    XrmDatabase* ,
    int
);




extern int XrmEnumerateDatabase(
    XrmDatabase ,
    XrmNameList ,
    XrmClassList ,
    int ,
    int (*)(
      XrmDatabase* ,
      XrmBindingList ,
      XrmQuarkList ,
      XrmRepresentation* ,
      XrmValue* ,
      XPointer
      ) ,
    XPointer
);

extern const char *XrmLocaleOfDatabase(
    XrmDatabase
);
# 328 "/usr/include/X11/Xresource.h" 3 4
typedef enum {
    XrmoptionNoArg,
    XrmoptionIsArg,
    XrmoptionStickyArg,
    XrmoptionSepArg,
    XrmoptionResArg,
    XrmoptionSkipArg,
    XrmoptionSkipLine,
    XrmoptionSkipNArgs

} XrmOptionKind;

typedef struct {
    char *option;
    char *specifier;
    XrmOptionKind argKind;
    XPointer value;
} XrmOptionDescRec, *XrmOptionDescList;


extern void XrmParseCommand(
    XrmDatabase* ,
    XrmOptionDescList ,
    int ,
    const char* ,
    int* ,
    char**
);


# 59 "/usr/include/X11/Intrinsic.h" 2 3 4





# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 94 "/usr/include/string.h" 3 4
extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 125 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 162 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 208 "/usr/include/string.h" 3 4

# 233 "/usr/include/string.h" 3 4
extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/string.h" 3 4
extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 279 "/usr/include/string.h" 3 4



extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "/usr/include/string.h" 3 4
extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "/usr/include/string.h" 3 4
extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 395 "/usr/include/string.h" 3 4


extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 425 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 443 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 487 "/usr/include/string.h" 3 4
extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "/usr/include/string.h" 3 4
extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 534 "/usr/include/string.h" 3 4
extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 557 "/usr/include/string.h" 3 4
extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 644 "/usr/include/string.h" 3 4

# 65 "/usr/include/X11/Intrinsic.h" 2 3 4




typedef char *String;
# 93 "/usr/include/X11/Intrinsic.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 94 "/usr/include/X11/Intrinsic.h" 2 3 4
# 110 "/usr/include/X11/Intrinsic.h" 3 4
typedef struct _WidgetRec *Widget;
typedef Widget *WidgetList;
typedef struct _WidgetClassRec *WidgetClass;
typedef struct _CompositeRec *CompositeWidget;
typedef struct _XtActionsRec *XtActionList;
typedef struct _XtEventRec *XtEventTable;

typedef struct _XtAppStruct *XtAppContext;
typedef unsigned long XtValueMask;
typedef unsigned long XtIntervalId;
typedef unsigned long XtInputId;
typedef unsigned long XtWorkProcId;
typedef unsigned long XtSignalId;
typedef unsigned int XtGeometryMask;
typedef unsigned long XtGCMask;
typedef unsigned long Pixel;
typedef int XtCacheType;
# 158 "/usr/include/X11/Intrinsic.h" 3 4
typedef char Boolean;
typedef long XtArgVal;
typedef unsigned char XtEnum;


typedef unsigned int Cardinal;
typedef unsigned short Dimension;
typedef short Position;

typedef void* XtPointer;



typedef XtPointer Opaque;

# 1 "/usr/include/X11/Core.h" 1 3 4
# 56 "/usr/include/X11/Core.h" 3 4


typedef struct _WidgetClassRec *CoreWidgetClass;
typedef struct _WidgetRec *CoreWidget;
extern WidgetClass coreWidgetClass;


extern WidgetClass widgetClass;




# 174 "/usr/include/X11/Intrinsic.h" 2 3 4
# 1 "/usr/include/X11/Composite.h" 1 3 4
# 54 "/usr/include/X11/Composite.h" 3 4
typedef struct _CompositeClassRec *CompositeWidgetClass;

typedef Cardinal (*XtOrderProc)(
    Widget
);



extern void XtManageChildren(
    WidgetList ,
    Cardinal
);

extern void XtManageChild(
    Widget
);

extern void XtUnmanageChildren(
    WidgetList ,
    Cardinal
);

extern void XtUnmanageChild(
    Widget
);

typedef void (*XtDoChangeProc)(
    Widget ,
    WidgetList ,
    Cardinal * ,
    WidgetList ,
    Cardinal * ,
    XtPointer
);

extern void XtChangeManagedSet(
    WidgetList ,
    Cardinal ,
    XtDoChangeProc ,
    XtPointer ,
    WidgetList ,
    Cardinal
);




extern WidgetClass compositeWidgetClass;
# 175 "/usr/include/X11/Intrinsic.h" 2 3 4
# 1 "/usr/include/X11/Constraint.h" 1 3 4
# 53 "/usr/include/X11/Constraint.h" 3 4


typedef struct _ConstraintClassRec *ConstraintWidgetClass;


extern WidgetClass constraintWidgetClass;



# 176 "/usr/include/X11/Intrinsic.h" 2 3 4
# 1 "/usr/include/X11/Object.h" 1 3 4
# 53 "/usr/include/X11/Object.h" 3 4


typedef struct _ObjectRec *Object;
typedef struct _ObjectClassRec *ObjectClass;


extern WidgetClass objectClass;



# 177 "/usr/include/X11/Intrinsic.h" 2 3 4
# 1 "/usr/include/X11/RectObj.h" 1 3 4
# 53 "/usr/include/X11/RectObj.h" 3 4


typedef struct _RectObjRec *RectObj;
typedef struct _RectObjClassRec *RectObjClass;


extern WidgetClass rectObjClass;



# 178 "/usr/include/X11/Intrinsic.h" 2 3 4

typedef struct _TranslationData *XtTranslations;
typedef struct _TranslationData *XtAccelerators;
typedef unsigned int Modifiers;

typedef void (*XtActionProc)(
    Widget ,
    XEvent* ,
    String* ,
    Cardinal*
);

typedef XtActionProc* XtBoundActions;

typedef struct _XtActionsRec{
    String string;
    XtActionProc proc;
} XtActionsRec;

typedef enum {


    XtAddress,
    XtBaseOffset,
    XtImmediate,
    XtResourceString,
    XtResourceQuark,
    XtWidgetBaseOffset,
    XtProcedureArg
} XtAddressMode;

typedef struct {
    XtAddressMode address_mode;
    XtPointer address_id;
    Cardinal size;
} XtConvertArgRec, *XtConvertArgList;

typedef void (*XtConvertArgProc)(
    Widget ,
    Cardinal* ,
    XrmValue*
);

typedef struct {
    XtGeometryMask request_mode;
    Position x, y;
    Dimension width, height, border_width;
    Widget sibling;
    int stack_mode;
} XtWidgetGeometry;







typedef void (*XtConverter)(
    XrmValue* ,
    Cardinal* ,
    XrmValue* ,
    XrmValue*
);

typedef Boolean (*XtTypeConverter)(
    Display* ,
    XrmValue* ,
    Cardinal* ,
    XrmValue* ,
    XrmValue* ,
    XtPointer*
);

typedef void (*XtDestructor)(
    XtAppContext ,
    XrmValue* ,
    XtPointer ,
    XrmValue* ,
    Cardinal*
);

typedef Opaque XtCacheRef;

typedef Opaque XtActionHookId;

typedef void (*XtActionHookProc)(
    Widget ,
    XtPointer ,
    String ,
    XEvent* ,
    String* ,
    Cardinal*
);

typedef unsigned long XtBlockHookId;

typedef void (*XtBlockHookProc)(
    XtPointer
);

typedef void (*XtKeyProc)(
    Display* ,
    KeyCode ,
    Modifiers ,
    Modifiers* ,
    KeySym*
);

typedef void (*XtCaseProc)(
    Display* ,
    KeySym ,
    KeySym* ,
    KeySym*
);

typedef void (*XtEventHandler)(
    Widget ,
    XtPointer ,
    XEvent* ,
    Boolean*
);
typedef unsigned long EventMask;

typedef enum {XtListHead, XtListTail } XtListPosition;

typedef unsigned long XtInputMask;





typedef void (*XtTimerCallbackProc)(
    XtPointer ,
    XtIntervalId*
);

typedef void (*XtInputCallbackProc)(
    XtPointer ,
    int* ,
    XtInputId*
);

typedef void (*XtSignalCallbackProc)(
    XtPointer ,
    XtSignalId*
);

typedef struct {
    String name;
    XtArgVal value;
} Arg, *ArgList;

typedef XtPointer XtVarArgsList;

typedef void (*XtCallbackProc)(
    Widget ,
    XtPointer ,
    XtPointer
);

typedef struct _XtCallbackRec {
    XtCallbackProc callback;
    XtPointer closure;
} XtCallbackRec, *XtCallbackList;

typedef enum {
 XtCallbackNoList,
 XtCallbackHasNone,
 XtCallbackHasSome
} XtCallbackStatus;

typedef enum {
    XtGeometryYes,
    XtGeometryNo,
    XtGeometryAlmost,
    XtGeometryDone
} XtGeometryResult;

typedef enum {XtGrabNone, XtGrabNonexclusive, XtGrabExclusive} XtGrabKind;

typedef struct {
    Widget shell_widget;
    Widget enable_widget;
} XtPopdownIDRec, *XtPopdownID;

typedef struct _XtResource {
    String resource_name;
    String resource_class;
    String resource_type;
    Cardinal resource_size;
    Cardinal resource_offset;
    String default_type;
    XtPointer default_addr;
} XtResource, *XtResourceList;

typedef void (*XtResourceDefaultProc)(
    Widget ,
    int ,
    XrmValue*
);

typedef String (*XtLanguageProc)(
    Display* ,
    String ,
    XtPointer
);

typedef void (*XtErrorMsgHandler)(
    String ,
    String ,
    String ,
    String ,
    String* ,
    Cardinal*
);

typedef void (*XtErrorHandler)(
  String
);

typedef void (*XtCreatePopupChildProc)(
    Widget
);

typedef Boolean (*XtWorkProc)(
    XtPointer
);

typedef struct {
    char match;
    String substitution;
} SubstitutionRec, *Substitution;

typedef Boolean (*XtFilePredicate)(
   String
);

typedef XtPointer XtRequestId;

typedef Boolean (*XtConvertSelectionProc)(
    Widget ,
    Atom* ,
    Atom* ,
    Atom* ,
    XtPointer* ,
    unsigned long* ,
    int*
);

typedef void (*XtLoseSelectionProc)(
    Widget ,
    Atom*
);

typedef void (*XtSelectionDoneProc)(
    Widget ,
    Atom* ,
    Atom*
);

typedef void (*XtSelectionCallbackProc)(
    Widget ,
    XtPointer ,
    Atom* ,
    Atom* ,
    XtPointer ,
    unsigned long* ,
    int*
);

typedef void (*XtLoseSelectionIncrProc)(
    Widget ,
    Atom* ,
    XtPointer
);

typedef void (*XtSelectionDoneIncrProc)(
    Widget ,
    Atom* ,
    Atom* ,
    XtRequestId* ,
    XtPointer
);

typedef Boolean (*XtConvertSelectionIncrProc)(
    Widget ,
    Atom* ,
    Atom* ,
    Atom* ,
    XtPointer* ,
    unsigned long* ,
    int* ,
    unsigned long* ,
    XtPointer ,
    XtRequestId*
);

typedef void (*XtCancelConvertSelectionProc)(
    Widget ,
    Atom* ,
    Atom* ,
    XtRequestId* ,
    XtPointer
);

typedef Boolean (*XtEventDispatchProc)(
    XEvent*
);

typedef void (*XtExtensionSelectProc)(
    Widget ,
    int* ,
    XtPointer* ,
    int ,
    XtPointer
);









extern Boolean XtConvertAndStore(
    Widget ,
    const char* ,
    XrmValue* ,
    const char* ,
    XrmValue*
);

extern Boolean XtCallConverter(
    Display* ,
    XtTypeConverter ,
    XrmValuePtr ,
    Cardinal ,
    XrmValuePtr ,
    XrmValue* ,
    XtCacheRef*
);

extern Boolean XtDispatchEvent(
    XEvent*
);

extern Boolean XtCallAcceptFocus(
    Widget ,
    Time*
);

extern Boolean XtPeekEvent(
    XEvent*
);

extern Boolean XtAppPeekEvent(
    XtAppContext ,
    XEvent*
);

extern Boolean XtIsSubclass(
    Widget ,
    WidgetClass
);

extern Boolean XtIsObject(
    Widget
);

extern Boolean _XtCheckSubclassFlag(
    Widget ,
    XtEnum
);

extern Boolean _XtIsSubclassOf(
    Widget ,
    WidgetClass ,
    WidgetClass ,
    XtEnum
);

extern Boolean XtIsManaged(
    Widget
);

extern Boolean XtIsRealized(
    Widget
);

extern Boolean XtIsSensitive(
    Widget
);

extern Boolean XtOwnSelection(
    Widget ,
    Atom ,
    Time ,
    XtConvertSelectionProc ,
    XtLoseSelectionProc ,
    XtSelectionDoneProc
);

extern Boolean XtOwnSelectionIncremental(
    Widget ,
    Atom ,
    Time ,
    XtConvertSelectionIncrProc ,
    XtLoseSelectionIncrProc ,
    XtSelectionDoneIncrProc ,
    XtCancelConvertSelectionProc ,
    XtPointer
);

extern XtGeometryResult XtMakeResizeRequest(
    Widget ,
    Dimension ,
    Dimension ,
    Dimension* ,
    Dimension*
);

extern void XtTranslateCoords(
    Widget ,
    Position ,
    Position ,
    Position* ,
    Position*
);

extern KeySym* XtGetKeysymTable(
    Display* ,
    KeyCode* ,
    int*
);

extern void XtKeysymToKeycodeList(
    Display* ,
    KeySym ,
    KeyCode** ,
    Cardinal*
);

extern void XtStringConversionWarning(
    const char* ,
    const char*
);

extern void XtDisplayStringConversionWarning(
    Display* ,
    const char* ,
    const char*
);

extern XtConvertArgRec const colorConvertArgs[];
extern XtConvertArgRec const screenConvertArg[];

extern void XtAppAddConverter(
    XtAppContext ,
    const char* ,
    const char* ,
    XtConverter ,
    XtConvertArgList ,
    Cardinal
);

extern void XtAddConverter(
    const char* ,
    const char* ,
    XtConverter ,
    XtConvertArgList ,
    Cardinal
);

extern void XtSetTypeConverter(
    const char* ,
    const char* ,
    XtTypeConverter ,
    XtConvertArgList ,
    Cardinal ,
    XtCacheType ,
    XtDestructor
);

extern void XtAppSetTypeConverter(
    XtAppContext ,
    const char* ,
    const char* ,
    XtTypeConverter ,
    XtConvertArgList ,
    Cardinal ,
    XtCacheType ,
    XtDestructor
);

extern void XtConvert(
    Widget ,
    const char* ,
    XrmValue* ,
    const char* ,
    XrmValue*
);

extern void XtDirectConvert(
    XtConverter ,
    XrmValuePtr ,
    Cardinal ,
    XrmValuePtr ,
    XrmValue*
);







extern XtTranslations XtParseTranslationTable(
    const char*
);

extern XtAccelerators XtParseAcceleratorTable(
    const char*
);

extern void XtOverrideTranslations(
    Widget ,
    XtTranslations
);

extern void XtAugmentTranslations(
    Widget ,
    XtTranslations
);

extern void XtInstallAccelerators(
    Widget ,
    Widget
);

extern void XtInstallAllAccelerators(
    Widget ,
    Widget
);

extern void XtUninstallTranslations(
    Widget
);

extern void XtAppAddActions(
    XtAppContext ,
    XtActionList ,
    Cardinal
);

extern void XtAddActions(
    XtActionList ,
    Cardinal
);

extern XtActionHookId XtAppAddActionHook(
    XtAppContext ,
    XtActionHookProc ,
    XtPointer
);

extern void XtRemoveActionHook(
    XtActionHookId
);

extern void XtGetActionList(
    WidgetClass ,
    XtActionList* ,
    Cardinal*
);

extern void XtCallActionProc(
    Widget ,
    const char* ,
    XEvent* ,
    String* ,
    Cardinal
);

extern void XtRegisterGrabAction(
    XtActionProc ,
    Boolean ,
    unsigned int ,
    int ,
    int
);

extern void XtSetMultiClickTime(
    Display* ,
    int
);

extern int XtGetMultiClickTime(
    Display*
);

extern KeySym XtGetActionKeysym(
    XEvent* ,
    Modifiers*
);







extern void XtTranslateKeycode(
    Display* ,
    KeyCode ,
    Modifiers ,
    Modifiers* ,
    KeySym*
);

extern void XtTranslateKey(
    Display* ,
    KeyCode ,
    Modifiers ,
    Modifiers* ,
    KeySym*
);

extern void XtSetKeyTranslator(
    Display* ,
    XtKeyProc
);

extern void XtRegisterCaseConverter(
    Display* ,
    XtCaseProc ,
    KeySym ,
    KeySym
);

extern void XtConvertCase(
    Display* ,
    KeySym ,
    KeySym* ,
    KeySym*
);
# 836 "/usr/include/X11/Intrinsic.h" 3 4
extern void XtAddEventHandler(
    Widget ,
    EventMask ,
    Boolean ,
    XtEventHandler ,
    XtPointer
);

extern void XtRemoveEventHandler(
    Widget ,
    EventMask ,
    Boolean ,
    XtEventHandler ,
    XtPointer
);

extern void XtAddRawEventHandler(
    Widget ,
    EventMask ,
    Boolean ,
    XtEventHandler ,
    XtPointer
);

extern void XtRemoveRawEventHandler(
    Widget ,
    EventMask ,
    Boolean ,
    XtEventHandler ,
    XtPointer
);

extern void XtInsertEventHandler(
    Widget ,
    EventMask ,
    Boolean ,
    XtEventHandler ,
    XtPointer ,
    XtListPosition
);

extern void XtInsertRawEventHandler(
    Widget ,
    EventMask ,
    Boolean ,
    XtEventHandler ,
    XtPointer ,
    XtListPosition
);

extern XtEventDispatchProc XtSetEventDispatcher(
    Display* ,
    int ,
    XtEventDispatchProc
);

extern Boolean XtDispatchEventToWidget(
    Widget ,
    XEvent*
);

extern void XtInsertEventTypeHandler(
    Widget ,
    int ,
    XtPointer ,
    XtEventHandler ,
    XtPointer ,
    XtListPosition
);

extern void XtRemoveEventTypeHandler(
    Widget ,
    int ,
    XtPointer ,
    XtEventHandler ,
    XtPointer
);

extern EventMask XtBuildEventMask(
    Widget
);

extern void XtRegisterExtensionSelector(
    Display* ,
    int ,
    int ,
    XtExtensionSelectProc ,
    XtPointer
);

extern void XtAddGrab(
    Widget ,
    Boolean ,
    Boolean
);

extern void XtRemoveGrab(
    Widget
);

extern void XtProcessEvent(
    XtInputMask
);

extern void XtAppProcessEvent(
    XtAppContext ,
    XtInputMask
);

extern void XtMainLoop(
    void
);

extern void XtAppMainLoop(
    XtAppContext
);

extern void XtAddExposureToRegion(
    XEvent* ,
    Region
);

extern void XtSetKeyboardFocus(
    Widget ,
    Widget
);

extern Widget XtGetKeyboardFocusWidget(
    Widget
);

extern XEvent* XtLastEventProcessed(
    Display*
);

extern Time XtLastTimestampProcessed(
    Display*
);







extern XtIntervalId XtAddTimeOut(
    unsigned long ,
    XtTimerCallbackProc ,
    XtPointer
);

extern XtIntervalId XtAppAddTimeOut(
    XtAppContext ,
    unsigned long ,
    XtTimerCallbackProc ,
    XtPointer
);

extern void XtRemoveTimeOut(
    XtIntervalId
);

extern XtInputId XtAddInput(
    int ,
    XtPointer ,
    XtInputCallbackProc ,
    XtPointer
);

extern XtInputId XtAppAddInput(
    XtAppContext ,
    int ,
    XtPointer ,
    XtInputCallbackProc ,
    XtPointer
);

extern void XtRemoveInput(
    XtInputId
);

extern XtSignalId XtAddSignal(
    XtSignalCallbackProc ,
    XtPointer );

extern XtSignalId XtAppAddSignal(
    XtAppContext ,
    XtSignalCallbackProc ,
    XtPointer
);

extern void XtRemoveSignal(
    XtSignalId
);

extern void XtNoticeSignal(
    XtSignalId
);

extern void XtNextEvent(
    XEvent*
);

extern void XtAppNextEvent(
    XtAppContext ,
    XEvent*
);







extern Boolean XtPending(
    void
);

extern XtInputMask XtAppPending(
    XtAppContext
);

extern XtBlockHookId XtAppAddBlockHook(
    XtAppContext ,
    XtBlockHookProc ,
    XtPointer
);

extern void XtRemoveBlockHook(
    XtBlockHookId
);
# 1081 "/usr/include/X11/Intrinsic.h" 3 4
extern Boolean XtIsOverrideShell(Widget );







extern Boolean XtIsVendorShell(Widget );





extern Boolean XtIsTransientShell(Widget );






extern Boolean XtIsApplicationShell(Widget );





extern Boolean XtIsSessionShell(Widget );




extern void XtRealizeWidget(
    Widget
);

void XtUnrealizeWidget(
    Widget
);

extern void XtDestroyWidget(
    Widget
);

extern void XtSetSensitive(
    Widget ,
    Boolean
);

extern void XtSetMappedWhenManaged(
    Widget ,
    Boolean
);

extern Widget XtNameToWidget(
    Widget ,
    const char*
);

extern Widget XtWindowToWidget(
    Display* ,
    Window
);

extern XtPointer XtGetClassExtension(
    WidgetClass ,
    Cardinal ,
    XrmQuark ,
    long ,
    Cardinal
);
# 1163 "/usr/include/X11/Intrinsic.h" 3 4
extern ArgList XtMergeArgLists(
    ArgList ,
    Cardinal ,
    ArgList ,
    Cardinal
);
# 1179 "/usr/include/X11/Intrinsic.h" 3 4
extern XtVarArgsList XtVaCreateArgsList(
    XtPointer , ...
) __attribute__ ((__sentinel__(0)));
# 1193 "/usr/include/X11/Intrinsic.h" 3 4
extern Display *XtDisplay(
    Widget
);

extern Display *XtDisplayOfObject(
    Widget
);

extern Screen *XtScreen(
    Widget
);

extern Screen *XtScreenOfObject(
    Widget
);

extern Window XtWindow(
    Widget
);

extern Window XtWindowOfObject(
    Widget
);

extern String XtName(
    Widget
);

extern WidgetClass XtSuperclass(
    Widget
);

extern WidgetClass XtClass(
    Widget
);

extern Widget XtParent(
    Widget
);




extern void XtMapWidget(Widget );



extern void XtUnmapWidget(Widget );



extern void XtAddCallback(
    Widget ,
    const char* ,
    XtCallbackProc ,
    XtPointer
);

extern void XtRemoveCallback(
    Widget ,
    const char* ,
    XtCallbackProc ,
    XtPointer
);

extern void XtAddCallbacks(
    Widget ,
    const char* ,
    XtCallbackList
);

extern void XtRemoveCallbacks(
    Widget ,
    const char* ,
    XtCallbackList
);

extern void XtRemoveAllCallbacks(
    Widget ,
    const char*
);


extern void XtCallCallbacks(
    Widget ,
    const char* ,
    XtPointer
);

extern void XtCallCallbackList(
    Widget ,
    XtCallbackList ,
    XtPointer
);

extern XtCallbackStatus XtHasCallbacks(
    Widget ,
    const char*
);
# 1300 "/usr/include/X11/Intrinsic.h" 3 4
extern XtGeometryResult XtMakeGeometryRequest(
    Widget ,
    XtWidgetGeometry* ,
    XtWidgetGeometry*
);

extern XtGeometryResult XtQueryGeometry(
    Widget ,
    XtWidgetGeometry* ,
    XtWidgetGeometry*
);

extern Widget XtCreatePopupShell(
    const char* ,
    WidgetClass ,
    Widget ,
    ArgList ,
    Cardinal
);

extern Widget XtVaCreatePopupShell(
    const char* ,
    WidgetClass ,
    Widget ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtPopup(
    Widget ,
    XtGrabKind
);

extern void XtPopupSpringLoaded(
    Widget
);

extern void XtCallbackNone(
    Widget ,
    XtPointer ,
    XtPointer
);

extern void XtCallbackNonexclusive(
    Widget ,
    XtPointer ,
    XtPointer
);

extern void XtCallbackExclusive(
    Widget ,
    XtPointer ,
    XtPointer
);

extern void XtPopdown(
    Widget
);

extern void XtCallbackPopdown(
    Widget ,
    XtPointer ,
    XtPointer
);

extern void XtMenuPopupAction(
    Widget ,
    XEvent* ,
    String* ,
    Cardinal*
);

extern Widget XtCreateWidget(
    const char* ,
    WidgetClass ,
    Widget ,
    ArgList ,
    Cardinal
);

extern Widget XtCreateManagedWidget(
    const char* ,
    WidgetClass ,
    Widget ,
    ArgList ,
    Cardinal
);

extern Widget XtVaCreateWidget(
    const char* ,
    WidgetClass ,
    Widget ,
    ...
) __attribute__ ((__sentinel__(0)));

extern Widget XtVaCreateManagedWidget(
    const char* ,
    WidgetClass ,
    Widget ,
    ...
) __attribute__ ((__sentinel__(0)));

extern Widget XtCreateApplicationShell(
    const char* ,
    WidgetClass ,
    ArgList ,
    Cardinal
);

extern Widget XtAppCreateShell(
    const char* ,
    const char* ,
    WidgetClass ,
    Display* ,
    ArgList ,
    Cardinal
);

extern Widget XtVaAppCreateShell(
    const char* ,
    const char* ,
    WidgetClass ,
    Display* ,
    ...
) __attribute__ ((__sentinel__(0)));







extern void XtToolkitInitialize(
    void
);

extern XtLanguageProc XtSetLanguageProc(
    XtAppContext ,
    XtLanguageProc ,
    XtPointer
);

extern void XtDisplayInitialize(
    XtAppContext ,
    Display* ,
    const char* ,
    const char* ,
    XrmOptionDescRec* ,
    Cardinal ,
    int* ,
    char**
);

extern Widget XtOpenApplication(
    XtAppContext* ,
    const char* ,
    XrmOptionDescList ,
    Cardinal ,
    int* ,
    String* ,
    String* ,
    WidgetClass ,
    ArgList ,
    Cardinal
);

extern Widget XtVaOpenApplication(
    XtAppContext* ,
    const char* ,
    XrmOptionDescList ,
    Cardinal ,
    int* ,
    String* ,
    String* ,
    WidgetClass ,
    ...
) __attribute__ ((__sentinel__(0)));

extern Widget XtAppInitialize(
    XtAppContext* ,
    const char* ,
    XrmOptionDescList ,
    Cardinal ,
    int* ,
    String* ,
    String* ,
    ArgList ,
    Cardinal
);

extern Widget XtVaAppInitialize(
    XtAppContext* ,
    const char* ,
    XrmOptionDescList ,
    Cardinal ,
    int* ,
    String* ,
    String* ,
    ...
) __attribute__ ((__sentinel__(0)));

extern Widget XtInitialize(
    const char* ,
    const char* ,
    XrmOptionDescRec* ,
    Cardinal ,
    int* ,
    char**
);

extern Display *XtOpenDisplay(
    XtAppContext ,
    const char* ,
    const char* ,
    const char* ,
    XrmOptionDescRec* ,
    Cardinal ,
    int* ,
    char**
);

extern XtAppContext XtCreateApplicationContext(
    void
);

extern void XtAppSetFallbackResources(
    XtAppContext ,
    String*
);

extern void XtDestroyApplicationContext(
    XtAppContext
);

extern void XtInitializeWidgetClass(
    WidgetClass
);

extern XtAppContext XtWidgetToApplicationContext(
    Widget
);

extern XtAppContext XtDisplayToApplicationContext(
    Display*
);

extern XrmDatabase XtDatabase(
    Display*
);

extern XrmDatabase XtScreenDatabase(
    Screen*
);

extern void XtCloseDisplay(
    Display*
);

extern void XtGetApplicationResources(
    Widget ,
    XtPointer ,
    XtResourceList ,
    Cardinal ,
    ArgList ,
    Cardinal
);

extern void XtVaGetApplicationResources(
    Widget ,
    XtPointer ,
    XtResourceList ,
    Cardinal ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtGetSubresources(
    Widget ,
    XtPointer ,
    const char* ,
    const char* ,
    XtResourceList ,
    Cardinal ,
    ArgList ,
    Cardinal
);

extern void XtVaGetSubresources(
    Widget ,
    XtPointer ,
    const char* ,
    const char* ,
    XtResourceList ,
    Cardinal ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtSetValues(
    Widget ,
    ArgList ,
    Cardinal
);

extern void XtVaSetValues(
    Widget ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtGetValues(
    Widget ,
    ArgList ,
    Cardinal
);

extern void XtVaGetValues(
    Widget ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtSetSubvalues(
    XtPointer ,
    XtResourceList ,
    Cardinal ,
    ArgList ,
    Cardinal
);

extern void XtVaSetSubvalues(
    XtPointer ,
    XtResourceList ,
    Cardinal ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtGetSubvalues(
    XtPointer ,
    XtResourceList ,
    Cardinal ,
    ArgList ,
    Cardinal
);

extern void XtVaGetSubvalues(
    XtPointer ,
    XtResourceList ,
    Cardinal ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XtGetResourceList(
    WidgetClass ,
    XtResourceList* ,
    Cardinal*
);

extern void XtGetConstraintResourceList(
    WidgetClass ,
    XtResourceList* ,
    Cardinal*
);
# 1688 "/usr/include/X11/Intrinsic.h" 3 4
typedef struct _XtCheckpointTokenRec {
    int save_type;
    int interact_style;
    Boolean shutdown;
    Boolean fast;
    Boolean cancel_shutdown;
    int phase;
    int interact_dialog_type;
    Boolean request_cancel;
    Boolean request_next_phase;
    Boolean save_success;
    int type;
    Widget widget;
} XtCheckpointTokenRec, *XtCheckpointToken;

XtCheckpointToken XtSessionGetToken(
    Widget
);

void XtSessionReturnToken(
    XtCheckpointToken
);







extern XtErrorMsgHandler XtAppSetErrorMsgHandler(
    XtAppContext ,
    XtErrorMsgHandler
);

extern void XtSetErrorMsgHandler(
    XtErrorMsgHandler
);

extern XtErrorMsgHandler XtAppSetWarningMsgHandler(
    XtAppContext ,
    XtErrorMsgHandler
);

extern void XtSetWarningMsgHandler(
    XtErrorMsgHandler
);

extern void XtAppErrorMsg(
    XtAppContext ,
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    String* ,
    Cardinal*
);

extern void XtErrorMsg(
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    String* ,
    Cardinal*
);

extern void XtAppWarningMsg(
    XtAppContext ,
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    String* ,
    Cardinal*
);

extern void XtWarningMsg(
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    String* ,
    Cardinal*
);

extern XtErrorHandler XtAppSetErrorHandler(
    XtAppContext ,
    XtErrorHandler
);

extern void XtSetErrorHandler(
    XtErrorHandler
);

extern XtErrorHandler XtAppSetWarningHandler(
    XtAppContext ,
    XtErrorHandler
);

extern void XtSetWarningHandler(
    XtErrorHandler
);

extern void XtAppError(
    XtAppContext ,
    const char*
);

extern void XtError(
    const char*
);

extern void XtAppWarning(
    XtAppContext ,
    const char*
);

extern void XtWarning(
    const char*
);

extern XrmDatabase *XtAppGetErrorDatabase(
    XtAppContext
);

extern XrmDatabase *XtGetErrorDatabase(
    void
);

extern void XtAppGetErrorDatabaseText(
    XtAppContext ,
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    String ,
    int ,
    XrmDatabase
);

extern void XtGetErrorDatabaseText(
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    String ,
    int
);







extern char *XtMalloc(
    Cardinal
);

extern char *XtCalloc(
    Cardinal ,
    Cardinal
);

extern char *XtRealloc(
    char* ,
    Cardinal
);

extern void XtFree(
    char*
);
# 1897 "/usr/include/X11/Intrinsic.h" 3 4
extern String XtNewString(String );
# 1907 "/usr/include/X11/Intrinsic.h" 3 4
extern XtWorkProcId XtAddWorkProc(
    XtWorkProc ,
    XtPointer
);

extern XtWorkProcId XtAppAddWorkProc(
    XtAppContext ,
    XtWorkProc ,
    XtPointer
);

extern void XtRemoveWorkProc(
    XtWorkProcId
);







extern GC XtGetGC(
    Widget ,
    XtGCMask ,
    XGCValues*
);

extern GC XtAllocateGC(
    Widget ,
    Cardinal ,
    XtGCMask ,
    XGCValues* ,
    XtGCMask ,
    XtGCMask
);





extern void XtDestroyGC(
    GC
);

extern void XtReleaseGC(
    Widget ,
    GC
);



extern void XtAppReleaseCacheRefs(
    XtAppContext ,
    XtCacheRef*
);

extern void XtCallbackReleaseCacheRef(
    Widget ,
    XtPointer ,
    XtPointer
);

extern void XtCallbackReleaseCacheRefList(
    Widget ,
    XtPointer ,
    XtPointer
);

extern void XtSetWMColormapWindows(
    Widget ,
    Widget* ,
    Cardinal
);

extern String XtFindFile(
    const char* ,
    Substitution ,
    Cardinal ,
    XtFilePredicate
);

extern String XtResolvePathname(
    Display* ,
    const char* ,
    const char* ,
    const char* ,
    const char* ,
    Substitution ,
    Cardinal ,
    XtFilePredicate
);
# 2007 "/usr/include/X11/Intrinsic.h" 3 4
extern void XtDisownSelection(
    Widget ,
    Atom ,
    Time
);

extern void XtGetSelectionValue(
    Widget ,
    Atom ,
    Atom ,
    XtSelectionCallbackProc ,
    XtPointer ,
    Time
);

extern void XtGetSelectionValues(
    Widget ,
    Atom ,
    Atom* ,
    int ,
    XtSelectionCallbackProc ,
    XtPointer* ,
    Time
);

extern void XtAppSetSelectionTimeout(
    XtAppContext ,
    unsigned long
);

extern void XtSetSelectionTimeout(
    unsigned long
);

extern unsigned long XtAppGetSelectionTimeout(
    XtAppContext
);

extern unsigned long XtGetSelectionTimeout(
    void
);

extern XSelectionRequestEvent *XtGetSelectionRequest(
    Widget ,
    Atom ,
    XtRequestId
);

extern void XtGetSelectionValueIncremental(
    Widget ,
    Atom ,
    Atom ,
    XtSelectionCallbackProc ,
    XtPointer ,
    Time
);

extern void XtGetSelectionValuesIncremental(
    Widget ,
    Atom ,
    Atom* ,
    int ,
    XtSelectionCallbackProc ,
    XtPointer* ,
    Time
);

extern void XtSetSelectionParameters(
    Widget ,
    Atom ,
    Atom ,
    XtPointer ,
    unsigned long ,
    int
);

extern void XtGetSelectionParameters(
    Widget ,
    Atom ,
    XtRequestId ,
    Atom* ,
    XtPointer* ,
    unsigned long* ,
    int*
);

extern void XtCreateSelectionRequest(
    Widget ,
    Atom
);

extern void XtSendSelectionRequest(
    Widget ,
    Atom ,
    Time
);

extern void XtCancelSelectionRequest(
    Widget ,
    Atom
);

extern Atom XtReservePropertyAtom(
    Widget
);

extern void XtReleasePropertyAtom(
    Widget ,
    Atom
);

extern void XtGrabKey(
    Widget ,
    KeyCode ,
    Modifiers ,
    Boolean ,
    int ,
    int
);

extern void XtUngrabKey(
    Widget ,
    KeyCode ,
    Modifiers
);

extern int XtGrabKeyboard(
    Widget ,
    Boolean ,
    int ,
    int ,
    Time
);

extern void XtUngrabKeyboard(
    Widget ,
    Time
);

extern void XtGrabButton(
    Widget ,
    int ,
    Modifiers ,
    Boolean ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor
);

extern void XtUngrabButton(
    Widget ,
    unsigned int ,
    Modifiers
);

extern int XtGrabPointer(
    Widget ,
    Boolean ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor ,
    Time
);

extern void XtUngrabPointer(
    Widget ,
    Time
);

extern void XtGetApplicationNameAndClass(
    Display* ,
    String* ,
    String*
);

extern void XtRegisterDrawable(
    Display* ,
    Drawable ,
    Widget
);

extern void XtUnregisterDrawable(
    Display* ,
    Drawable
);

extern Widget XtHooksOfDisplay(
    Display*
);

typedef struct {
    String type;
    Widget widget;
    ArgList args;
    Cardinal num_args;
} XtCreateHookDataRec, *XtCreateHookData;

typedef struct {
    String type;
    Widget widget;
    XtPointer event_data;
    Cardinal num_event_data;
} XtChangeHookDataRec, *XtChangeHookData;

typedef struct {
    Widget old, req;
    ArgList args;
    Cardinal num_args;
} XtChangeHookSetValuesDataRec, *XtChangeHookSetValuesData;

typedef struct {
    String type;
    Widget widget;
    XtGeometryMask changeMask;
    XWindowChanges changes;
} XtConfigureHookDataRec, *XtConfigureHookData;

typedef struct {
    String type;
    Widget widget;
    XtWidgetGeometry* request;
    XtWidgetGeometry* reply;
    XtGeometryResult result;
} XtGeometryHookDataRec, *XtGeometryHookData;

typedef struct {
    String type;
    Widget widget;
} XtDestroyHookDataRec, *XtDestroyHookData;

extern void XtGetDisplays(
    XtAppContext ,
    Display*** ,
    Cardinal*
);

extern Boolean XtToolkitThreadInitialize(
    void
);

extern void XtAppSetExitFlag(
    XtAppContext
);

extern Boolean XtAppGetExitFlag(
    XtAppContext
);

extern void XtAppLock(
    XtAppContext
);

extern void XtAppUnlock(
    XtAppContext
);
# 2274 "/usr/include/X11/Intrinsic.h" 3 4
extern Boolean XtCvtStringToAcceleratorTable(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToAtom(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToBool(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToBoolean(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToCommandArgArray(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToCursor(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToDimension(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToDirectoryString(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToDisplay(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToFile(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToFloat(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToFont(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToFontSet(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToFontStruct(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToGravity(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToInitialState(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToInt(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToPixel(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);



extern Boolean XtCvtStringToRestartStyle(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToShort(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToTranslationTable(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToUnsignedChar(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtStringToVisual(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);



extern Boolean XtCvtIntToBool(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtIntToBoolean(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtIntToColor(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);



extern Boolean XtCvtIntToFloat(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtIntToFont(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtIntToPixel(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtIntToPixmap(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);



extern Boolean XtCvtIntToShort(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);

extern Boolean XtCvtIntToUnsignedChar(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);



extern Boolean XtCvtColorToPixel(
    Display* ,
    XrmValuePtr ,
    Cardinal* ,
    XrmValuePtr ,
    XrmValuePtr ,
    XtPointer*
);







# 229 "../config/config.h" 2
# 21 "../include/zmail.h" 2

# 1 "../include/zcerr.h" 1
# 9 "../include/zcerr.h"
# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4




# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/asm/errno.h" 2 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 43 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 59 "/usr/include/errno.h" 3 4

# 10 "../include/zcerr.h" 2
# 23 "../include/zmail.h" 2
# 1 "../include/zcjmp.h" 1
# 15 "../include/zcjmp.h"
# 1 "/usr/include/setjmp.h" 1 3 4
# 28 "/usr/include/setjmp.h" 3 4


# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4






typedef int __jmp_buf[6];
# 31 "/usr/include/setjmp.h" 2 3 4
# 1 "/usr/include/bits/sigset.h" 1 3 4
# 32 "/usr/include/setjmp.h" 2 3 4



struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };




typedef struct __jmp_buf_tag jmp_buf[1];



extern int setjmp (jmp_buf __env) __attribute__ ((__nothrow__));






extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) __attribute__ ((__nothrow__));




extern int _setjmp (struct __jmp_buf_tag __env[1]) __attribute__ ((__nothrow__));
# 78 "/usr/include/setjmp.h" 3 4




extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));







extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));







typedef struct __jmp_buf_tag sigjmp_buf[1];
# 110 "/usr/include/setjmp.h" 3 4
extern void siglongjmp (sigjmp_buf __env, int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



# 16 "../include/zcjmp.h" 2
# 37 "../include/zcjmp.h"
typedef struct {
    int jgood, jret;
    jmp_buf jbuf;
} jmp_target;
# 49 "../include/zcjmp.h"
extern jmp_target jmpbuf;
# 24 "../include/zmail.h" 2
# 1 "../include/zcsig.h" 1
# 16 "../include/zcsig.h"
# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 104 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 58 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4
# 76 "/usr/include/signal.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 77 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 51 "/usr/include/bits/siginfo.h" 3 4
typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 3)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
      } _sifields;
  } siginfo_t;
# 129 "/usr/include/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 273 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 3)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 80 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
# 99 "/usr/include/signal.h" 3 4


extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
# 113 "/usr/include/signal.h" 3 4

# 126 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__));




extern int raise (int __sig) __attribute__ ((__nothrow__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__));




extern void psignal (int __sig, __const char *__s);




extern void psiginfo (__const siginfo_t *__pinfo, __const char *__s);
# 168 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 196 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));
# 216 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 252 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 25 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 253 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__));






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (__const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (__const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    __const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, __const union sigval __val)
     __attribute__ ((__nothrow__));
# 310 "/usr/include/signal.h" 3 4
extern __const char *__const _sys_siglist[65];
extern __const char *__const sys_siglist[65];


struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;

    int sv_flags;

  };
# 334 "/usr/include/signal.h" 3 4
extern int sigvec (int __sig, __const struct sigvec *__vec,
     struct sigvec *__ovec) __attribute__ ((__nothrow__));



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 26 "/usr/include/bits/sigcontext.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/sigcontext.h" 2 3 4

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short padding[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};





struct _fpstate
{

  __uint32_t cw;
  __uint32_t sw;
  __uint32_t tag;
  __uint32_t ipoff;
  __uint32_t cssel;
  __uint32_t dataoff;
  __uint32_t datasel;
  struct _fpreg _st[8];
  unsigned short status;
  unsigned short magic;


  __uint32_t _fxsr_env[6];
  __uint32_t mxcsr;
  __uint32_t reserved;
  struct _fpxreg _fxsr_st[8];
  struct _xmmreg _xmm[8];
  __uint32_t padding[56];
};
# 81 "/usr/include/bits/sigcontext.h" 3 4
struct sigcontext
{
  unsigned short gs, __gsh;
  unsigned short fs, __fsh;
  unsigned short es, __esh;
  unsigned short ds, __dsh;
  unsigned long edi;
  unsigned long esi;
  unsigned long ebp;
  unsigned long esp;
  unsigned long ebx;
  unsigned long edx;
  unsigned long ecx;
  unsigned long eax;
  unsigned long trapno;
  unsigned long err;
  unsigned long eip;
  unsigned short cs, __csh;
  unsigned long eflags;
  unsigned long esp_at_signal;
  unsigned short ss, __ssh;
  struct _fpstate * fpstate;
  unsigned long oldmask;
  unsigned long cr2;
};
# 340 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__));






# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 350 "/usr/include/signal.h" 2 3 4




extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__));

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 26 "/usr/include/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 50 "/usr/include/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 357 "/usr/include/signal.h" 2 3 4
# 365 "/usr/include/signal.h" 3 4
extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));



extern int sigaltstack (__const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__));
# 395 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       __const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__));
# 396 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__));




# 17 "../include/zcsig.h" 2
# 25 "../include/zmail.h" 2

# 1 "../include/zcunix.h" 1
# 16 "../include/zcunix.h"
# 1 "../general/general.h" 1
# 21 "../general/general.h"
typedef unsigned int uint32;
# 91 "../general/general.h"
typedef void * VPTR;
typedef const void *CVPTR;
# 109 "../general/general.h"
extern int sys_nerr;




extern char *strerror (int);
# 193 "../general/general.h"
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 102 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 194 "../general/general.h" 2
# 17 "../include/zcunix.h" 2




# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4

# 175 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 176 "/usr/include/unistd.h" 2 3 4
# 199 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 200 "/usr/include/unistd.h" 2 3 4
# 228 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 240 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 260 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 277 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;
# 303 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__));
# 322 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 386 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__)) ;
# 401 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__));
# 413 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__));






extern int usleep (__useconds_t __useconds);
# 437 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__)) ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__)) ;
# 479 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__)) ;
# 492 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__));
# 510 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     __attribute__ ((__nothrow__));




extern int execv (__const char *__path, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int nice (int __inc) __attribute__ ((__nothrow__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

  };
# 569 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__));




extern __pid_t getpgrp (void) __attribute__ ((__nothrow__));
# 605 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__));
# 614 "/usr/include/unistd.h" 3 4
extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__));
# 631 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__));
# 648 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) __attribute__ ((__nothrow__));







extern __uid_t getuid (void) __attribute__ ((__nothrow__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__)) ;
# 681 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__));
# 737 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));






extern __pid_t vfork (void) __attribute__ ((__nothrow__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__));





extern int ttyslot (void) __attribute__ ((__nothrow__));




extern int link (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 851 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__));
# 852 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__));


extern int revoke (__const char *__file) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) __attribute__ ((__nothrow__));



extern char *getusershell (void) __attribute__ ((__nothrow__));
extern void endusershell (void) __attribute__ ((__nothrow__));
extern void setusershell (void) __attribute__ ((__nothrow__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__)) ;






extern int chroot (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 937 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__));




extern int getpagesize (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__));




extern int truncate (__const char *__file, __off_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 984 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__)) ;
# 1004 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__));
# 1025 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__));
# 1048 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1079 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1117 "/usr/include/unistd.h" 3 4

# 22 "../include/zcunix.h" 2





# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 416 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 458 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 488 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 76 "/usr/include/stdio.h" 2 3 4
# 89 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;




# 141 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 142 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__));








extern FILE *tmpfile (void) ;
# 186 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__)) ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 229 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 243 "/usr/include/stdio.h" 3 4






extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 272 "/usr/include/stdio.h" 3 4

# 283 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__)) ;
# 296 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  __attribute__ ((__nothrow__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 394 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") ;


extern int scanf (__const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (__const char *__restrict __s, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__));
# 445 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 476 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 504 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 532 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 543 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 576 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 638 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 710 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 746 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 765 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 788 "/usr/include/stdio.h" 3 4

# 797 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];
# 827 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
# 846 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
# 886 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));
# 916 "/usr/include/stdio.h" 3 4

# 28 "../include/zcunix.h" 2
# 45 "../include/zcunix.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4


# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 327 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));







extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__));



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__));






# 498 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 530 "/usr/include/stdlib.h" 3 4





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
# 553 "/usr/include/stdlib.h" 3 4






extern void _Exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__));






extern int clearenv (void) __attribute__ ((__nothrow__));
# 604 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 615 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 635 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 661 "/usr/include/stdlib.h" 3 4





extern int system (__const char *__command) ;

# 683 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);
# 701 "/usr/include/stdlib.h" 3 4



extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 720 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

# 756 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));








extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 861 "/usr/include/stdlib.h" 3 4
extern int posix_openpt (int __oflag) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 912 "/usr/include/stdlib.h" 3 4

# 46 "../include/zcunix.h" 2
# 63 "../include/zcunix.h"
# 1 "../include/zctype.h" 1
# 18 "../include/zctype.h"
# 1 "../include/zcsyssel.h" 1
# 19 "../include/zctype.h" 2
# 50 "../include/zctype.h"
typedef int (*int_proc)();
typedef void (*void_proc)();
# 64 "../include/zcunix.h" 2







# 1 "/usr/include/sys/stat.h" 1 3 4
# 39 "/usr/include/sys/stat.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 40 "/usr/include/sys/stat.h" 2 3 4
# 105 "/usr/include/sys/stat.h" 3 4


# 1 "/usr/include/bits/stat.h" 1 3 4
# 43 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;

    unsigned short int __pad1;


    __ino_t st_ino;




    __mode_t st_mode;
    __nlink_t st_nlink;




    __uid_t st_uid;
    __gid_t st_gid;



    __dev_t st_rdev;

    unsigned short int __pad2;


    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 88 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/bits/stat.h" 3 4
    unsigned long int __unused4;
    unsigned long int __unused5;




  };
# 108 "/usr/include/sys/stat.h" 2 3 4
# 209 "/usr/include/sys/stat.h" 3 4
extern int stat (__const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 238 "/usr/include/sys/stat.h" 3 4
extern int fstatat (int __fd, __const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 263 "/usr/include/sys/stat.h" 3 4
extern int lstat (__const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 284 "/usr/include/sys/stat.h" 3 4
extern int chmod (__const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (__const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__));





extern int fchmodat (int __fd, __const char *__file, __mode_t __mode,
       int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__));
# 321 "/usr/include/sys/stat.h" 3 4
extern int mkdir (__const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, __const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, __const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));





extern int mkfifo (__const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, __const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, __const char *__path,
        __const struct timespec __times[2],
        int __flags)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, __const struct timespec __times[2]) __attribute__ ((__nothrow__));
# 399 "/usr/include/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, __const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, __const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, __const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4)));
# 442 "/usr/include/sys/stat.h" 3 4
extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, __const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 5)));
# 534 "/usr/include/sys/stat.h" 3 4

# 72 "../include/zcunix.h" 2
# 81 "../include/zcunix.h"
# 1 "/usr/include/sys/file.h" 1 3 4
# 25 "/usr/include/sys/file.h" 3 4
# 1 "/usr/include/fcntl.h" 1 3 4
# 30 "/usr/include/fcntl.h" 3 4




# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 25 "/usr/include/bits/fcntl.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/fcntl.h" 2 3 4
# 158 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };
# 225 "/usr/include/bits/fcntl.h" 3 4

# 270 "/usr/include/bits/fcntl.h" 3 4

# 35 "/usr/include/fcntl.h" 2 3 4
# 76 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 85 "/usr/include/fcntl.h" 3 4
extern int open (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 109 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 120 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 130 "/usr/include/fcntl.h" 3 4
extern int creat (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off_t __offset, __off_t __len,
     int __advise) __attribute__ ((__nothrow__));
# 198 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off_t __offset, __off_t __len);
# 220 "/usr/include/fcntl.h" 3 4

# 26 "/usr/include/sys/file.h" 2 3 4



# 51 "/usr/include/sys/file.h" 3 4
extern int flock (int __fd, int __operation) __attribute__ ((__nothrow__));



# 82 "../include/zcunix.h" 2
# 147 "../include/zcunix.h"
int Fputs (const char *, FILE *);
# 179 "../include/zcunix.h"
extern char **environ;


extern char *getenv (const char *);






struct os_check_free_space_struct {
    const char *filename;
    unsigned long size;
    unsigned long flags;
};

typedef struct os_check_free_space_struct os_check_free_space_t;
# 27 "../include/zmail.h" 2

# 1 "../shell/zmalloc.h" 1
# 25 "../shell/zmalloc.h"
# 1 "../include/zcalloc.h" 1
# 23 "../include/zcalloc.h"
# 1 "/usr/include/malloc.h" 1 3 4
# 25 "/usr/include/malloc.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 26 "/usr/include/malloc.h" 2 3 4
# 48 "/usr/include/malloc.h" 3 4



extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;


extern void *calloc (size_t __nmemb, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__warn_unused_result__));


extern void free (void *__ptr) __attribute__ ((__nothrow__));


extern void cfree (void *__ptr) __attribute__ ((__nothrow__));


extern void *memalign (size_t __alignment, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;


extern void *valloc (size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void * pvalloc (size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void *(*__morecore) (ptrdiff_t __size);


extern void *__default_morecore (ptrdiff_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__));



struct mallinfo {
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};


extern struct mallinfo mallinfo (void) __attribute__ ((__nothrow__));
# 135 "/usr/include/malloc.h" 3 4
extern int mallopt (int __param, int __val) __attribute__ ((__nothrow__));



extern int malloc_trim (size_t __pad) __attribute__ ((__nothrow__));



extern size_t malloc_usable_size (void *__ptr) __attribute__ ((__nothrow__));


extern void malloc_stats (void) __attribute__ ((__nothrow__));


extern int malloc_info (int __options, FILE *__fp);


extern void *malloc_get_state (void) __attribute__ ((__nothrow__));



extern int malloc_set_state (void *__ptr) __attribute__ ((__nothrow__));




extern void (*__malloc_initialize_hook) (void);

extern void (*__free_hook) (void *__ptr, __const void *);

extern void *(*__malloc_hook) (size_t __size, __const void *);

extern void *(*__realloc_hook) (void *__ptr, size_t __size, __const void *);

extern void *(*__memalign_hook) (size_t __alignment, size_t __size, __const void *);


extern void (*__after_morecore_hook) (void);


extern void __malloc_check_init (void) __attribute__ ((__nothrow__));



# 24 "../include/zcalloc.h" 2
# 26 "../shell/zmalloc.h" 2


extern void
    *zmMemMalloc (unsigned),
    *zmMemCalloc (unsigned, unsigned),
    *zmMemRealloc (VPTR, unsigned);

extern void



    free_elems (char **),
    free_vec (char **),
    xfree (VPTR),
    zmMemFree(),
    zmMemFreeAfter();
# 116 "../shell/zmalloc.h"
extern void malloc_trace_reset (void);
# 29 "../include/zmail.h" 2

# 1 "../include/gui_def.h" 1
# 34 "../include/gui_def.h"
# 1 "/usr/include/X11/IntrinsicP.h" 1 3 4
# 61 "/usr/include/X11/IntrinsicP.h" 3 4
typedef struct {
    long xrm_name;
    long xrm_class;
    long xrm_type;
    Cardinal xrm_size;
    int xrm_offset;
    long xrm_default_type;
    XtPointer xrm_default_addr;
} XrmResource, *XrmResourceList;

typedef unsigned long XtVersionType;
# 80 "/usr/include/X11/IntrinsicP.h" 3 4
typedef void (*XtProc)(
    void
);

typedef void (*XtWidgetClassProc)(
    WidgetClass
);

typedef void (*XtWidgetProc)(
    Widget
);

typedef Boolean (*XtAcceptFocusProc)(
    Widget ,
    Time*
);

typedef void (*XtArgsProc)(
    Widget ,
    ArgList ,
    Cardinal*
);

typedef void (*XtInitProc)(
    Widget ,
    Widget ,
    ArgList ,
    Cardinal*
);

typedef Boolean (*XtSetValuesFunc)(
    Widget ,
    Widget ,
    Widget ,
    ArgList ,
    Cardinal*
);

typedef Boolean (*XtArgsFunc)(
    Widget ,
    ArgList ,
    Cardinal*
);

typedef void (*XtAlmostProc)(
    Widget ,
    Widget ,
    XtWidgetGeometry* ,
    XtWidgetGeometry*
);

typedef void (*XtExposeProc)(
    Widget ,
    XEvent* ,
    Region
);
# 149 "/usr/include/X11/IntrinsicP.h" 3 4
typedef void (*XtRealizeProc)(
    Widget ,
    XtValueMask* ,
    XSetWindowAttributes*
);

typedef XtGeometryResult (*XtGeometryHandler)(
    Widget ,
    XtWidgetGeometry* ,
    XtWidgetGeometry*
);

typedef void (*XtStringProc)(
    Widget ,
    String
);

typedef struct {
    String name;
    String type;
    XtArgVal value;
    int size;
} XtTypedArg, *XtTypedArgList;

typedef void (*XtAllocateProc)(
    WidgetClass ,
    Cardinal * ,
    Cardinal * ,
    ArgList ,
    Cardinal * ,
    XtTypedArgList ,
    Cardinal * ,
    Widget * ,
    XtPointer *
);

typedef void (*XtDeallocateProc)(
    Widget ,
    XtPointer
);

struct _XtStateRec;

typedef struct _XtTMRec {
    XtTranslations translations;
    XtBoundActions proc_table;
    struct _XtStateRec *current_state;
    unsigned long lastEventTime;
} XtTMRec, *XtTM;

# 1 "/usr/include/X11/CoreP.h" 1 3 4
# 58 "/usr/include/X11/CoreP.h" 3 4


extern int _XtInheritTranslations;
# 77 "/usr/include/X11/CoreP.h" 3 4
typedef struct _CorePart {
    Widget self;
    WidgetClass widget_class;
    Widget parent;
    XrmName xrm_name;
    Boolean being_destroyed;
    XtCallbackList destroy_callbacks;
    XtPointer constraints;
    Position x, y;
    Dimension width, height;
    Dimension border_width;
    Boolean managed;
    Boolean sensitive;
    Boolean ancestor_sensitive;
    XtEventTable event_table;
    XtTMRec tm;
    XtTranslations accelerators;
    Pixel border_pixel;
    Pixmap border_pixmap;
    WidgetList popup_list;
    Cardinal num_popups;
    String name;
    Screen *screen;
    Colormap colormap;
    Window window;
    Cardinal depth;
    Pixel background_pixel;
    Pixmap background_pixmap;
    Boolean visible;
    Boolean mapped_when_managed;
} CorePart;

typedef struct _WidgetRec {
    CorePart core;
 } WidgetRec, CoreRec;
# 130 "/usr/include/X11/CoreP.h" 3 4
typedef struct _CoreClassPart {
    WidgetClass superclass;
    String class_name;
    Cardinal widget_size;
    XtProc class_initialize;
    XtWidgetClassProc class_part_initialize;
    XtEnum class_inited;
    XtInitProc initialize;
    XtArgsProc initialize_hook;
    XtRealizeProc realize;
    XtActionList actions;
    Cardinal num_actions;
    XtResourceList resources;
    Cardinal num_resources;
    XrmClass xrm_class;
    Boolean compress_motion;
    XtEnum compress_exposure;
    Boolean compress_enterleave;
    Boolean visible_interest;
    XtWidgetProc destroy;
    XtWidgetProc resize;
    XtExposeProc expose;
    XtSetValuesFunc set_values;
    XtArgsFunc set_values_hook;
    XtAlmostProc set_values_almost;
    XtArgsProc get_values_hook;
    XtAcceptFocusProc accept_focus;
    XtVersionType version;
    XtPointer callback_private;
    String tm_table;
    XtGeometryHandler query_geometry;
    XtStringProc display_accelerator;
    XtPointer extension;
 } CoreClassPart;

typedef struct _WidgetClassRec {
    CoreClassPart core_class;
} WidgetClassRec, CoreClassRec;

extern WidgetClassRec widgetClassRec;



# 200 "/usr/include/X11/IntrinsicP.h" 2 3 4
# 1 "/usr/include/X11/CompositeP.h" 1 3 4
# 55 "/usr/include/X11/CompositeP.h" 3 4








typedef struct _CompositePart {
    WidgetList children;
    Cardinal num_children;
    Cardinal num_slots;
    XtOrderProc insert_position;
} CompositePart,*CompositePtr;

typedef struct _CompositeRec {
    CorePart core;
    CompositePart composite;
} CompositeRec;







typedef struct _CompositeClassPart {
    XtGeometryHandler geometry_manager;
    XtWidgetProc change_managed;
    XtWidgetProc insert_child;
    XtWidgetProc delete_child;
    XtPointer extension;
} CompositeClassPart,*CompositePartPtr;

typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long version;
    Cardinal record_size;
    Boolean accepts_objects;
    Boolean allows_change_managed_set;
} CompositeClassExtensionRec, *CompositeClassExtension;


typedef struct _CompositeClassRec {
     CoreClassPart core_class;
     CompositeClassPart composite_class;
} CompositeClassRec;

extern CompositeClassRec compositeClassRec;


# 201 "/usr/include/X11/IntrinsicP.h" 2 3 4
# 1 "/usr/include/X11/ConstrainP.h" 1 3 4
# 55 "/usr/include/X11/ConstrainP.h" 3 4


typedef struct _ConstraintPart {
    XtPointer mumble;
} ConstraintPart;

typedef struct _ConstraintRec {
    CorePart core;
    CompositePart composite;
    ConstraintPart constraint;
} ConstraintRec, *ConstraintWidget;

typedef struct _ConstraintClassPart {
    XtResourceList resources;
    Cardinal num_resources;
    Cardinal constraint_size;
    XtInitProc initialize;
    XtWidgetProc destroy;
    XtSetValuesFunc set_values;
    XtPointer extension;
} ConstraintClassPart;

typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long version;
    Cardinal record_size;
    XtArgsProc get_values_hook;
} ConstraintClassExtensionRec, *ConstraintClassExtension;

typedef struct _ConstraintClassRec {
    CoreClassPart core_class;
    CompositeClassPart composite_class;
    ConstraintClassPart constraint_class;
} ConstraintClassRec;

extern ConstraintClassRec constraintClassRec;


# 202 "/usr/include/X11/IntrinsicP.h" 2 3 4
# 1 "/usr/include/X11/ObjectP.h" 1 3 4
# 55 "/usr/include/X11/ObjectP.h" 3 4








typedef struct _ObjectPart {
    Widget self;
    WidgetClass widget_class;
    Widget parent;
    XrmName xrm_name;
    Boolean being_destroyed;
    XtCallbackList destroy_callbacks;
    XtPointer constraints;
} ObjectPart;

typedef struct _ObjectRec {
    ObjectPart object;
} ObjectRec;
# 86 "/usr/include/X11/ObjectP.h" 3 4
typedef struct _ObjectClassPart {

    WidgetClass superclass;
    String class_name;
    Cardinal widget_size;
    XtProc class_initialize;
    XtWidgetClassProc class_part_initialize;
    XtEnum class_inited;
    XtInitProc initialize;
    XtArgsProc initialize_hook;
    XtProc obj1;
    XtPointer obj2;
    Cardinal obj3;
    XtResourceList resources;
    Cardinal num_resources;
    XrmClass xrm_class;
    Boolean obj4;
    XtEnum obj5;
    Boolean obj6;
    Boolean obj7;
    XtWidgetProc destroy;
    XtProc obj8;
    XtProc obj9;
    XtSetValuesFunc set_values;
    XtArgsFunc set_values_hook;
    XtProc obj10;
    XtArgsProc get_values_hook;
    XtProc obj11;
    XtVersionType version;
    XtPointer callback_private;
    String obj12;
    XtProc obj13;
    XtProc obj14;
    XtPointer extension;
}ObjectClassPart;

typedef struct {
    XtPointer next_extension;
    XrmQuark record_type;
    long version;
    Cardinal record_size;
    XtAllocateProc allocate;
    XtDeallocateProc deallocate;
} ObjectClassExtensionRec, *ObjectClassExtension;

typedef struct _ObjectClassRec {
    ObjectClassPart object_class;
} ObjectClassRec;

extern ObjectClassRec objectClassRec;


# 203 "/usr/include/X11/IntrinsicP.h" 2 3 4
# 1 "/usr/include/X11/RectObjP.h" 1 3 4
# 56 "/usr/include/X11/RectObjP.h" 3 4








typedef struct _RectObjPart {
    Position x, y;
    Dimension width, height;
    Dimension border_width;
    Boolean managed;
    Boolean sensitive;
    Boolean ancestor_sensitive;
}RectObjPart;

typedef struct _RectObjRec {
    ObjectPart object;
    RectObjPart rectangle;
} RectObjRec;
# 89 "/usr/include/X11/RectObjP.h" 3 4
typedef struct _RectObjClassPart {

    WidgetClass superclass;
    String class_name;
    Cardinal widget_size;
    XtProc class_initialize;
    XtWidgetClassProc class_part_initialize;
    XtEnum class_inited;
    XtInitProc initialize;
    XtArgsProc initialize_hook;
    XtProc rect1;
    XtPointer rect2;
    Cardinal rect3;
    XtResourceList resources;
    Cardinal num_resources;
    XrmClass xrm_class;
    Boolean rect4;
    XtEnum rect5;
    Boolean rect6;
    Boolean rect7;
    XtWidgetProc destroy;
    XtWidgetProc resize;
    XtExposeProc expose;
    XtSetValuesFunc set_values;
    XtArgsFunc set_values_hook;
    XtAlmostProc set_values_almost;
    XtArgsProc get_values_hook;
    XtProc rect9;
    XtVersionType version;
    XtPointer callback_private;
    String rect10;
    XtGeometryHandler query_geometry;
    XtProc rect11;
    XtPointer extension;
} RectObjClassPart;

typedef struct _RectObjClassRec {
    RectObjClassPart rect_class;
} RectObjClassRec;

extern RectObjClassRec rectObjClassRec;


# 204 "/usr/include/X11/IntrinsicP.h" 2 3 4
# 215 "/usr/include/X11/IntrinsicP.h" 3 4
extern Boolean XtIsRectObj(Widget);




extern Boolean XtIsWidget(Widget);




extern Boolean XtIsComposite(Widget);




extern Boolean XtIsConstraint(Widget);




extern Boolean XtIsShell(Widget);




extern Boolean XtIsWMShell(Widget);




extern Boolean XtIsTopLevelShell(Widget);
# 266 "/usr/include/X11/IntrinsicP.h" 3 4


extern Widget _XtWindowedAncestor(
    Widget
);

extern void _XtInherit(
    void
);

extern void _XtHandleFocus(
    Widget ,
    XtPointer ,
    XEvent * ,
    Boolean * );

extern void XtCreateWindow(
    Widget ,
    unsigned int ,
    Visual* ,
    XtValueMask ,
    XSetWindowAttributes*
);

extern void XtResizeWidget(
    Widget ,
    Dimension ,
    Dimension ,
    Dimension
);

extern void XtMoveWidget(
    Widget ,
    Position ,
    Position
);

extern void XtConfigureWidget(
    Widget ,
    Position ,
    Position ,
    Dimension ,
    Dimension ,
    Dimension
);

extern void XtResizeWindow(
    Widget
);

extern void XtProcessLock(
    void
);

extern void XtProcessUnlock(
    void
);


# 35 "../include/gui_def.h" 2


# 1 "/usr/include/X11/Xatom.h" 1 3 4
# 38 "../include/gui_def.h" 2
# 48 "../include/gui_def.h"
# 1 "/usr/include/Xm/Xm.h" 1 3 4
# 57 "/usr/include/Xm/Xm.h" 3 4
# 1 "/usr/include/X11/Shell.h" 1 3 4
# 54 "/usr/include/X11/Shell.h" 3 4
# 1 "/usr/include/X11/SM/SMlib.h" 1 3 4
# 36 "/usr/include/X11/SM/SMlib.h" 3 4
# 1 "/usr/include/X11/SM/SM.h" 1 3 4
# 37 "/usr/include/X11/SM/SMlib.h" 2 3 4
# 1 "/usr/include/X11/ICE/ICElib.h" 1 3 4
# 34 "/usr/include/X11/ICE/ICElib.h" 3 4
# 1 "/usr/include/X11/ICE/ICE.h" 1 3 4
# 35 "/usr/include/X11/ICE/ICElib.h" 2 3 4







typedef void *IcePointer;

typedef enum {
    IcePoAuthHaveReply,
    IcePoAuthRejected,
    IcePoAuthFailed,
    IcePoAuthDoneCleanup
} IcePoAuthStatus;

typedef enum {
    IcePaAuthContinue,
    IcePaAuthAccepted,
    IcePaAuthRejected,
    IcePaAuthFailed
} IcePaAuthStatus;

typedef enum {
    IceConnectPending,
    IceConnectAccepted,
    IceConnectRejected,
    IceConnectIOError
} IceConnectStatus;

typedef enum {
    IceProtocolSetupSuccess,
    IceProtocolSetupFailure,
    IceProtocolSetupIOError,
    IceProtocolAlreadyActive
} IceProtocolSetupStatus;

typedef enum {
    IceAcceptSuccess,
    IceAcceptFailure,
    IceAcceptBadMalloc
} IceAcceptStatus;

typedef enum {
    IceClosedNow,
    IceClosedASAP,
    IceConnectionInUse,
    IceStartedShutdownNegotiation
} IceCloseStatus;

typedef enum {
    IceProcessMessagesSuccess,
    IceProcessMessagesIOError,
    IceProcessMessagesConnectionClosed
} IceProcessMessagesStatus;

typedef struct {
    unsigned long sequence_of_request;
    int major_opcode_of_request;
    int minor_opcode_of_request;
    IcePointer reply;
} IceReplyWaitInfo;

typedef struct _IceConn *IceConn;
typedef struct _IceListenObj *IceListenObj;

typedef void (*IceWatchProc) (
    IceConn ,
    IcePointer ,
    int ,
    IcePointer *
);

typedef void (*IcePoProcessMsgProc) (
    IceConn ,
    IcePointer ,
    int ,
    unsigned long ,
    int ,
    IceReplyWaitInfo * ,
    int *
);

typedef void (*IcePaProcessMsgProc) (
    IceConn ,
    IcePointer ,
    int ,
    unsigned long ,
    int
);

typedef struct {
    int major_version;
    int minor_version;
    IcePoProcessMsgProc process_msg_proc;
} IcePoVersionRec;

typedef struct {
    int major_version;
    int minor_version;
    IcePaProcessMsgProc process_msg_proc;
} IcePaVersionRec;

typedef IcePoAuthStatus (*IcePoAuthProc) (
    IceConn ,
    IcePointer * ,
    int ,
    int ,
    int ,
    IcePointer ,
    int * ,
    IcePointer * ,
    char **
);

typedef IcePaAuthStatus (*IcePaAuthProc) (
    IceConn ,
    IcePointer * ,
    int ,
    int ,
    IcePointer ,
    int * ,
    IcePointer * ,
    char **
);

typedef int (*IceHostBasedAuthProc) (
    char *
);

typedef int (*IceProtocolSetupProc) (
    IceConn ,
    int ,
    int ,
    char * ,
    char * ,
    IcePointer * ,
    char **
);

typedef void (*IceProtocolActivateProc) (
    IceConn ,
    IcePointer
);

typedef void (*IceIOErrorProc) (
    IceConn
);

typedef void (*IcePingReplyProc) (
    IceConn ,
    IcePointer
);

typedef void (*IceErrorHandler) (
    IceConn ,
    int ,
    int ,
    unsigned long ,
    int ,
    int ,
    IcePointer
);

typedef void (*IceIOErrorHandler) (
    IceConn
);








extern int IceRegisterForProtocolSetup (
    char * ,
    char * ,
    char * ,
    int ,
    IcePoVersionRec * ,
    int ,
    const char ** ,
    IcePoAuthProc * ,
    IceIOErrorProc
);

extern int IceRegisterForProtocolReply (
    char * ,
    char * ,
    char * ,
    int ,
    IcePaVersionRec * ,
    int ,
    const char ** ,
    IcePaAuthProc * ,
    IceHostBasedAuthProc ,
    IceProtocolSetupProc ,
    IceProtocolActivateProc ,
    IceIOErrorProc
);

extern IceConn IceOpenConnection (
    char * ,
    IcePointer ,
    int ,
    int ,
    int ,
    char *
);

extern IcePointer IceGetConnectionContext (
    IceConn
);

extern int IceListenForConnections (
    int * ,
    IceListenObj ** ,
    int ,
    char *
);

extern int IceListenForWellKnownConnections (
    char * ,
    int * ,
    IceListenObj ** ,
    int ,
    char *
);

extern int IceGetListenConnectionNumber (
    IceListenObj
);

extern char *IceGetListenConnectionString (
    IceListenObj
);

extern char *IceComposeNetworkIdList (
    int ,
    IceListenObj *
);

extern void IceFreeListenObjs (
    int ,
    IceListenObj *
);

extern void IceSetHostBasedAuthProc (
    IceListenObj ,
    IceHostBasedAuthProc
);

extern IceConn IceAcceptConnection (
    IceListenObj ,
    IceAcceptStatus *
);

extern void IceSetShutdownNegotiation (
    IceConn ,
    int
);

extern int IceCheckShutdownNegotiation (
    IceConn
);

extern IceCloseStatus IceCloseConnection (
    IceConn
);

extern int IceAddConnectionWatch (
    IceWatchProc ,
    IcePointer
);

extern void IceRemoveConnectionWatch (
    IceWatchProc ,
    IcePointer
);

extern IceProtocolSetupStatus IceProtocolSetup (
    IceConn ,
    int ,
    IcePointer ,
    int ,
    int * ,
    int * ,
    char ** ,
    char ** ,
    int ,
    char *
);

extern int IceProtocolShutdown (
    IceConn ,
    int
);

extern IceProcessMessagesStatus IceProcessMessages (
    IceConn ,
    IceReplyWaitInfo * ,
    int *
);

extern int IcePing (
   IceConn ,
   IcePingReplyProc ,
   IcePointer
);

extern char *IceAllocScratch (
   IceConn ,
   unsigned long
);

extern int IceFlush (
   IceConn
);

extern int IceGetOutBufSize (
   IceConn
);

extern int IceGetInBufSize (
   IceConn
);

extern IceConnectStatus IceConnectionStatus (
    IceConn
);

extern char *IceVendor (
    IceConn
);

extern char *IceRelease (
    IceConn
);

extern int IceProtocolVersion (
    IceConn
);

extern int IceProtocolRevision (
    IceConn
);

extern int IceConnectionNumber (
    IceConn
);

extern char *IceConnectionString (
    IceConn
);

extern unsigned long IceLastSentSequenceNumber (
    IceConn
);

extern unsigned long IceLastReceivedSequenceNumber (
    IceConn
);

extern int IceSwapping (
    IceConn
);

extern IceErrorHandler IceSetErrorHandler (
    IceErrorHandler
);

extern IceIOErrorHandler IceSetIOErrorHandler (
    IceIOErrorHandler
);

extern char *IceGetPeerName (
    IceConn
);





extern int IceInitThreads (
    void
);

extern void IceAppLockConn (
    IceConn
);

extern void IceAppUnlockConn (
    IceConn
);


# 38 "/usr/include/X11/SM/SMlib.h" 2 3 4






typedef IcePointer SmPointer;






typedef struct _SmcConn *SmcConn;
typedef struct _SmsConn *SmsConn;






typedef struct {
    int length;
    SmPointer value;
} SmPropValue;

typedef struct {
    char *name;
    char *type;
    int num_vals;
    SmPropValue *vals;
} SmProp;







typedef enum {
    SmcClosedNow,
    SmcClosedASAP,
    SmcConnectionInUse
} SmcCloseStatus;







typedef void (*SmcSaveYourselfProc) (
    SmcConn ,
    SmPointer ,
    int ,
    int ,
    int ,
    int
);

typedef void (*SmcSaveYourselfPhase2Proc) (
    SmcConn ,
    SmPointer
);

typedef void (*SmcInteractProc) (
    SmcConn ,
    SmPointer
);

typedef void (*SmcDieProc) (
    SmcConn ,
    SmPointer
);

typedef void (*SmcShutdownCancelledProc) (
    SmcConn ,
    SmPointer
);

typedef void (*SmcSaveCompleteProc) (
    SmcConn ,
    SmPointer
);

typedef void (*SmcPropReplyProc) (
    SmcConn ,
    SmPointer ,
    int ,
    SmProp **
);






typedef struct {

    struct {
 SmcSaveYourselfProc callback;
 SmPointer client_data;
    } save_yourself;

    struct {
 SmcDieProc callback;
 SmPointer client_data;
    } die;

    struct {
 SmcSaveCompleteProc callback;
 SmPointer client_data;
    } save_complete;

    struct {
 SmcShutdownCancelledProc callback;
 SmPointer client_data;
    } shutdown_cancelled;

} SmcCallbacks;
# 170 "/usr/include/X11/SM/SMlib.h" 3 4
typedef int (*SmsRegisterClientProc) (
    SmsConn ,
    SmPointer ,
    char *
);

typedef void (*SmsInteractRequestProc) (
    SmsConn ,
    SmPointer ,
    int
);

typedef void (*SmsInteractDoneProc) (
    SmsConn ,
    SmPointer ,
    int
);

typedef void (*SmsSaveYourselfRequestProc) (
    SmsConn ,
    SmPointer ,
    int ,
    int ,
    int ,
    int ,
    int
);

typedef void (*SmsSaveYourselfPhase2RequestProc) (
    SmsConn ,
    SmPointer
);

typedef void (*SmsSaveYourselfDoneProc) (
    SmsConn ,
    SmPointer ,
    int
);

typedef void (*SmsCloseConnectionProc) (
    SmsConn ,
    SmPointer ,
    int ,
    char **
);

typedef void (*SmsSetPropertiesProc) (
    SmsConn ,
    SmPointer ,
    int ,
    SmProp **
);

typedef void (*SmsDeletePropertiesProc) (
    SmsConn ,
    SmPointer ,
    int ,
    char **
);

typedef void (*SmsGetPropertiesProc) (
    SmsConn ,
    SmPointer
);






typedef struct {

    struct {
 SmsRegisterClientProc callback;
 SmPointer manager_data;
    } register_client;

    struct {
 SmsInteractRequestProc callback;
 SmPointer manager_data;
    } interact_request;

    struct {
 SmsInteractDoneProc callback;
 SmPointer manager_data;
    } interact_done;

    struct {
 SmsSaveYourselfRequestProc callback;
 SmPointer manager_data;
    } save_yourself_request;

    struct {
 SmsSaveYourselfPhase2RequestProc callback;
 SmPointer manager_data;
    } save_yourself_phase2_request;

    struct {
 SmsSaveYourselfDoneProc callback;
 SmPointer manager_data;
    } save_yourself_done;

    struct {
 SmsCloseConnectionProc callback;
 SmPointer manager_data;
    } close_connection;

    struct {
 SmsSetPropertiesProc callback;
 SmPointer manager_data;
    } set_properties;

    struct {
 SmsDeletePropertiesProc callback;
 SmPointer manager_data;
    } delete_properties;

    struct {
 SmsGetPropertiesProc callback;
 SmPointer manager_data;
    } get_properties;

} SmsCallbacks;
# 308 "/usr/include/X11/SM/SMlib.h" 3 4
typedef int (*SmsNewClientProc) (
    SmsConn ,
    SmPointer ,
    unsigned long * ,
    SmsCallbacks * ,
    char **
);







typedef void (*SmcErrorHandler) (
    SmcConn ,
    int ,
    int ,
    unsigned long ,
    int ,
    int ,
    SmPointer
);

typedef void (*SmsErrorHandler) (
    SmsConn ,
    int ,
    int ,
    unsigned long ,
    int ,
    int ,
    SmPointer
);









extern SmcConn SmcOpenConnection (
    char * ,
    SmPointer ,
    int ,
    int ,
    unsigned long ,
    SmcCallbacks * ,
    char * ,
    char ** ,
    int ,
    char *
);

extern SmcCloseStatus SmcCloseConnection (
    SmcConn ,
    int ,
    char **
);

extern void SmcModifyCallbacks (
    SmcConn ,
    unsigned long ,
    SmcCallbacks *
);

extern void SmcSetProperties (
    SmcConn ,
    int ,
    SmProp **
);

extern void SmcDeleteProperties (
    SmcConn ,
    int ,
    char **
);

extern int SmcGetProperties (
    SmcConn ,
    SmcPropReplyProc ,
    SmPointer
);

extern int SmcInteractRequest (
    SmcConn ,
    int ,
    SmcInteractProc ,
    SmPointer
);

extern void SmcInteractDone (
    SmcConn ,
    int
);

extern void SmcRequestSaveYourself (
    SmcConn ,
    int ,
    int ,
    int ,
    int ,
    int
);

extern int SmcRequestSaveYourselfPhase2 (
    SmcConn ,
    SmcSaveYourselfPhase2Proc ,
    SmPointer
);

extern void SmcSaveYourselfDone (
    SmcConn ,
    int
);

extern int SmcProtocolVersion (
    SmcConn
);

extern int SmcProtocolRevision (
    SmcConn
);

extern char *SmcVendor (
    SmcConn
);

extern char *SmcRelease (
    SmcConn
);

extern char *SmcClientID (
    SmcConn
);

extern IceConn SmcGetIceConnection (
    SmcConn
);

extern int SmsInitialize (
    char * ,
    char * ,
    SmsNewClientProc ,
    SmPointer ,
    IceHostBasedAuthProc ,
    int ,
    char *
);

extern char *SmsClientHostName (
    SmsConn
);

extern char *SmsGenerateClientID (
    SmsConn
);

extern int SmsRegisterClientReply (
    SmsConn ,
    char *
);

extern void SmsSaveYourself (
    SmsConn ,
    int ,
    int ,
    int ,
    int
);

extern void SmsSaveYourselfPhase2 (
    SmsConn
);

extern void SmsInteract (
    SmsConn
);

extern void SmsDie (
    SmsConn
);

extern void SmsSaveComplete (
    SmsConn
);

extern void SmsShutdownCancelled (
    SmsConn
);

extern void SmsReturnProperties (
    SmsConn ,
    int ,
    SmProp **
);

extern void SmsCleanUp (
    SmsConn
);

extern int SmsProtocolVersion (
    SmsConn
);

extern int SmsProtocolRevision (
    SmsConn
);

extern char *SmsClientID (
    SmsConn
);

extern IceConn SmsGetIceConnection (
    SmsConn
);

extern SmcErrorHandler SmcSetErrorHandler (
    SmcErrorHandler
);

extern SmsErrorHandler SmsSetErrorHandler (
    SmsErrorHandler
);

extern void SmFreeProperty (
    SmProp *
);

extern void SmFreeReasons (
    int ,
    char **
);


# 55 "/usr/include/X11/Shell.h" 2 3 4
# 194 "/usr/include/X11/Shell.h" 3 4
extern const char XtShellStrings[];
# 548 "/usr/include/X11/Shell.h" 3 4
typedef struct _ShellClassRec *ShellWidgetClass;
typedef struct _OverrideShellClassRec *OverrideShellWidgetClass;
typedef struct _WMShellClassRec *WMShellWidgetClass;
typedef struct _TransientShellClassRec *TransientShellWidgetClass;
typedef struct _TopLevelShellClassRec *TopLevelShellWidgetClass;
typedef struct _ApplicationShellClassRec *ApplicationShellWidgetClass;
typedef struct _SessionShellClassRec *SessionShellWidgetClass;


extern WidgetClass shellWidgetClass;
extern WidgetClass overrideShellWidgetClass;
extern WidgetClass wmShellWidgetClass;
extern WidgetClass transientShellWidgetClass;
extern WidgetClass topLevelShellWidgetClass;
extern WidgetClass applicationShellWidgetClass;
extern WidgetClass sessionShellWidgetClass;
# 58 "/usr/include/Xm/Xm.h" 2 3 4

# 1 "/usr/include/X11/extensions/Print.h" 1 3 4
# 68 "/usr/include/X11/extensions/Print.h" 3 4
# 1 "/usr/include/X11/Xauth.h" 1 3 4
# 34 "/usr/include/X11/Xauth.h" 3 4
typedef struct xauth {
    unsigned short family;
    unsigned short address_length;
    char *address;
    unsigned short number_length;
    char *number;
    unsigned short name_length;
    char *name;
    unsigned short data_length;
    char *data;
} Xauth;




# 1 "/usr/include/X11/Xfuncs.h" 1 3 4
# 50 "/usr/include/X11/Xauth.h" 2 3 4
# 60 "/usr/include/X11/Xauth.h" 3 4


char *XauFileName(void);

Xauth *XauReadAuth(
FILE*
);

int XauLockAuth(
const char* ,
int ,
int ,
long
);

int XauUnlockAuth(
const char*
);

int XauWriteAuth(
FILE* ,
Xauth*
);

Xauth *XauGetAuthByAddr(




unsigned short ,
unsigned short ,

const char* ,



unsigned short ,

const char* ,



unsigned short ,

const char*
);

Xauth *XauGetBestAuthByAddr(




unsigned short ,
unsigned short ,

const char* ,



unsigned short ,

const char* ,
int ,
char** ,
const int*
);

void XauDisposeAuth(
Xauth*
);
# 148 "/usr/include/X11/Xauth.h" 3 4

# 69 "/usr/include/X11/extensions/Print.h" 2 3 4





# 152 "/usr/include/X11/extensions/Print.h" 3 4
typedef unsigned char XPAttributes;
# 187 "/usr/include/X11/extensions/Print.h" 3 4
typedef unsigned char XPAttrReplacement;







typedef unsigned char XPGetDocStatus;
# 204 "/usr/include/X11/extensions/Print.h" 3 4
typedef unsigned char XPSaveData;







typedef unsigned char XPDocumentType;
# 238 "/usr/include/X11/extensions/Print.h" 3 4
typedef XID XPContext;




typedef struct {
    char *name;
    char *desc;
} XPPrinterRec, *XPPrinterList;




typedef void (*XPSaveProc)( Display *display,
                            XPContext context,
                            unsigned char *data,
                            unsigned int data_len,
                            XPointer client_data);

typedef void (*XPFinishProc)( Display *display,
                              XPContext context,
                              XPGetDocStatus status,
                              XPointer client_data);




typedef char * (*XPHinterProc)(void);
# 289 "/usr/include/X11/extensions/Print.h" 3 4
typedef struct {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    XPContext context;
    int cancel;
    int detail;


} XPPrintEvent;

typedef struct {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    XPContext context;
    int detail;


} XPAttributeEvent;

typedef struct {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    XPContext context;
    unsigned long available;
} XPDataReadyEvent;







extern XPContext XpCreateContext (
    Display *display,
    char *printer_name
);

extern void XpSetContext (
    Display *display,
    XPContext print_context
);

extern XPContext XpGetContext (
    Display *display
);

extern void XpDestroyContext (
    Display *display,
    XPContext print_context
);

extern Screen *XpGetScreenOfContext (
    Display *display,
    XPContext print_context
);

extern int XpGetPageDimensions (
    Display *display,
    XPContext print_context,
    unsigned short *width,
    unsigned short *height,
    XRectangle *reproducible_area
);

extern void XpStartJob (
    Display *display,
    XPSaveData save_data
);

extern void XpEndJob (
    Display *display
);

extern void XpCancelJob (
    Display *display,
    int discard
);

extern void XpStartDoc (
    Display *display,
    XPDocumentType type
);

extern void XpEndDoc (
    Display *display
);

extern void XpCancelDoc (
    Display *display,
    int discard
);

extern void XpPutDocumentData (
    Display *display,
    Drawable drawable,
    unsigned char *data,
    int data_len,
    char *doc_fmt,
    char *options
);

extern int XpGetDocumentData (
    Display *display,
    XPContext context,
    XPSaveProc save_proc,
    XPFinishProc finish_proc,
    XPointer client_data
);

extern void XpStartPage (
    Display *display,
    Window window
);

extern void XpEndPage (
    Display *display
);

extern void XpCancelPage (
    Display *display,
    int discard
);

extern void XpSelectInput (
    Display *display,
    XPContext print_context,
    unsigned long event_mask
);

extern unsigned long XpInputSelected (
    Display *display,
    XPContext print_context,
    unsigned long *all_events_mask
);

extern int XpSetImageResolution (
    Display *display,
    XPContext print_context,
    int image_res,
    int *prev_res
);

extern int XpGetImageResolution (
    Display *display,
    XPContext print_context
);

extern char *XpGetAttributes (
    Display *display,
    XPContext print_context,
    XPAttributes type
);

extern void XpSetAttributes (
    Display *display,
    XPContext print_context,
    XPAttributes type,
    char *pool,
    XPAttrReplacement replacement_rule
);

extern char *XpGetOneAttribute (
    Display *display,
    XPContext print_context,
    XPAttributes type,
    char *attribute_name
);

extern XPPrinterList XpGetPrinterList (
    Display *display,
    char *printer_name,
    int *list_count
);

extern void XpFreePrinterList (
    XPPrinterList printer_list
);

extern void XpRehashPrinterList (
    Display *display
);

extern int XpQueryVersion (
    Display *display,
    short *major_version,
    short *minor_version
);

extern int XpQueryExtension (
    Display *display,
    int *event_base_return,
    int *error_base_return
);

extern Screen **XpQueryScreens (
    Display *display,
    int *list_count
);

extern int XpGetPdmStartParams (
    Display *print_display,
    Window print_window,
    XPContext print_context,
    Display *video_display,
    Window video_window,
    Display **selection_display,
    Atom *selection,
    Atom *type,
    int *format,
    unsigned char **data,
    int *nelements
);

extern int XpGetAuthParams (
    Display *print_display,
    Display *video_display,
    Display **selection_display,
    Atom *selection,
    Atom *target
);

extern int XpSendAuth (
    Display *display,
    Window window
);

extern int XpSendOneTicket (
    Display *display,
    Window window,
    Xauth *ticket,
    int more
);

extern void XpSetLocaleHinter (
    XPHinterProc hinter_proc,
    char *hinter_desc
);

extern char *XpGetLocaleHinter (
    XPHinterProc *hinter_proc
);

extern char *XpGetLocaleNetString(void);

extern char *XpNotifyPdm (
    Display *print_display,
    Window print_window,
    XPContext print_context,
    Display *video_display,
    Window video_window,
    int auth_flag
);




# 60 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/XmStrDefs.h" 1 3 4
# 1373 "/usr/include/Xm/XmStrDefs.h" 3 4
extern char _XmStrings[];
# 5439 "/usr/include/Xm/XmStrDefs.h" 3 4
# 1 "/usr/include/X11/StringDefs.h" 1 3 4
# 321 "/usr/include/X11/StringDefs.h" 3 4
extern const char XtStrings[];
# 5440 "/usr/include/Xm/XmStrDefs.h" 2 3 4
# 61 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/XmStrDefs22.h" 1 3 4
# 311 "/usr/include/Xm/XmStrDefs22.h" 3 4
extern char _XmStrings22[];
# 62 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/VirtKeys.h" 1 3 4
# 45 "/usr/include/Xm/VirtKeys.h" 3 4
# 1 "/usr/include/Xm/Xm.h" 1 3 4
# 46 "/usr/include/Xm/VirtKeys.h" 2 3 4
# 107 "/usr/include/Xm/VirtKeys.h" 3 4
extern void XmTranslateKey(
                        Display *dpy,



                        KeyCode keycode,

                        Modifiers modifiers,
                        Modifiers *modifiers_return,
                        KeySym *keysym_return) ;
# 63 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/Transfer.h" 1 3 4
# 44 "/usr/include/Xm/Transfer.h" 3 4
# 1 "/usr/include/Xm/DragC.h" 1 3 4
# 48 "/usr/include/Xm/DragC.h" 3 4
# 1 "/usr/include/Xm/Display.h" 1 3 4
# 48 "/usr/include/Xm/Display.h" 3 4
# 1 "/usr/include/Xm/DragC.h" 1 3 4
# 49 "/usr/include/Xm/Display.h" 2 3 4
# 1 "/usr/include/Xm/DropSMgr.h" 1 3 4
# 74 "/usr/include/Xm/DropSMgr.h" 3 4
enum { XmDRAG_UNDER_NONE, XmDRAG_UNDER_PIXMAP,
    XmDRAG_UNDER_SHADOW_IN, XmDRAG_UNDER_SHADOW_OUT,
    XmDRAG_UNDER_HIGHLIGHT };

enum { XmDROP_SITE_SIMPLE, XmDROP_SITE_COMPOSITE,
    XmDROP_SITE_SIMPLE_CLIP_ONLY = 128,
    XmDROP_SITE_COMPOSITE_CLIP_ONLY };

enum { XmABOVE, XmBELOW };

enum { XmDROP_SITE_ACTIVE, XmDROP_SITE_INACTIVE, XmDROP_SITE_IGNORE };

typedef struct _XmDragProcCallbackStruct {
    int reason;
    XEvent * event;
    Time timeStamp;
 Widget dragContext;
    Position x, y;
    unsigned char dropSiteStatus;
    unsigned char operation;
    unsigned char operations;
 Boolean animate;
} XmDragProcCallbackStruct, * XmDragProcCallback;

typedef struct _XmDropProcCallbackStruct {
    int reason;
    XEvent * event;
    Time timeStamp;
 Widget dragContext;
    Position x, y;
    unsigned char dropSiteStatus;
    unsigned char operation;
    unsigned char operations;
 unsigned char dropAction;
} XmDropProcCallbackStruct, * XmDropProcCallback;


typedef struct _XmDropSiteVisualsRec {
 Pixel background;
 Pixel foreground;
 Pixel topShadowColor;
 Pixmap topShadowPixmap;
 Pixel bottomShadowColor;
 Pixmap bottomShadowPixmap;
 Dimension shadowThickness;
 Pixel highlightColor;
 Pixmap highlightPixmap;
 Dimension highlightThickness;
 Dimension borderWidth;
} XmDropSiteVisualsRec, * XmDropSiteVisuals;




extern WidgetClass xmDropSiteManagerObjectClass;

typedef struct _XmDropSiteManagerClassRec *XmDropSiteManagerObjectClass;
typedef struct _XmDropSiteManagerRec *XmDropSiteManagerObject;







extern void XmDropSiteRegister(
                        Widget widget,
                        ArgList args,
                        Cardinal argCount) ;
extern void XmDropSiteUnregister(
                        Widget widget) ;
extern Boolean XmDropSiteRegistered(
                          Widget widget) ;
extern void XmDropSiteStartUpdate(
                        Widget refWidget) ;
extern void XmDropSiteUpdate(
                        Widget enclosingWidget,
                        ArgList args,
                        Cardinal argCount) ;
extern void XmDropSiteEndUpdate(
                        Widget refWidget) ;
extern void XmDropSiteRetrieve(
                        Widget enclosingWidget,
                        ArgList args,
                        Cardinal argCount) ;
extern int XmDropSiteQueryStackingOrder(
                        Widget widget,
                        Widget *parent_rtn,
                        Widget **children_rtn,
                        Cardinal *num_children_rtn) ;
extern void XmDropSiteConfigureStackingOrder(
                        Widget widget,
                        Widget sibling,
                        Cardinal stack_mode) ;
extern XmDropSiteVisuals XmDropSiteGetActiveVisuals(
                        Widget widget) ;
# 50 "/usr/include/Xm/Display.h" 2 3 4
# 59 "/usr/include/Xm/Display.h" 3 4
enum {
 XmDRAG_NONE,
 XmDRAG_DROP_ONLY,
 XmDRAG_PREFER_PREREGISTER,
 XmDRAG_PREREGISTER,
 XmDRAG_PREFER_DYNAMIC,
 XmDRAG_DYNAMIC,
 XmDRAG_PREFER_RECEIVER
};



typedef struct _XmDisplayRec *XmDisplay;
typedef struct _XmDisplayClassRec *XmDisplayClass;
extern WidgetClass xmDisplayClass;





extern Widget XmGetDragContext(
                        Widget w,
                        Time time) ;
extern Widget XmGetXmDisplay(
                        Display *display) ;
# 49 "/usr/include/Xm/DragC.h" 2 3 4
# 62 "/usr/include/Xm/DragC.h" 3 4
typedef unsigned int XmID;
# 83 "/usr/include/Xm/DragC.h" 3 4
enum{ XmTOP_LEVEL_ENTER, XmTOP_LEVEL_LEAVE,
 XmDRAG_MOTION, XmDROP_SITE_ENTER,
 XmDROP_SITE_LEAVE, XmDROP_START,
 XmDROP_FINISH, XmDRAG_DROP_FINISH,
 XmOPERATION_CHANGED
 } ;


enum{ XmDROP, XmDROP_HELP,
 XmDROP_CANCEL, XmDROP_INTERRUPT
 } ;







enum{ XmMOVE = (1L << 0), XmCOPY = (1L << 1),
 XmLINK = (1L << 2), XmOTHER
 } ;

enum{ XmBLEND_ALL, XmBLEND_STATE_SOURCE,
 XmBLEND_JUST_SOURCE, XmBLEND_NONE
 } ;

enum{ XmDROP_FAILURE, XmDROP_SUCCESS
 } ;




enum{ XmCR_TOP_LEVEL_ENTER, XmCR_TOP_LEVEL_LEAVE,
 XmCR_DRAG_MOTION, XmCR_DROP_SITE_ENTER,
 XmCR_DROP_SITE_LEAVE, XmCR_DROP_START,
 XmCR_DROP_FINISH, XmCR_DRAG_DROP_FINISH,
 XmCR_OPERATION_CHANGED,

 _XmNUMBER_DND_CB_REASONS
 } ;



typedef struct _XmDragContextClassRec *XmDragContextClass;
typedef struct _XmDragContextRec *XmDragContext;
extern WidgetClass xmDragContextClass;

typedef struct _XmAnyICCCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
}XmAnyICCCallbackStruct, *XmAnyICCCallback;

typedef struct _XmTopLevelEnterCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    Screen *screen;




    Window window;
    Position x, y;
    unsigned char dragProtocolStyle;
    Atom iccHandle;
}XmTopLevelEnterCallbackStruct, *XmTopLevelEnterCallback;

typedef struct _XmTopLevelLeaveCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    Screen *screen;
    Window window;
}XmTopLevelLeaveCallbackStruct, *XmTopLevelLeaveCallback;






typedef struct _XmDropSiteEnterCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    unsigned char operation;
    unsigned char operations;
    unsigned char dropSiteStatus;
    Position x, y;
}XmDropSiteEnterCallbackStruct, *XmDropSiteEnterCallback;






typedef struct _XmDropSiteLeaveCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
}XmDropSiteLeaveCallbackStruct, *XmDropSiteLeaveCallback;

typedef struct _XmDragMotionCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    unsigned char operation;
    unsigned char operations;
    unsigned char dropSiteStatus;
    Position x, y;
}XmDragMotionCallbackStruct, *XmDragMotionCallback;

typedef struct _XmOperationChangedCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    unsigned char operation;
    unsigned char operations;
    unsigned char dropSiteStatus;
}XmOperationChangedCallbackStruct, *XmOperationChangedCallback;

typedef struct _XmDropStartCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    unsigned char operation;
    unsigned char operations;
    unsigned char dropSiteStatus;
    unsigned char dropAction;
    Position x, y;
    Window window;
    Atom iccHandle;
}XmDropStartCallbackStruct, *XmDropStartCallback;

typedef struct _XmDropFinishCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
    unsigned char operation;
    unsigned char operations;
    unsigned char dropSiteStatus;
    unsigned char dropAction;
    unsigned char completionStatus;
}XmDropFinishCallbackStruct, *XmDropFinishCallback;

typedef struct _XmDragDropFinishCallbackStruct{
    int reason;
    XEvent *event;
    Time timeStamp;
}XmDragDropFinishCallbackStruct, *XmDragDropFinishCallback;




extern Widget XmDragStart(
                        Widget w,
                        XEvent *event,
                        ArgList args,
                        Cardinal numArgs) ;
extern void XmDragCancel(
                        Widget dragContext) ;
extern Boolean XmTargetsAreCompatible(
                        Display *dpy,
                        Atom *exportTargets,
                        Cardinal numExportTargets,
                        Atom *importTargets,
                        Cardinal numImportTargets) ;
# 45 "/usr/include/Xm/Transfer.h" 2 3 4
# 60 "/usr/include/Xm/Transfer.h" 3 4
typedef enum { XmTRANSFER_DONE_SUCCEED = 0, XmTRANSFER_DONE_FAIL,
        XmTRANSFER_DONE_CONTINUE, XmTRANSFER_DONE_DEFAULT
      } XmTransferStatus;

enum { XmSELECTION_DEFAULT = 0, XmSELECTION_INCREMENTAL,
       XmSELECTION_PERSIST, XmSELECTION_SNAPSHOT,
       XmSELECTION_TRANSACT };

enum { XmCONVERTING_NONE = 0,
       XmCONVERTING_SAME = 1,
       XmCONVERTING_TRANSACT = 2,
       XmCONVERTING_PARTIAL = 4 };

enum { XmCONVERT_DEFAULT = 0, XmCONVERT_MORE,
       XmCONVERT_MERGE, XmCONVERT_REFUSE, XmCONVERT_DONE };



typedef struct {
 int reason;
 XEvent *event;
 Atom selection;
 Atom target;
 XtPointer source_data;
 XtPointer location_data;
 int flags;
 XtPointer parm;
 int parm_format;
 unsigned long parm_length;
 Atom parm_type;
 int status;
 XtPointer value;
 Atom type;
 int format;
 unsigned long length;
} XmConvertCallbackStruct;

typedef struct {
 int reason;
   XEvent *event;
 Atom selection;
 XtEnum operation;
 int flags;
 XtPointer transfer_id;
 XtPointer destination_data;
 XtPointer location_data;
 Time time;
} XmDestinationCallbackStruct;

typedef struct {
 int reason;
   XEvent *event;
 Atom selection;
 Atom target;
 Atom type;
 XtPointer transfer_id;
 int flags;
 int remaining;
 XtPointer value;
 unsigned long length;
 int format;
} XmSelectionCallbackStruct;

typedef struct {
 int reason;
   XEvent *event;
 Atom selection;
 XtPointer transfer_id;
 XmTransferStatus status;
 XtPointer client_data;
} XmTransferDoneCallbackStruct;

typedef void (*XmSelectionFinishedProc)(Widget, XtEnum,
     XmTransferDoneCallbackStruct*);

void XmTransferDone(XtPointer, XmTransferStatus);
void XmTransferValue(XtPointer, Atom, XtCallbackProc,
       XtPointer, Time);
void XmTransferSetParameters(XtPointer, XtPointer, int, unsigned long, Atom);
void XmTransferStartRequest(XtPointer);
void XmTransferSendRequest(XtPointer, Time);
# 64 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/Primitive.h" 1 3 4
# 53 "/usr/include/Xm/Primitive.h" 3 4
extern WidgetClass xmPrimitiveWidgetClass;

typedef struct _XmPrimitiveClassRec * XmPrimitiveWidgetClass;
typedef struct _XmPrimitiveRec * XmPrimitiveWidget;
# 65 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/Manager.h" 1 3 4
# 53 "/usr/include/Xm/Manager.h" 3 4
extern WidgetClass xmManagerWidgetClass;

typedef struct _XmManagerClassRec * XmManagerWidgetClass;
typedef struct _XmManagerRec * XmManagerWidget;
# 66 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/Gadget.h" 1 3 4
# 53 "/usr/include/Xm/Gadget.h" 3 4
extern WidgetClass xmGadgetClass;

typedef struct _XmGadgetClassRec * XmGadgetClass;
typedef struct _XmGadgetRec * XmGadget;
# 67 "/usr/include/Xm/Xm.h" 2 3 4
# 78 "/usr/include/Xm/Xm.h" 3 4
extern int xmUseVersion;
# 107 "/usr/include/Xm/Xm.h" 3 4
extern char _XmSDEFAULT_FONT[];
extern char _XmSDEFAULT_BACKGROUND[];

typedef unsigned char XmDirection;
# 124 "/usr/include/Xm/Xm.h" 3 4
enum {
  XmRIGHT_TO_LEFT_TOP_TO_BOTTOM =
      0x01 | 0x04 | 0x40,
  XmLEFT_TO_RIGHT_TOP_TO_BOTTOM =
      0x02 | 0x04 | 0x40,
  XmRIGHT_TO_LEFT_BOTTOM_TO_TOP =
      0x01 | 0x08 | 0x40,
  XmLEFT_TO_RIGHT_BOTTOM_TO_TOP =
      0x02 | 0x08 | 0x40,
  XmTOP_TO_BOTTOM_RIGHT_TO_LEFT =
      0x01 | 0x04 | 0x80,
  XmTOP_TO_BOTTOM_LEFT_TO_RIGHT =
      0x02 | 0x04 | 0x80,
  XmBOTTOM_TO_TOP_RIGHT_TO_LEFT =
      0x01 | 0x08 | 0x80,
  XmBOTTOM_TO_TOP_LEFT_TO_RIGHT =
      0x02 | 0x08 | 0x80,
  XmTOP_TO_BOTTOM =
      0x04 | 0x03 | 0xc0,
  XmBOTTOM_TO_TOP =
      0x08 | 0x03 | 0xc0,
  XmRIGHT_TO_LEFT =
      0x01 | 0x0c | 0xc0,
  XmLEFT_TO_RIGHT =
      0x02 | 0x0c | 0xc0,
  XmDEFAULT_DIRECTION = 0xff
  };


extern Boolean XmDirectionMatch(XmDirection d1,
    XmDirection d2);
extern Boolean XmDirectionMatchPartial(XmDirection d1,
           XmDirection d2,
           XmDirection dmask);







typedef enum{ XmFONT_IS_FONT, XmFONT_IS_FONTSET
       } XmFontType;

enum { XmSTRING_DIRECTION_L_TO_R,
       XmSTRING_DIRECTION_R_TO_L,
       XmSTRING_DIRECTION_UNSET = 3,
       XmSTRING_DIRECTION_DEFAULT = XmDEFAULT_DIRECTION
       };

typedef unsigned char XmStringDirection;
typedef union __XmStringRec *XmString;
typedef XmString * XmStringTable;
typedef char * XmStringCharSet;
typedef char * XmStringTag;
typedef unsigned char XmStringComponentType;

typedef struct __XmRenditionRec **XmFontListEntry;
typedef struct __XmRenderTableRec **XmFontList;
typedef struct _XmFontListContextRec *XmFontContext;

typedef struct __XmStringContextRec *_XmStringContext;
typedef union __XmStringRec *_XmString;
typedef struct __XmStringContextRec *XmStringContext;

enum{ XmSTRING_COMPONENT_UNKNOWN, XmSTRING_COMPONENT_CHARSET,
 XmSTRING_COMPONENT_TEXT, XmSTRING_COMPONENT_DIRECTION,
        XmSTRING_COMPONENT_SEPARATOR, XmSTRING_COMPONENT_LOCALE_TEXT,
 XmSTRING_COMPONENT_LOCALE, XmSTRING_COMPONENT_WIDECHAR_TEXT,
 XmSTRING_COMPONENT_LAYOUT_PUSH, XmSTRING_COMPONENT_LAYOUT_POP,
 XmSTRING_COMPONENT_RENDITION_BEGIN, XmSTRING_COMPONENT_RENDITION_END,
 XmSTRING_COMPONENT_TAB

 } ;
# 209 "/usr/include/Xm/Xm.h" 3 4
typedef enum {
    XmCHARSET_TEXT, XmMULTIBYTE_TEXT,
    XmWIDECHAR_TEXT, XmNO_TEXT
    } XmTextType;

typedef enum {
    XmOUTPUT_ALL, XmOUTPUT_BETWEEN,
    XmOUTPUT_BEGINNING, XmOUTPUT_END,
    XmOUTPUT_BOTH
    } XmParseModel;

typedef unsigned char XmIncludeStatus;
enum {
  XmINSERT, XmTERMINATE, XmINVOKE
  };





typedef enum {
    XmSTYLE_STRING = XStringStyle,
    XmSTYLE_COMPOUND_TEXT = XCompoundTextStyle,
    XmSTYLE_TEXT = XTextStyle,
    XmSTYLE_STANDARD_ICC_TEXT = XStdICCTextStyle,
    XmSTYLE_LOCALE = 32,
    XmSTYLE_COMPOUND_STRING
    } XmICCEncodingStyle;
# 245 "/usr/include/Xm/Xm.h" 3 4
typedef struct __XmParseMappingRec *XmParseMapping;
typedef XmParseMapping *XmParseTable;





typedef XmIncludeStatus (*XmParseProc) (XtPointer *in_out,
     XtPointer text_end,
     XmTextType type,
     XmStringTag locale_tag,
     XmParseMapping entry,
     int pattern_length,
     XmString *str_include,
     XtPointer call_data);
# 268 "/usr/include/Xm/Xm.h" 3 4
typedef enum {
  XmABSOLUTE, XmRELATIVE
  } XmOffsetModel;

typedef struct __XmTabRec *XmTab;
typedef struct __XmTabListRec *XmTabList;
# 283 "/usr/include/Xm/Xm.h" 3 4
typedef struct __XmRenditionRec **XmRendition;
typedef struct __XmRenderTableRec **XmRenderTable;

typedef enum {
  XmSKIP, XmMERGE_REPLACE,
  XmMERGE_OLD, XmMERGE_NEW,
  XmDUPLICATE
  } XmMergeMode;
# 300 "/usr/include/Xm/Xm.h" 3 4
enum { XmUNSPECIFIED_LOAD_MODEL, XmLOAD_DEFERRED, XmLOAD_IMMEDIATE };
# 310 "/usr/include/Xm/Xm.h" 3 4
enum{ XmCHANGE_ALL, XmCHANGE_NONE,
 XmCHANGE_WIDTH, XmCHANGE_HEIGHT
 } ;



enum{ XmPIXELS, Xm100TH_MILLIMETERS,
 Xm1000TH_INCHES, Xm100TH_POINTS,
 Xm100TH_FONT_UNITS, XmINCHES,
        XmCENTIMETERS, XmMILLIMETERS,
        XmPOINTS, XmFONT_UNITS
 } ;



enum{ XmDESTROY, XmUNMAP,
 XmDO_NOTHING
 } ;
enum{ XmEXPLICIT, XmPOINTER
 } ;




enum{ XmNONE, XmTAB_GROUP,
 XmSTICKY_TAB_GROUP, XmEXCLUSIVE_TAB_GROUP
 } ;







enum{ XmBELL = 1
 } ;





enum {
        XmPER_SHELL, XmPER_WIDGET,
        XmINHERIT_POLICY = 255
 } ;

typedef unsigned char XmInputPolicy;





enum{ XmNO_ORIENTATION, XmVERTICAL,
 XmHORIZONTAL
 } ;
enum{ XmWORK_AREA, XmMENU_BAR,
 XmMENU_PULLDOWN, XmMENU_POPUP,
 XmMENU_OPTION
 } ;
enum{ XmNO_PACKING, XmPACK_TIGHT,
 XmPACK_COLUMN, XmPACK_NONE
 } ;
enum{ XmALIGNMENT_CONTENTS_TOP = 3,

 XmALIGNMENT_CONTENTS_BOTTOM
 } ;
enum{ XmTEAR_OFF_ENABLED, XmTEAR_OFF_DISABLED
 } ;
enum{ XmUNPOST, XmUNPOST_AND_REPLAY
 } ;
enum{ XmLAST_POSITION = -1, XmFIRST_POSITION
 } ;
enum{ XmPOPUP_DISABLED = 0, XmPOPUP_KEYBOARD = 1,
 XmPOPUP_AUTOMATIC, XmPOPUP_AUTOMATIC_RECURSIVE };





typedef enum { XmListMode = 0, XmScaleMode = 1 } XmColorMode;





enum { XmFILL_UNSPECIFIED, XmFILL_FLUSH, XmFILL_RAGGED };

enum { XmDISTRIBUTE_TIGHT, XmDISTRIBUTE_SPREAD };





enum{ XmCOMBO_BOX=0, XmDROP_DOWN_COMBO_BOX,
 XmDROP_DOWN_LIST
 } ;

enum{ XmQUICK_NAVIGATE = 1, XmINVALID_MATCH_BEHAVIOR
 } ;

enum{ XmZERO_BASED, XmONE_BASED
        } ;






typedef enum { XmIconTop,
               XmIconLeft,
               XmIconRight,
               XmIconBottom,
               XmIconOnly,
               XmIconNone } XmIconPlacement;

typedef enum { XmFillNone,
               XmFillMajor,
               XmFillMinor,
               XmFillAll } XmFillOption;




typedef enum {XmAlwaysOpen,
              XmOpen,
              XmClosed, XmHidden,
       XmNotInHierarchy} XmHierarchyNodeState;

typedef enum { XmTreeLadder, XmTreeDirect } XmTreeConnectStyle;

typedef enum { XmTreeCompressNone=0, XmTreeCompressLeaves=1,
               XmTreeCompressAll=2 } XmTreeCompressStyle;





enum{ XmALIGNMENT_BEGINNING, XmALIGNMENT_CENTER,
 XmALIGNMENT_END, XmALIGNMENT_UNSPECIFIED
 } ;
enum{ XmALIGNMENT_BASELINE_TOP,
 XmALIGNMENT_BASELINE_BOTTOM = 2, XmALIGNMENT_WIDGET_TOP,
 XmALIGNMENT_WIDGET_BOTTOM
    } ;
# 463 "/usr/include/Xm/Xm.h" 3 4
enum{ XmFRAME_GENERIC_CHILD, XmFRAME_WORKAREA_CHILD,
        XmFRAME_TITLE_CHILD
 } ;




enum{ XmN_OF_MANY = 1, XmONE_OF_MANY,
 XmONE_OF_MANY_ROUND, XmONE_OF_MANY_DIAMOND
 } ;




enum{ XmATTACH_NONE, XmATTACH_FORM,
 XmATTACH_OPPOSITE_FORM, XmATTACH_WIDGET,
 XmATTACH_OPPOSITE_WIDGET, XmATTACH_POSITION,
 XmATTACH_SELF
 } ;
enum{ XmRESIZE_NONE, XmRESIZE_GROW,
 XmRESIZE_ANY
 } ;





typedef enum {XmTABS_SQUARED, XmTABS_ROUNDED, XmTABS_BEVELED} XmTabStyle;
typedef enum {XmTABS_BASIC, XmTABS_STACKED, XmTABS_STACKED_STATIC,
              XmTABS_SCROLLED, XmTABS_OVERLAYED} XmTabMode;

typedef enum {XmTAB_ORIENTATION_DYNAMIC, XmTABS_RIGHT_TO_LEFT,
              XmTABS_LEFT_TO_RIGHT, XmTABS_TOP_TO_BOTTOM,
              XmTABS_BOTTOM_TO_TOP} XmTabOrientation;

typedef enum {XmTAB_EDGE_TOP_LEFT, XmTAB_EDGE_BOTTOM_RIGHT} XmTabEdge;

typedef enum {XmTAB_ARROWS_ON_RIGHT, XmTAB_ARROWS_ON_LEFT,
              XmTAB_ARROWS_SPLIT} XmTabArrowPlacement;

enum {XmCR_TAB_SELECTED, XmCR_TAB_UNSELECTED};

typedef enum {XmTABS_ON_TOP, XmTABS_ON_BOTTOM, XmTABS_ON_RIGHT,
              XmTABS_ON_LEFT} XmTabSide;

typedef enum {XmPIXMAP_TOP, XmPIXMAP_BOTTOM, XmPIXMAP_RIGHT, XmPIXMAP_LEFT,
              XmPIXMAP_NONE, XmPIXMAP_ONLY} XmPixmapPlacement;

typedef enum {XmTAB_VALUE_COPY, XmTAB_VALUE_SHARE} XmTabValueMode;

typedef enum {XmTAB_CMP_VISUAL, XmTAB_CMP_SIZE, XmTAB_CMP_EQUAL} XmTabResult;





enum{ XmCR_NONE, XmCR_HELP,
 XmCR_VALUE_CHANGED, XmCR_INCREMENT,
 XmCR_DECREMENT, XmCR_PAGE_INCREMENT,
 XmCR_PAGE_DECREMENT, XmCR_TO_TOP,
 XmCR_TO_BOTTOM, XmCR_DRAG,
 XmCR_ACTIVATE, XmCR_ARM,
 XmCR_DISARM, XmCR_MAP = 16,
 XmCR_UNMAP, XmCR_FOCUS,
 XmCR_LOSING_FOCUS, XmCR_MODIFYING_TEXT_VALUE,
 XmCR_MOVING_INSERT_CURSOR, XmCR_EXECUTE,
 XmCR_SINGLE_SELECT, XmCR_MULTIPLE_SELECT,
 XmCR_EXTENDED_SELECT, XmCR_BROWSE_SELECT,
 XmCR_DEFAULT_ACTION, XmCR_CLIPBOARD_DATA_REQUEST,
 XmCR_CLIPBOARD_DATA_DELETE, XmCR_CASCADING,
 XmCR_OK, XmCR_CANCEL,
 XmCR_APPLY = 34, XmCR_NO_MATCH,
 XmCR_COMMAND_ENTERED, XmCR_COMMAND_CHANGED,
 XmCR_EXPOSE, XmCR_RESIZE,
 XmCR_INPUT, XmCR_GAIN_PRIMARY,
 XmCR_LOSE_PRIMARY, XmCR_CREATE,
 XmCR_TEAR_OFF_ACTIVATE, XmCR_TEAR_OFF_DEACTIVATE,
 XmCR_OBSCURED_TRAVERSAL, XmCR_FOCUS_MOVED,
 XmCR_REPOST = 54, XmCR_COLLAPSED,
 XmCR_EXPANDED, XmCR_SELECT,
 XmCR_DRAG_START, XmCR_NO_FONT,
 XmCR_NO_RENDITION, XmCR_POST,
 XmCR_SPIN_NEXT, XmCR_SPIN_PRIOR,
 XmCR_SPIN_FIRST, XmCR_SPIN_LAST,
 XmCR_PAGE_SCROLLER_INCREMENT, XmCR_PAGE_SCROLLER_DECREMENT,
 XmCR_MAJOR_TAB, XmCR_MINOR_TAB,
 XmCR_START_JOB, XmCR_END_JOB,
 XmCR_PAGE_SETUP, XmCR_PDM_NONE,
 XmCR_PDM_UP, XmCR_PDM_START_ERROR,
 XmCR_PDM_START_VXAUTH, XmCR_PDM_START_PXAUTH,
 XmCR_PDM_OK, XmCR_PDM_CANCEL,
 XmCR_PDM_EXIT_ERROR,
        XmCR_UPDATE_SHELL, XmCR_UPDATE_TEXT,
        XmCR_VERIFY_TEXT, XmCR_VERIFY_TEXT_FAILED,
        XmCR_ENTER_CHILD, XmCR_LEAVE_CHILD,
 XmCR_PROTOCOLS = 6666
 } ;





enum{ XmEACH_SIDE = 1,
 XmMAX_SIDE, XmMIN_SIDE
 } ;






enum{ XmSLIDER, XmTHERMOMETER} ;






enum{ XmBACKGROUND_COLOR, XmFOREGROUND_COLOR,
        XmTROUGH_COLOR, XmSHADOWED_BACKGROUND} ;






enum{ XmETCHED_LINE = 1,
        XmTHUMB_MARK, XmROUND_MARK } ;






enum{ XmNEAR_SLIDER = 1,
 XmNEAR_BORDER
 } ;







enum{
        XmHOR_SCROLLBAR = 2,
 XmVERT_SCROLLBAR,
 XmCOMMAND_WINDOW,

        XmMESSAGE_WINDOW = 6,
        XmSCROLL_HOR, XmSCROLL_VERT, XmNO_SCROLL,
 XmCLIP_WINDOW, XmGENERIC_CHILD
 } ;





enum{ XmAUTO_DRAG_ENABLED, XmAUTO_DRAG_DISABLED
 } ;





enum{ XmENABLE_WARP_ON, XmENABLE_WARP_OFF
 } ;





enum{ XmOFF, XmBUTTON2_ADJUST,
 XmBUTTON2_TRANSFER };





enum{ XmAUTO_UNSET, XmAUTO_BEGIN,
        XmAUTO_MOTION, XmAUTO_CANCEL,
        XmAUTO_NO_CHANGE, XmAUTO_CHANGE
        };





typedef struct
{
    int reason;
    XEvent *event;
} XmAnyCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    int click_count;
} XmArrowButtonCallbackStruct;

typedef struct _XmDragStartCallbackStruct {
    int reason;
    XEvent *event;
    Widget widget;
    Boolean doit;
} XmDragStartCallbackStruct, *XmDragStartCallback;

typedef struct
{
    int reason;
    XEvent *event;
    XmString item_or_text;
    int item_position;
} XmComboBoxCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    Window window;
} XmDrawingAreaCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    Window window;
    int click_count;
} XmDrawnButtonCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    int click_count;
} XmPushButtonCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    Widget widget;
    char *data;
    char *callbackstruct;
} XmRowColumnCallbackStruct;

typedef struct
{
   int reason;
   XEvent * event;
   int value;
   int pixel;
} XmScrollBarCallbackStruct;

typedef struct
{
   int reason;
   XEvent * event;
   int set;
} XmToggleButtonCallbackStruct;

typedef struct
{
   int reason;
   XEvent *event;
   XmString item;
   int item_length;
   int item_position;
   XmString *selected_items;
   int selected_item_count;
   int *selected_item_positions;
   char selection_type;
   char auto_selection_type;
} XmListCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    XmString value;
    int length;
} XmSelectionBoxCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    XmString value;
    int length;
} XmCommandCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    XmString value;
    int length;
    XmString mask;
    int mask_length;
    XmString dir ;
    int dir_length ;
    XmString pattern ;
    int pattern_length ;
} XmFileSelectionBoxCallbackStruct;


typedef struct
{
   int reason;
   XEvent * event;
   int value;
} XmScaleCallbackStruct;

typedef struct
{
  int reason;
  XEvent *event;
  Widget menuToPost;
  Boolean postIt;
  Widget target;
} XmPopupHandlerCallbackStruct;

typedef struct
{
  int reason;
  XEvent *event;
  Widget item;
  unsigned char new_outline_state;
} XmContainerOutlineCallbackStruct;

typedef struct
{
  int reason;
  XEvent *event;
  WidgetList selected_items;
  int selected_item_count;
  unsigned char auto_selection_type;
} XmContainerSelectCallbackStruct;

typedef struct
{
  int reason;
  XEvent *event;
  int page_number;
  Widget page_widget;
  int prev_page_number;
  Widget prev_page_widget;
} XmNotebookCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    XmRendition rendition;
    char *font_name;
    XmRenderTable render_table;
    XmStringTag tag;
} XmDisplayCallbackStruct;

typedef struct
{
    int reason;
    XEvent *event;
    XPContext context;
    Boolean last_page;
    XtPointer detail;
} XmPrintShellCallbackStruct;






enum{ XmMULTICLICK_DISCARD, XmMULTICLICK_KEEP
 } ;




enum{ XmSHADOW_IN = 7, XmSHADOW_OUT
 } ;




enum{ XmARROW_UP, XmARROW_DOWN,
 XmARROW_LEFT, XmARROW_RIGHT
 } ;





enum{ XmNO_LINE, XmSINGLE_LINE,
 XmDOUBLE_LINE, XmSINGLE_DASHED_LINE,
 XmDOUBLE_DASHED_LINE, XmSHADOW_ETCHED_IN,
 XmSHADOW_ETCHED_OUT, XmSHADOW_ETCHED_IN_DASH,
 XmSHADOW_ETCHED_OUT_DASH, XmINVALID_SEPARATOR_TYPE
 } ;

enum{ XmPIXMAP = 1, XmSTRING
 } ;





enum{ XmWINDOW,
 XmCURSOR = 2, XmDRAG_WINDOW = 3
 } ;





enum{ XmMAX_ON_TOP, XmMAX_ON_BOTTOM,
 XmMAX_ON_LEFT, XmMAX_ON_RIGHT
 } ;






enum{ XmSINGLE_SELECT, XmMULTIPLE_SELECT,
 XmEXTENDED_SELECT, XmBROWSE_SELECT
 } ;
enum{ XmSTATIC, XmDYNAMIC
 } ;
enum{ XmNORMAL_MODE, XmADD_MODE
        } ;







enum { XmNO_AUTO_SELECT,
        XmAUTO_SELECT
        };


enum {
        XmSINGLE = 1
        };


enum {

        XmANY_ICON = 2
        };


enum { XmAPPEND,
        XmCLOSEST,
        XmFIRST_FIT
        };


enum { XmOUTLINE,
        XmSPATIAL,
 XmDETAIL
        };


enum { XmOUTLINE_BUTTON_PRESENT,
 XmOUTLINE_BUTTON_ABSENT
 };


enum {
 XmGRID = 1,
 XmCELLS
        };


enum { XmOWN_NEVER,
 XmOWN_ALWAYS,
 XmOWN_MULTIPLE,
 XmOWN_POSSIBLE_MULTIPLE
 };


enum { XmGROW_MINOR,
 XmGROW_MAJOR,
        XmGROW_BALANCED
        };


enum { XmMARQUEE,
        XmMARQUEE_EXTEND_START,
        XmMARQUEE_EXTEND_BOTH,
        XmTOUCH_ONLY,
        XmTOUCH_OVER
        };


enum {
        XmSNAP_TO_GRID = 1,
        XmCENTER
        };


enum { XmCOLLAPSED,
        XmEXPANDED
        };
# 979 "/usr/include/Xm/Xm.h" 3 4
enum { XmLARGE_ICON,
        XmSMALL_ICON
        };


enum { XmSELECTED,
        XmNOT_SELECTED
        };
# 997 "/usr/include/Xm/Xm.h" 3 4
enum {

        XmSOLID = 2,
        XmSPIRAL,
        XmPIXMAP_OVERLAP_ONLY
        };


enum {
        XmPAGE = 1,
        XmMAJOR_TAB,
        XmMINOR_TAB,
        XmSTATUS_AREA,
        XmPAGE_SCROLLER
        };
# 1020 "/usr/include/Xm/Xm.h" 3 4
enum
{
    XmARROWS_VERTICAL,
    XmARROWS_HORIZONTAL
};


enum
{
    XmARROWS_END,
    XmARROWS_BEGINNING,
    XmARROWS_SPLIT,
    XmARROWS_FLAT_END,
    XmARROWS_FLAT_BEGINNING
};




enum
{
    XmARROWS_INSENSITIVE,
    XmARROWS_INCREMENT_SENSITIVE,
    XmARROWS_DECREMENT_SENSITIVE,
    XmARROWS_SENSITIVE,
    XmARROWS_DEFAULT_SENSITIVITY
};


enum
{
    XmPOSITION_INDEX,
    XmPOSITION_VALUE
};


enum
{


    XmNUMERIC = 3
};


enum
{
    XmVALID_VALUE,
    XmCURRENT_VALUE,
    XmMAXIMUM_VALUE,
    XmMINIMUM_VALUE,
    XmINCREMENT_VALUE
};

typedef struct
{
    int reason;
    XEvent *event;
    Widget widget;
    Boolean doit;
    int position;
    XmString value;
    Boolean crossed_boundary;
} XmSpinBoxCallbackStruct;
# 1091 "/usr/include/Xm/Xm.h" 3 4
enum{ XmVARIABLE, XmCONSTANT,
 XmRESIZE_IF_POSSIBLE
 } ;
enum{ XmAUTOMATIC, XmAPPLICATION_DEFINED
 } ;
enum{ XmAS_NEEDED = 1
 } ;
# 1115 "/usr/include/Xm/Xm.h" 3 4
enum{ XmCOMMAND_ABOVE_WORKSPACE, XmCOMMAND_BELOW_WORKSPACE
 } ;






enum{ XmMULTI_LINE_EDIT, XmSINGLE_LINE_EDIT
 } ;

typedef enum{
 XmTEXT_FORWARD,
 XmTEXT_BACKWARD
 } XmTextDirection;

typedef long XmTextPosition;
typedef Atom XmTextFormat;







typedef enum{
 XmSELECT_POSITION, XmSELECT_WHITESPACE,
 XmSELECT_WORD, XmSELECT_LINE,
 XmSELECT_ALL, XmSELECT_PARAGRAPH,
 XmSELECT_OUT_LINE
 } XmTextScanType ;

typedef enum{
 XmHIGHLIGHT_NORMAL, XmHIGHLIGHT_SELECTED,
 XmHIGHLIGHT_SECONDARY_SELECTED, XmSEE_DETAIL
 } XmHighlightMode ;



typedef struct {
    char *ptr;
    int length;
    XmTextFormat format;
} XmTextBlockRec, *XmTextBlock;

typedef struct
{
    int reason;
    XEvent *event;
    Boolean doit;
    long currInsert, newInsert;
    long startPos, endPos;
    XmTextBlock text;
} XmTextVerifyCallbackStruct, *XmTextVerifyPtr;




typedef struct {
    wchar_t *wcsptr;
    int length;
} XmTextBlockRecWcs, *XmTextBlockWcs;

typedef struct
{
    int reason;
    XEvent *event;
    Boolean doit;
    long currInsert, newInsert;
    long startPos, endPos;
    XmTextBlockWcs text;
} XmTextVerifyCallbackStructWcs, *XmTextVerifyPtrWcs;
# 1205 "/usr/include/Xm/Xm.h" 3 4
enum{ XmDIALOG_NONE, XmDIALOG_APPLY_BUTTON,
 XmDIALOG_CANCEL_BUTTON, XmDIALOG_DEFAULT_BUTTON,
 XmDIALOG_OK_BUTTON, XmDIALOG_FILTER_LABEL,
 XmDIALOG_FILTER_TEXT, XmDIALOG_HELP_BUTTON,
 XmDIALOG_LIST, XmDIALOG_LIST_LABEL,
 XmDIALOG_MESSAGE_LABEL, XmDIALOG_SELECTION_LABEL,
 XmDIALOG_SYMBOL_LABEL, XmDIALOG_TEXT,
 XmDIALOG_SEPARATOR, XmDIALOG_DIR_LIST,
 XmDIALOG_DIR_LIST_LABEL
 } ;
# 1225 "/usr/include/Xm/Xm.h" 3 4
enum{ XmDIALOG_MODELESS, XmDIALOG_PRIMARY_APPLICATION_MODAL,
 XmDIALOG_FULL_APPLICATION_MODAL,XmDIALOG_SYSTEM_MODAL
 } ;
# 1239 "/usr/include/Xm/Xm.h" 3 4
enum{ XmPLACE_TOP, XmPLACE_ABOVE_SELECTION,
 XmPLACE_BELOW_SELECTION
 } ;
# 1251 "/usr/include/Xm/Xm.h" 3 4
enum{ XmDIALOG_WORK_AREA, XmDIALOG_PROMPT,
 XmDIALOG_SELECTION, XmDIALOG_COMMAND,
 XmDIALOG_FILE_SELECTION
 } ;







enum{ XmDIALOG_TEMPLATE, XmDIALOG_ERROR,
 XmDIALOG_INFORMATION, XmDIALOG_MESSAGE,
 XmDIALOG_QUESTION, XmDIALOG_WARNING,
 XmDIALOG_WORKING
 } ;



typedef enum{
 XmVISIBILITY_UNOBSCURED, XmVISIBILITY_PARTIALLY_OBSCURED,
 XmVISIBILITY_FULLY_OBSCURED
 } XmVisibility ;


typedef enum{
 XmTRAVERSE_CURRENT, XmTRAVERSE_NEXT,
 XmTRAVERSE_PREV, XmTRAVERSE_HOME,
 XmTRAVERSE_NEXT_TAB_GROUP, XmTRAVERSE_PREV_TAB_GROUP,
 XmTRAVERSE_UP, XmTRAVERSE_DOWN,
 XmTRAVERSE_LEFT, XmTRAVERSE_RIGHT,
 XmTRAVERSE_GLOBALLY_FORWARD, XmTRAVERSE_GLOBALLY_BACKWARD
 } XmTraversalDirection ;

typedef struct _XmTraverseObscuredCallbackStruct
{ int reason ;
 XEvent * event ;
 Widget traversal_destination ;
 XmTraversalDirection direction ;
 } XmTraverseObscuredCallbackStruct ;

typedef unsigned char XmNavigationType;
# 1301 "/usr/include/Xm/Xm.h" 3 4
typedef unsigned char XmButtonType;
typedef XmButtonType * XmButtonTypeTable;
typedef KeySym * XmKeySymTable;
typedef XmStringCharSet * XmStringCharSetTable;

enum{ XmPUSHBUTTON = 1, XmTOGGLEBUTTON,
 XmRADIOBUTTON, XmCASCADEBUTTON,
 XmSEPARATOR, XmDOUBLE_SEPARATOR,
 XmTITLE
 } ;
# 1320 "/usr/include/Xm/Xm.h" 3 4
enum{ XmMATCH_DEPTH, XmDYNAMIC_DEPTH } ;






enum { XmPDM_NOTIFY_FAIL, XmPDM_NOTIFY_SUCCESS } ;




# 1 "/usr/include/Xm/TxtPropCv.h" 1 3 4
# 51 "/usr/include/Xm/TxtPropCv.h" 3 4
extern int XmCvtXmStringTableToTextProperty(Display *display,
     XmStringTable string_table,
     int count,
     XmICCEncodingStyle style,
     XTextProperty *text_prop_return);

extern int XmCvtTextPropertyToXmStringTable(Display *display,
     XTextProperty *text_prop,
     XmStringTable *string_table_return,
     int *count_return);
# 1333 "/usr/include/Xm/Xm.h" 2 3 4



typedef XtPointer (*XmResourceBaseProc)( Widget, XtPointer) ;

typedef struct _XmSecondaryResourceDataRec{
    XmResourceBaseProc base_proc;
    XtPointer client_data;
    String name;
    String res_class;
    XtResourceList resources;
    Cardinal num_resources;
}XmSecondaryResourceDataRec, *XmSecondaryResourceData;



extern Cardinal XmGetSecondaryResourceData(
                        WidgetClass w_class,
                        XmSecondaryResourceData **secondaryDataRtn) ;





extern Boolean XmInstallImage(
                        XImage *image,
                        char *image_name) ;
extern Boolean XmUninstallImage(
                        XImage *image) ;
extern Pixmap XmGetPixmap(
                        Screen *screen,
                        char *image_name,
                        Pixel foreground,
                        Pixel background) ;
extern Pixmap XmGetPixmapByDepth(
                        Screen *screen,
                        char *image_name,
                        Pixel foreground,
                        Pixel background,
   int depth) ;
extern Boolean XmDestroyPixmap(
                        Screen *screen,
                        Pixmap pixmap) ;
# 1384 "/usr/include/Xm/Xm.h" 3 4
typedef long XmOffset;
typedef XmOffset *XmOffsetPtr;



extern void XmResolveAllPartOffsets(
                        WidgetClass w_class,
                        XmOffsetPtr *offset,
                        XmOffsetPtr *constraint_offset) ;
extern void XmResolvePartOffsets(
                        WidgetClass w_class,
                        XmOffsetPtr *offset) ;
# 1404 "/usr/include/Xm/Xm.h" 3 4
extern void XmUpdateDisplay(
                        Widget w) ;
extern Widget XmObjectAtPoint(
   Widget wid,
   Position x,
   Position y ) ;

extern Boolean XmWidgetGetBaselines(
                        Widget wid,
                        Dimension **baselines,
                        int *line_count);
extern Boolean XmWidgetGetDisplayRect(
                        Widget wid,
                        XRectangle *displayrect);
# 1431 "/usr/include/Xm/Xm.h" 3 4
extern void XmCvtStringToUnitType(
                        XrmValuePtr args,
                        Cardinal *num_args,
                        XrmValue *from_val,
                        XrmValue *to_val) ;
extern char * XmRegisterSegmentEncoding(
                        char *fontlist_tag,
                        char *ct_encoding) ;
extern char * XmMapSegmentEncoding(
                        char *fontlist_tag) ;
extern XmString XmCvtCTToXmString(
                        char *text) ;
extern Boolean XmCvtTextToXmString(
                        Display *display,
                        XrmValuePtr args,
                        Cardinal *num_args,
                        XrmValue *from_val,
                        XrmValue *to_val,
                        XtPointer *converter_data) ;
extern char * XmCvtXmStringToCT(
                        XmString string) ;
extern Boolean XmCvtXmStringToText(
                        Display *display,
                        XrmValuePtr args,
                        Cardinal *num_args,
                        XrmValue *from_val,
                        XrmValue *to_val,
                        XtPointer *converter_data) ;





extern int XmConvertStringToUnits(
      Screen *screen,
      String spec,
      int orientation,
      int to_type,
      XtEnum *parse_error);
extern int XmConvertUnits(
                        Widget widget,
                        int dimension,
                        register int from_type,
                        register int from_val,
                        register int to_type) ;
extern int XmCvtToHorizontalPixels(
                        Screen *screen,
                        register int from_val,
                        register int from_type) ;
extern int XmCvtToVerticalPixels(
                        Screen *screen,
                        register int from_val,
                        register int from_type) ;
extern int XmCvtFromHorizontalPixels(
                        Screen *screen,
                        register int from_val,
                        register int to_type) ;
extern int XmCvtFromVerticalPixels(
                        Screen *screen,
                        register int from_val,
                        register int to_type) ;
extern void XmSetFontUnits(
                        Display *display,
                        int h_value,
                        int v_value) ;
extern void XmSetFontUnit(
                        Display *display,
                        int value) ;





extern void XmSetMenuCursor(
                        Display *display,
                        Cursor cursorId) ;
extern Cursor XmGetMenuCursor(
                        Display *display) ;





extern Widget XmCreateSimpleMenuBar(
                        Widget parent,
                        String name,
                        ArgList args,
                        Cardinal arg_count) ;
extern Widget XmCreateSimplePopupMenu(
                        Widget parent,
                        String name,
                        ArgList args,
                        Cardinal arg_count) ;
extern Widget XmCreateSimplePulldownMenu(
                        Widget parent,
                        String name,
                        ArgList args,
                        Cardinal arg_count) ;
extern Widget XmCreateSimpleOptionMenu(
                        Widget parent,
                        String name,
                        ArgList args,
                        Cardinal arg_count) ;
extern Widget XmCreateSimpleRadioBox(
                        Widget parent,
                        String name,
                        ArgList args,
                        Cardinal arg_count) ;
extern Widget XmCreateSimpleCheckBox(
                        Widget parent,
                        String name,
                        ArgList args,
                        Cardinal arg_count) ;




extern Widget XmVaCreateSimpleMenuBar(
   Widget parent,
   String name,
   ...) ;
extern Widget XmVaCreateSimplePopupMenu(
   Widget parent,
   String name,
   XtCallbackProc callback,
   ...) ;
extern Widget XmVaCreateSimplePulldownMenu(
   Widget parent,
   String name,
   int post_from_button,
   XtCallbackProc callback,
   ...) ;
extern Widget XmVaCreateSimpleOptionMenu(
   Widget parent,
   String name,
                        XmString option_label,
                        KeySym option_mnemonic,
                        int button_set,
                        XtCallbackProc callback,
   ...) ;
extern Widget XmVaCreateSimpleRadioBox(
   Widget parent,
   String name,
   int button_set,
   XtCallbackProc callback,
   ...) ;
extern Widget XmVaCreateSimpleCheckBox(
   Widget parent,
   String name,
   XtCallbackProc callback,
   ...) ;




extern Widget XmTrackingEvent(
                        Widget widget,
                        Cursor cursor,



                        Boolean confineTo,

                        XEvent *pev) ;
extern Widget XmTrackingLocate(
                        Widget widget,
                        Cursor cursor,



                        Boolean confineTo) ;





typedef void (*XmColorProc) (XColor *bg_color, XColor *fg_color,
 XColor *sel_color, XColor *ts_color, XColor *bs_color);



extern XmColorProc XmSetColorCalculation(
                        XmColorProc proc) ;
extern XmColorProc XmGetColorCalculation( void ) ;
extern void XmGetColors(
                        Screen *screen,
                        Colormap color_map,
                        Pixel background,
                        Pixel *foreground_ret,
                        Pixel *top_shadow_ret,
                        Pixel *bottom_shadow_ret,
                        Pixel *select_ret) ;
extern void XmChangeColor(
                        Widget widget,
                        Pixel background) ;





extern XmString XmStringCreate(
                        char *text,
                        XmStringCharSet charset) ;
extern XmString XmStringCreateSimple(
                        char *text) ;
extern XmString XmStringCreateLocalized(
                        String text) ;
extern XmString XmStringDirectionCreate(



                        XmStringDirection direction) ;

extern XmString XmStringSeparatorCreate( void ) ;
extern XmString XmStringSegmentCreate(
                        char *text,
                        XmStringCharSet charset,




                        XmStringDirection direction,
                        Boolean separator) ;

extern XmString XmStringLtoRCreate(
                        char *text,
                        XmStringCharSet charset) ;
extern XmString XmStringCreateLtoR(
                        char *text,
                        XmStringCharSet charset) ;
extern Boolean XmStringInitContext(
                        XmStringContext *context,
                        XmString string) ;
extern void XmStringFreeContext(
                        XmStringContext context) ;
extern XmStringComponentType XmStringGetNextComponent(
                        XmStringContext context,
                        char **text,
                        XmStringCharSet *charset,
                        XmStringDirection *direction,
                        XmStringComponentType *unknown_tag,
                        unsigned short *unknown_length,
                        unsigned char **unknown_value) ;
extern XmStringComponentType XmStringPeekNextComponent(
                        XmStringContext context) ;
extern Boolean XmStringGetNextSegment(
                        XmStringContext context,
                        char **text,
                        XmStringCharSet *charset,
                        XmStringDirection *direction,
                        Boolean *separator) ;
extern Boolean XmStringGetLtoR(
                        XmString string,
                        XmStringCharSet charset,
                        char **text) ;
extern XmFontListEntry XmFontListEntryCreate(
                        char *tag,
                        XmFontType type,
                        XtPointer font) ;
extern XmFontListEntry XmFontListEntryCreate_r(
                        char *tag,
                        XmFontType type,
                        XtPointer font,
                        Widget wid) ;
extern void XmFontListEntryFree(
                        XmFontListEntry *entry) ;
extern XtPointer XmFontListEntryGetFont(
                        XmFontListEntry entry,
                        XmFontType *typeReturn) ;
extern char * XmFontListEntryGetTag(
                        XmFontListEntry entry) ;
extern XmFontList XmFontListAppendEntry(
                        XmFontList old,
                        XmFontListEntry entry) ;
extern XmFontListEntry XmFontListNextEntry(
                        XmFontContext context) ;
extern XmFontList XmFontListRemoveEntry(
                        XmFontList old,
                        XmFontListEntry entry) ;
extern XmFontListEntry XmFontListEntryLoad(
                        Display *display,
                        char *fontName,
                        XmFontType type,
                        char *tag) ;
extern XmFontList XmFontListCreate(
                        XFontStruct *font,
                        XmStringCharSet charset) ;
extern XmFontList XmFontListCreate_r(
                        XFontStruct *font,
                        XmStringCharSet charset,
                        Widget wid) ;
extern XmFontList XmStringCreateFontList(
                        XFontStruct *font,
                        XmStringCharSet charset) ;
extern XmFontList XmStringCreateFontList_r(
                        XFontStruct *font,
                        XmStringCharSet charset,
                        Widget wid) ;
extern void XmFontListFree(
                        XmFontList fontlist) ;
extern XmFontList XmFontListAdd(
                        XmFontList old,
                        XFontStruct *font,
                        XmStringCharSet charset) ;
extern XmFontList XmFontListCopy(
                        XmFontList fontlist) ;
extern Boolean XmFontListInitFontContext(
                        XmFontContext *context,
                        XmFontList fontlist) ;
extern Boolean XmFontListGetNextFont(
                        XmFontContext context,
                        XmStringCharSet *charset,
                        XFontStruct **font) ;
extern void XmFontListFreeFontContext(
                        XmFontContext context) ;
extern XmString XmStringConcat(
                        XmString a,
                        XmString b) ;
extern XmString XmStringConcatAndFree(
   XmString a,
   XmString b) ;
extern XmString XmStringNConcat(
                        XmString first,
                        XmString second,
                        int n) ;
extern XmString XmStringCopy(
                        XmString string) ;
extern XmString XmStringNCopy(
                        XmString str,
                        int n) ;
extern Boolean XmStringByteCompare(
                        XmString a1,
                        XmString b1) ;
extern Boolean XmStringCompare(
                        XmString a,
                        XmString b) ;
extern int XmStringLength(
                        XmString string) ;
extern Boolean XmStringEmpty(
                        XmString string) ;
extern Boolean XmStringIsVoid(XmString string);
extern Boolean XmStringHasSubstring(
                        XmString string,
                        XmString substring) ;
extern void XmStringFree(
                        XmString string) ;
extern Dimension XmStringBaseline(
                        XmFontList fontlist,
                        XmString string) ;
extern Dimension XmStringWidth(
                        XmFontList fontlist,
                        XmString string) ;
extern Dimension XmStringHeight(
                        XmFontList fontlist,
                        XmString string) ;
extern void XmStringExtent(
                        XmFontList fontlist,
                        XmString string,
                        Dimension *width,
                        Dimension *height) ;
extern int XmStringLineCount(
                        XmString string) ;
extern void XmStringDraw(
                        Display *d,
                        Window w,
                        XmFontList fontlist,
                        XmString string,
                        GC gc,







                        Position x,
                        Position y,
                        Dimension width,
                        unsigned char align,
                        unsigned char lay_dir,

                        XRectangle *clip) ;
extern void XmStringDrawImage(
                        Display *d,
                        Window w,
                        XmFontList fontlist,
                        XmString string,
                        GC gc,







                        Position x,
                        Position y,
                        Dimension width,
                        unsigned char align,
                        unsigned char lay_dir,

                        XRectangle *clip) ;
extern void XmStringDrawUnderline(
                        Display *d,
                        Window w,
                        XmFontList fntlst,
                        XmString str,
                        GC gc,







                        Position x,
                        Position y,
                        Dimension width,
                        unsigned char align,
                        unsigned char lay_dir,

                        XRectangle *clip,
                        XmString under) ;
extern unsigned int XmCvtXmStringToByteStream(
   XmString string,
                 unsigned char **prop_return);
extern XmString XmCvtByteStreamToXmString(
                 unsigned char *property);
extern unsigned int XmStringByteStreamLength(unsigned char *string);
extern XmStringComponentType XmStringPeekNextTriple(XmStringContext context);
extern XmStringComponentType XmStringGetNextTriple(XmStringContext context,
         unsigned int *length,
         XtPointer *value);
extern XmString XmStringComponentCreate(XmStringComponentType tag,
     unsigned int length,
     XtPointer value);
extern XtPointer XmStringUnparse(XmString string,
     XmStringTag tag,
     XmTextType tag_type,
     XmTextType output_type,
     XmParseTable parse_table,
     Cardinal parse_count,
     XmParseModel parse_model);
extern XmString XmStringParseText(XtPointer text,
      XtPointer *text_end,
      XmStringTag tag,
      XmTextType type,
      XmParseTable parse_table,
      Cardinal parse_count,
      XtPointer call_data);
extern Cardinal XmStringToXmStringTable(XmString string,
     XmString break_comp,
     XmStringTable *table);
extern XmString XmStringTableToXmString(XmStringTable table,
     Cardinal count,
     XmString break_component);
extern XtPointer *XmStringTableUnparse(XmStringTable table,
           Cardinal count,
           XmStringTag tag,
           XmTextType tag_type,
           XmTextType output_type,
           XmParseTable parse,
           Cardinal parse_count,
           XmParseModel parse_model);
extern XmStringTable XmStringTableParseStringArray(XtPointer *strings,
         Cardinal count,
         XmStringTag tag,
         XmTextType type,
         XmParseTable parse,
         Cardinal parse_count,
         XtPointer call_data);

extern XmStringDirection XmDirectionToStringDirection(XmDirection dir);
extern XmDirection XmStringDirectionToDirection(XmStringDirection dir);

extern XmString XmStringGenerate(XtPointer text,
     XmStringTag tag,
     XmTextType type,
     XmStringTag rendition);
extern XmString XmStringPutRendition(XmString string,
         XmStringTag rendition);

extern XmParseMapping XmParseMappingCreate(ArgList arg_list,
        Cardinal arg_count);
extern void XmParseMappingSetValues(XmParseMapping parse_mapping,
        ArgList arg_list,
        Cardinal arg_count);
extern void XmParseMappingGetValues(XmParseMapping parse_mapping,
        ArgList arg_list,
        Cardinal arg_count);
extern void XmParseMappingFree(XmParseMapping parse_mapping);
extern void XmParseTableFree(XmParseTable parse_table,
        Cardinal parse_count);





extern XmTabList
  XmStringTableProposeTablist(XmStringTable strings,
         Cardinal num_strings,
         Widget widget,
         float pad_value,
         XmOffsetModel offset_model);
extern void XmTabSetValue(XmTab xmtab, float value);
extern float
  XmTabGetValues(XmTab xmtab,
   unsigned char *units,
   XmOffsetModel *offset,
   unsigned char *alignment,
   char **decimal);
extern void XmTabFree(XmTab xmtab);
extern XmTab XmTabCreate(float value,
    unsigned char units,
    XmOffsetModel offset_model,
    unsigned char alignment,
    char *decimal);
extern XmTabList
  XmTabListRemoveTabs(XmTabList oldlist,
        Cardinal *position_list,
        Cardinal position_count);
extern XmTabList
  XmTabListReplacePositions(XmTabList oldlist,
       Cardinal *position_list,
       XmTab *tabs,
       Cardinal tab_count);
extern XmTab XmTabListGetTab(XmTabList tablist, Cardinal position);
extern Cardinal XmTabListTabCount(XmTabList tablist);
extern XmTabList XmTabListCopy(XmTabList tablist, int offset, Cardinal count);
extern void XmTabListFree(XmTabList tablist);
extern XmTabList XmTabListInsertTabs(XmTabList oldlist,
         XmTab *tabs,
         Cardinal tab_count,
         int position);




extern XmRenderTable XmRenderTableCvtFromProp(Widget, char *prop, unsigned int len);
extern unsigned int XmRenderTableCvtToProp(Widget, XmRenderTable table, char **prop_return);
extern void XmRenditionUpdate(XmRendition rendition, ArgList arglist, Cardinal argcount);
extern void XmRenditionRetrieve(XmRendition rendition,
    ArgList arglist,
    Cardinal argcount);
extern void XmRenditionFree(XmRendition rendition);
extern XmRendition XmRenditionCreate(Widget widget,
         XmStringTag tag,
         ArgList arglist,
         Cardinal argcount);
extern XmRendition
  *XmRenderTableGetRenditions(XmRenderTable table,
         XmStringTag *tags,
         Cardinal tag_count);
extern XmRendition XmRenderTableGetRendition(XmRenderTable table,
          XmStringTag tag);
extern int XmRenderTableGetTags(XmRenderTable table,
    XmStringTag **tag_list);
extern void XmRenderTableFree(XmRenderTable table);
extern XmRenderTable XmRenderTableCopy(XmRenderTable table,
           XmStringTag *tags,
           int tag_count);
extern XmRenderTable
  XmRenderTableRemoveRenditions(XmRenderTable oldtable,
    XmStringTag *tags,
    int tag_count);
extern XmRenderTable
  XmRenderTableAddRenditions(XmRenderTable oldtable,
        XmRendition *renditions,
        Cardinal rendition_count,
        XmMergeMode merge_mode);





extern Widget XmGetDestination(
                        Display *display) ;





extern Boolean XmIsTraversable(
                        Widget wid) ;
extern XmVisibility XmGetVisibility(
                        Widget wid) ;
extern Widget XmGetTabGroup(
                        Widget wid) ;
extern Widget XmGetFocusWidget(
                        Widget wid) ;
extern Boolean XmProcessTraversal(
                        Widget w,
                        XmTraversalDirection dir) ;
extern void XmAddTabGroup(
                        Widget tabGroup) ;
extern void XmRemoveTabGroup(
                        Widget w) ;
# 2041 "/usr/include/Xm/Xm.h" 3 4
# 1 "/usr/include/Xm/VendorS.h" 1 3 4
# 62 "/usr/include/Xm/VendorS.h" 3 4
typedef struct _XmVendorShellRec *XmVendorShellWidget;
typedef struct _XmVendorShellClassRec *XmVendorShellWidgetClass;
extern WidgetClass vendorShellWidgetClass;




extern Boolean XmIsMotifWMRunning(
                        Widget shell) ;
extern Widget XmToolTipGetLabel(Widget wid);
# 2042 "/usr/include/Xm/Xm.h" 2 3 4
# 1 "/usr/include/Xm/XmIm.h" 1 3 4
# 51 "/usr/include/Xm/XmIm.h" 3 4
extern void XmImRegister(
                        Widget w,
   unsigned int reserved) ;
extern void XmImUnregister(
                        Widget w) ;
extern void XmImSetFocusValues(
                        Widget w,
                        ArgList args,
                        Cardinal num_args) ;
extern void XmImSetValues(
                        Widget w,
                        ArgList args,
                        Cardinal num_args) ;
extern void XmImUnsetFocus(
                        Widget w) ;
extern XIM XmImGetXIM(
                        Widget w) ;
extern void XmImCloseXIM(
                        Widget w) ;

extern int XmImMbLookupString(
                        Widget w,
                        XKeyPressedEvent *event,
                        char *buf,
                        int nbytes,
                        KeySym *keysym,
                        int *status) ;
extern void XmImVaSetFocusValues(
                        Widget w,
                        ...) ;
extern void XmImVaSetValues(
                        Widget w,
                        ...) ;
extern XIC XmImGetXIC(
          Widget w,



          XmInputPolicy input_policy,

          ArgList args,
          Cardinal num_args) ;
extern XIC XmImSetXIC(
   Widget w,
   XIC input_context) ;
extern void XmImFreeXIC(
   Widget w,
   XIC input_context) ;

extern void XmImMbResetIC(
   Widget w,
   char **mb);
# 2043 "/usr/include/Xm/Xm.h" 2 3 4






enum {
  XmINDICATOR_NONE = 0,
  XmINDICATOR_FILL = 1,
  XmINDICATOR_BOX = 255,
  XmINDICATOR_CHECK = 0x10,
  XmINDICATOR_CHECK_BOX = 0x10 + 0x01,
  XmINDICATOR_CROSS = 0x20,
  XmINDICATOR_CROSS_BOX = 0x20 + 0x01
};

enum { XmUNSET, XmSET, XmINDETERMINATE };
enum { XmTOGGLE_BOOLEAN, XmTOGGLE_INDETERMINATE };
typedef unsigned char XmToggleButtonState;


typedef enum { EditDone, EditError, EditReject } XmTextStatus;


enum { XmEXTERNAL_HIGHLIGHT, XmINTERNAL_HIGHLIGHT };




enum { XmPATH_MODE_FULL, XmPATH_MODE_RELATIVE };
enum { XmFILTER_NONE, XmFILTER_HIDDEN_FILES} ;
# 49 "../include/gui_def.h" 2
# 73 "../include/gui_def.h"
# 1 "../include/catalog.h" 1
# 44 "../include/catalog.h"
# 1 "/usr/include/nl_types.h" 1 3 4
# 31 "/usr/include/nl_types.h" 3 4



typedef void *nl_catd;


typedef int nl_item;





extern nl_catd catopen (__const char *__cat_name, int __flag) __attribute__ ((__nonnull__ (1)));



extern char *catgets (nl_catd __catalog, int __set, int __number,
        __const char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int catclose (nl_catd __catalog) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


# 45 "../include/catalog.h" 2


typedef struct catalog_ref
{
    int set;
    int message;
    char *fallback;
} catalog_ref;
# 101 "../include/catalog.h"
extern nl_catd catalog;



extern char **catgetrefvec (catalog_ref *, int);
# 74 "../include/gui_def.h" 2



# 1 "../include/zm_ask.h" 1
# 11 "../include/zm_ask.h"
# 1 "../include/error.h" 1
# 17 "../include/error.h"
typedef enum {
    SysErrFatal,
    SysErrWarning,
    ZmErrFatal,
    ZmErrWarning,
    UserErrFatal,
    UserErrWarning,
    QueryChoice,
    QueryWarning,
    HelpMessage,
    Message,
    UrgentMessage,
    ForcedMessage
} PromptReason;

extern void error (PromptReason, const char *, ...);
# 12 "../include/zm_ask.h" 2
# 31 "../include/zm_ask.h"
typedef enum AskAnswer {
    AskUnknown,
    AskYes,
    AskNo,
    AskOk,
    AskCancel,
    WarnYes,
    WarnNo,
    WarnOk,
    WarnCancel

    , SendSplit,
    SendWhole,
    SendCancel

} AskAnswer;

extern AskAnswer ask (AskAnswer, const char *, ...);



extern AskAnswer gui_ask (AskAnswer, const char *);
extern void gui_error (PromptReason, const char *);
# 78 "../include/gui_def.h" 2
# 104 "../include/gui_def.h"
typedef Widget GuiItem;
extern XtAppContext app;
extern Display *display;



extern GuiItem tool;


struct FrameDataRec;
struct mfolder;
struct Compose;
struct options;
struct mgroup;
struct zmButton;
struct zmButtonList;


extern GuiItem ask_item;

typedef struct {
    char action[64];
    int uses_list;
} UserAction;

typedef struct {
  char *label;
  void (*callback)();
  VPTR data;
} ActionAreaItem;


typedef struct {
    char *var;
    Pixmap pixmap;
    int default_width, default_height;
    unsigned char *default_bits;
    char *filename;
} ZcIcon;

extern Pixmap standard_pixmaps[];
# 154 "../include/gui_def.h"
typedef enum {
    ClearSearch,
    FindNext,
    FindAll,
    ReplaceNext,
    ReplaceAll
} SearchAction;







typedef struct SearchData {



    GuiItem last_textw;
    char *last_value;
    GuiItem search_w;
    GuiItem repl_w;
    GuiItem label_w;
    GuiItem list_w;
    GuiItem wrap_w;

    unsigned long flags;
} SearchData;


typedef enum {
    ViewMsg,
    ViewNext,
    ViewPrev,
    ViewPinMsg,
    ViewSubject,
    ViewAuthor,
    ViewMsgId
} ViewMenuData;


extern void view_callback (void);



typedef unsigned char GuiCritical;

extern void gui_critical_begin (GuiCritical *);
extern void gui_critical_end (const GuiCritical *);
# 211 "../include/gui_def.h"
extern Boolean
    OpenFile (GuiItem, char *, int),
    SaveFile (GuiItem, char *, char *, int),
    LoadComposition (struct Compose *),
    SaveComposition (struct Compose *, int);


extern char
    *tool_help;

extern int
    gui_execute (const char *, char **, const char *, long, int),
    gui_execute_using_sh (char **, const char *, long, int),
    gui_edmail (int, int, char *, struct Compose *),
    gui_dialog (char *),
    gui_get_state (int),
    gui_open_compose (GuiItem, struct Compose *),
    gui_set_hdrs (GuiItem, struct Compose *),
    gui_help (const char *, unsigned long),
    gui_is_open (void);


extern int gui_cmd_line (const char *, struct FrameDataRec *);
extern void gui_select_hdrs (GuiItem, struct FrameDataRec *);

enum PainterDisposition {
    PainterSave,
    PainterSaveForced,
    PainterLoad
};

extern void gui_save_state (enum PainterDisposition);






extern void
    gui_clean_compose (int),
    gui_install_button (struct zmButton *, struct zmButtonList *),
    gui_edit_external (int, char *, char *),

    gui_check_mail (void),

    gui_clear_hdrs (struct mfolder *),
    gui_request_receipt (struct Compose *, int, char *),
    gui_request_priority (struct Compose *, const char *),
    gui_flush_hdr_cache (struct mfolder *),
    gui_end_edit (struct Compose *),
    gui_main_loop (void),
    gui_new_hdrs (struct mfolder *, int),
    gui_open_folder (struct mfolder *),
    gui_print_status (const char *),
    gui_redraw_hdr_items (GuiItem, struct mgroup *, int),
    gui_redraw_hdrs (struct mfolder *, struct mgroup *),
    gui_refresh (struct mfolder *, unsigned long),
    gui_restore_compose (int),
    gui_sort_mail (GuiItem, char *),
    gui_title (char *),
    gui_update_list (struct options **),
    gui_wait_for_child (int, const char *, long),
    gui_watch_filed (int, int, unsigned long, char *),




    gui_cleanup (void),
    gui_open_folder (struct mfolder *),
    gui_close_folder (struct mfolder *, int),
    gui_update_cache (struct mfolder *, struct mgroup *),
    rename_in_reopen_dialog (const char *, const char *);

extern int gui_redraw (int, char **, struct mgroup *);
extern AskAnswer gui_confirm_addresses (struct Compose *);

extern void wprint (const char *, ...);
# 318 "../include/gui_def.h"
enum gui_state_items {
    GSTATE_IS_NEXT,
    GSTATE_IS_PREV,
    GSTATE_PINUP,
    GSTATE_ATTACHMENTS,
    GSTATE_ACTIVE_COMP,
    GSTATE_PLAIN_TEXT,
    GSTATE_PHONETAG,
    GSTATE_TAGIT
};
# 31 "../include/zmail.h" 2
# 1 "../shell/linklist.h" 1
# 74 "../shell/linklist.h"
# 1 "../include/zctype.h" 1
# 75 "../shell/linklist.h" 2

# 1 "../general/general.h" 1
# 77 "../shell/linklist.h" 2




struct link {
    char *l_name;
    struct link *l_next;
    struct link *l_prev;
};





extern struct link
    *copy_all_links (CVPTR, struct link *(*)()),
    *retrieve_link (CVPTR, CVPTR, int (*)()),
    *find_link (CVPTR, CVPTR, int (*)()),
    *retrieve_nth_link (CVPTR, int);
extern void
    insert_link (VPTR, VPTR),
    insert_sorted_link (VPTR, VPTR, int (*)()),
    multi_link (VPTR, VPTR, VPTR),
    push_link (VPTR, VPTR),
    remove_link (VPTR, VPTR);
extern int
    number_of_links (CVPTR);
# 32 "../include/zmail.h" 2
# 1 "../shell/vars.h" 1
# 11 "../shell/vars.h"
# 1 "../shell/linklist.h" 1
# 12 "../shell/vars.h" 2

# 1 "../include/zccmac.h" 1





# 1 "../include/zcstr.h" 1
# 18 "../include/zcstr.h"
# 1 "/usr/include/strings.h" 1 3 4
# 19 "../include/zcstr.h" 2
# 7 "../include/zccmac.h" 2
# 14 "../shell/vars.h" 2


extern int autosave_ct;
# 44 "../shell/vars.h"
typedef struct {
    char *v_label;
    char *v_description;
    long v_desc_pos;
} VarItem;

typedef struct Variable {
    struct link v_link;

    unsigned long v_flags;
    char *v_default;
    unsigned int v_num_vals;

    VarItem *v_values;
    VarItem v_prompt;
    int v_gui_max;
    unsigned long v_category;
} Variable;

extern Variable *variables;
extern int n_variables;
# 77 "../shell/vars.h"
typedef enum {
    VT_Unknown,
    VT_AddressBook,
    VT_AddressCache,
    VT_AddressCheck,
    VT_AddressFilter,
    VT_AddressSort,



    VT_Alternates,
    VT_Alwaysexpand,
    VT_Alwaysignore,
    VT_AlwaysSendSpooled,
    VT_AlwaysShowTaskm,
    VT_AlwaysSort,
    VT_Ask,
    VT_Askbcc,
    VT_Askcc,
    VT_Asksub,
    VT_AttachLabel,
    VT_AttachPrune,
    VT_AttachTypes,
    VT_AutoRoute,
    VT_Autoclear,
    VT_Autodismiss,
    VT_Autodisplay,
    VT_Autoedit,
    VT_Autoformat,
    VT_Autoiconify,
    VT_Autoinclude,
    VT_Autopinup,
    VT_Autoprint,
    VT_AutosaveCount,
    VT_Autosend,
    VT_Autosign,
    VT_Autosign2,
    VT_Autotyper,
    VT_Baud,
    VT_BlinkTime,
    VT_Cdpath,
    VT_Child,
    VT_CmdHelp,
    VT_ColorsDB,
    VT_CompAttachLabel,
    VT_CompStatusBarFmt,
    VT_Complete,
    VT_ComposeLines,
    VT_ComposePanes,
    VT_Connected,
    VT_ConnectType,
    VT_Crt,
    VT_CrtWin,
    VT_Cwd,
    VT_DateReceived,
    VT_Dead,
    VT_Deletesave,
    VT_DetachDir,
    VT_DisplayCharset,
    VT_DisplayHeaders,
    VT_DomainRoute,
    VT_Dot,
    VT_DotLock,
    VT_EditHdrs,
    VT_Editor,
    VT_Escape,
    VT_ExitSaveopts,
    VT_ExpireCache,
    VT_ExtSummaryFmt,
    VT_FetchTimeout,
    VT_Fignore,
    VT_Filec,
    VT_FileCharset,
    VT_FilelistFmt,
    VT_FileTest,
    VT_FirstPartPrimary,
    VT_FkeyLabels,
    VT_Folder,
    VT_FolderTitle,
    VT_FolderType,
    VT_FontsDB,
    VT_Fortunates,
    VT_Fortune,
    VT_FromAddress,
    VT_FullscreenHelp,
    VT_FunctionHelp,
    VT_GuiHelp,
    VT_Hangup,
    VT_HeaderEncoding,
    VT_HdrFormat,
    VT_Hidden,
    VT_History,
    VT_Hold,
    VT_Home,
    VT_Hostname,
    VT_IgnoreBang,
    VT_Ignoreeof,

    VT_ImapCache,
    VT_ImapShared,
    VT_ImapSynchronize,
    VT_ImapTimeout,
    VT_ImapUser,
    VT_ImapNoPrompt,

    VT_InReplyTo,
    VT_IncomingCharset,
    VT_IndentStr,
    VT_IndexDir,
    VT_IndexSize,
    VT_IntrLevel,
    VT_Ispeller,
    VT_Keepsave,
    VT_KnownHosts,
    VT_LayoutDB,
    VT_LdapService,
    VT_Logfile,
    VT_LookupCharset,
    VT_LookupFile,
    VT_LookupHostIp,
    VT_LookupMax,
    VT_LookupMode,
    VT_LookupSep,
    VT_LookupService,
    VT_Mailhost,
    VT_MailIcon,
    VT_MailQueue,
    VT_MailboxName,
    VT_MainFolderTitle,
    VT_MainPanes,
    VT_MainStatusBarFmt,
    VT_MaxTextLength,
    VT_Mbox,
    VT_MessageField,
    VT_MessageLines,
    VT_MessagePanes,
    VT_Metoo,
    VT_MilTime,
    VT_MsgAttachLabel,
    VT_MsgSeparator,
    VT_MsgStatusBarFmt,
    VT_MsgWin,
    VT_MsgWinHdrFmt,
    VT_Name,
    VT_Newline,
    VT_NewmailIcon,
    VT_NewmailScroll,
    VT_NoExpand,
    VT_NoHdrs,
    VT_NoReverse,
    VT_Nonobang,
    VT_Nosave,
    VT_Organization,
    VT_OutgoingCharset,
    VT_Output,
    VT_Pager,
    VT_PickyMta,
    VT_PopOptions,
    VT_PopTimeout,
    VT_PopUser,
    VT_PostIndentStr,
    VT_PreIndentStr,
    VT_Presign,
    VT_PrintCmd,
    VT_Printer,
    VT_PrinterCharset,
    VT_PrinterOpt,
    VT_Prompt,
    VT_Quiet,
    VT_Realname,
    VT_Record,
    VT_RecordControl,
    VT_RecordMax,
    VT_RecordUsers,
    VT_Recursive,
    VT_ReplyToHdr,
    VT_SaveEmpty,
    VT_Screen,
    VT_ScreenWin,
    VT_Scrollpct,
    VT_Sendmail,
    VT_Shell,
    VT_ShowDeleted,
    VT_Smtphost,
    VT_Sort,
    VT_Speller,

    VT_SplitLimit,
    VT_SplitSendmail,
    VT_SplitSize,

    VT_Squeeze,
    VT_Status,
    VT_StatusBarFmt,
    VT_SummaryFmt,
    VT_SummaryLines,
    VT_Templates,
    VT_TextpartCharset,
    VT_Thisfolder,
    VT_Timeout,
    VT_Title,
    VT_Tmpdir,



    VT_ToolHelp,
    VT_Toplines,
    VT_TrustedFunctions,
    VT_Unix,
    VT_UseContentLength,

    VT_UseImap,

    VT_UseLdap,
    VT_UsePop,
    VT_User,
    VT_UucpRoot,
    VT_Verbose,
    VT_Verify,
    VT_Visual,
    VT_Warning,
    VT_WindowShell,
    VT_Wineditor,
    VT_Winterm,
    VT_Wrap,
    VT_Wrapcolumn,
    VT_Zynchost,
    VT_ZyncOptions,
    VT_ZyncUser,
    VT_TotalIndices
} VT_Map;
# 316 "../shell/vars.h"
typedef struct {
    Variable vt_default;


    VT_Map vt_synonym;



} VT_Rec;

extern VT_Rec var_table[];
# 33 "../include/zmail.h" 2


# 1 "../include/zctime.h" 1
# 16 "../include/zctime.h"
# 1 "/usr/include/sys/time.h" 1 3 4
# 27 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 28 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4

# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) __attribute__ ((__nothrow__));
# 191 "/usr/include/sys/time.h" 3 4

# 17 "../include/zctime.h" 2





# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__));

# 217 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__));
# 230 "/usr/include/time.h" 3 4



extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__));





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__));



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__));







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__));


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__));



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) __attribute__ ((__nothrow__));
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__));


extern int dysize (int __year) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__));


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     __attribute__ ((__nothrow__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__));


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__));
# 417 "/usr/include/time.h" 3 4

# 23 "../include/zctime.h" 2
# 53 "../include/zctime.h"
# 1 "/usr/include/utime.h" 1 3 4
# 28 "/usr/include/utime.h" 3 4

# 38 "/usr/include/utime.h" 3 4
struct utimbuf
  {
    __time_t actime;
    __time_t modtime;
  };



extern int utime (__const char *__file,
    __const struct utimbuf *__file_times)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


# 54 "../include/zctime.h" 2
# 36 "../include/zmail.h" 2
# 1 "../include/zccmac.h" 1
# 37 "../include/zmail.h" 2

# 1 "../include/zmtty.h" 1
# 34 "../include/zmtty.h"
# 1 "../include/zcfctl.h" 1
# 19 "../include/zcfctl.h"
# 1 "/usr/include/sys/ioctl.h" 1 3 4
# 24 "/usr/include/sys/ioctl.h" 3 4



# 1 "/usr/include/bits/ioctls.h" 1 3 4
# 24 "/usr/include/bits/ioctls.h" 3 4
# 1 "/usr/include/asm/ioctls.h" 1 3 4



# 1 "/usr/include/asm/ioctl.h" 1 3 4
# 1 "/usr/include/asm-generic/ioctl.h" 1 3 4
# 1 "/usr/include/asm/ioctl.h" 2 3 4
# 5 "/usr/include/asm/ioctls.h" 2 3 4
# 25 "/usr/include/bits/ioctls.h" 2 3 4
# 28 "/usr/include/sys/ioctl.h" 2 3 4


# 1 "/usr/include/bits/ioctl-types.h" 1 3 4
# 28 "/usr/include/bits/ioctl-types.h" 3 4
struct winsize
  {
    unsigned short int ws_row;
    unsigned short int ws_col;
    unsigned short int ws_xpixel;
    unsigned short int ws_ypixel;
  };


struct termio
  {
    unsigned short int c_iflag;
    unsigned short int c_oflag;
    unsigned short int c_cflag;
    unsigned short int c_lflag;
    unsigned char c_line;
    unsigned char c_cc[8];
};
# 31 "/usr/include/sys/ioctl.h" 2 3 4






# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 38 "/usr/include/sys/ioctl.h" 2 3 4




extern int ioctl (int __fd, unsigned long int __request, ...) __attribute__ ((__nothrow__));


# 20 "../include/zcfctl.h" 2
# 35 "../include/zmtty.h" 2
# 49 "../include/zmtty.h"
# 1 "/usr/include/termios.h" 1 3 4
# 36 "/usr/include/termios.h" 3 4




# 1 "/usr/include/bits/termios.h" 1 3 4
# 25 "/usr/include/bits/termios.h" 3 4
typedef unsigned char cc_t;
typedef unsigned int speed_t;
typedef unsigned int tcflag_t;


struct termios
  {
    tcflag_t c_iflag;
    tcflag_t c_oflag;
    tcflag_t c_cflag;
    tcflag_t c_lflag;
    cc_t c_line;
    cc_t c_cc[32];
    speed_t c_ispeed;
    speed_t c_ospeed;


  };
# 41 "/usr/include/termios.h" 2 3 4
# 49 "/usr/include/termios.h" 3 4
extern speed_t cfgetospeed (__const struct termios *__termios_p) __attribute__ ((__nothrow__));


extern speed_t cfgetispeed (__const struct termios *__termios_p) __attribute__ ((__nothrow__));


extern int cfsetospeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__));


extern int cfsetispeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__));



extern int cfsetspeed (struct termios *__termios_p, speed_t __speed) __attribute__ ((__nothrow__));




extern int tcgetattr (int __fd, struct termios *__termios_p) __attribute__ ((__nothrow__));



extern int tcsetattr (int __fd, int __optional_actions,
        __const struct termios *__termios_p) __attribute__ ((__nothrow__));




extern void cfmakeraw (struct termios *__termios_p) __attribute__ ((__nothrow__));



extern int tcsendbreak (int __fd, int __duration) __attribute__ ((__nothrow__));





extern int tcdrain (int __fd);



extern int tcflush (int __fd, int __queue_selector) __attribute__ ((__nothrow__));



extern int tcflow (int __fd, int __action) __attribute__ ((__nothrow__));
# 105 "/usr/include/termios.h" 3 4
# 1 "/usr/include/sys/ttydefaults.h" 1 3 4
# 106 "/usr/include/termios.h" 2 3 4



# 50 "../include/zmtty.h" 2




typedef struct termios ZTTY_t;
# 78 "../include/zmtty.h"
# 1 "/usr/include/curses.h" 1 3 4
# 60 "/usr/include/curses.h" 3 4
# 1 "/usr/include/ncurses_dll.h" 1 3 4
# 61 "/usr/include/curses.h" 2 3 4
# 137 "/usr/include/curses.h" 3 4
typedef unsigned long chtype;
typedef unsigned long mmask_t;
# 165 "/usr/include/curses.h" 3 4
typedef unsigned char NCURSES_BOOL;
# 175 "/usr/include/curses.h" 3 4
# 1 "/usr/lib/gcc/i486-linux-gnu/4.4.1/include/stdbool.h" 1 3 4
# 176 "/usr/include/curses.h" 2 3 4
# 231 "/usr/include/curses.h" 3 4
extern chtype acs_map[];
# 321 "/usr/include/curses.h" 3 4
typedef struct screen SCREEN;
typedef struct _win_st WINDOW;

typedef chtype attr_t;
# 369 "/usr/include/curses.h" 3 4
struct ldat;

struct _win_st
{
 short _cury, _curx;


 short _maxy, _maxx;
 short _begy, _begx;

 short _flags;


 attr_t _attrs;
 chtype _bkgd;


 _Bool _notimeout;
 _Bool _clear;
 _Bool _leaveok;
 _Bool _scroll;
 _Bool _idlok;
 _Bool _idcok;
 _Bool _immed;
 _Bool _sync;
 _Bool _use_keypad;
 int _delay;

 struct ldat *_line;


 short _regtop;
 short _regbottom;


 int _parx;
 int _pary;
 WINDOW *_parent;


 struct pdat
 {
     short _pad_y, _pad_x;
     short _pad_top, _pad_left;
     short _pad_bottom, _pad_right;
 } _pad;

 short _yoffset;







};
# 523 "/usr/include/curses.h" 3 4
typedef int (*NCURSES_OUTC)(int);
# 532 "/usr/include/curses.h" 3 4
extern int addch (const chtype);
extern int addchnstr (const chtype *, int);
extern int addchstr (const chtype *);
extern int addnstr (const char *, int);
extern int addstr (const char *);
extern int attroff (int);
extern int attron (int);
extern int attrset (int);
extern int attr_get (attr_t *, short *, void *);
extern int attr_off (attr_t, void *);
extern int attr_on (attr_t, void *);
extern int attr_set (attr_t, short, void *);
extern int baudrate (void);
extern int beep (void);
extern int bkgd (chtype);
extern void bkgdset (chtype);
extern int border (chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);
extern int box (WINDOW *, chtype, chtype);
extern _Bool can_change_color (void);
extern int cbreak (void);
extern int chgat (int, attr_t, short, const void *);
extern int clear (void);
extern int clearok (WINDOW *,_Bool);
extern int clrtobot (void);
extern int clrtoeol (void);
extern int color_content (short,short*,short*,short*);
extern int color_set (short,void*);
extern int COLOR_PAIR (int);
extern int copywin (const WINDOW*,WINDOW*,int,int,int,int,int,int,int);
extern int curs_set (int);
extern int def_prog_mode (void);
extern int def_shell_mode (void);
extern int delay_output (int);
extern int delch (void);
extern void delscreen (SCREEN *);
extern int delwin (WINDOW *);
extern int deleteln (void);
extern WINDOW * derwin (WINDOW *,int,int,int,int);
extern int doupdate (void);
extern WINDOW * dupwin (WINDOW *);
extern int echo (void);
extern int echochar (const chtype);
extern int erase (void);
extern int endwin (void);
extern char erasechar (void);
extern void filter (void);
extern int flash (void);
extern int flushinp (void);
extern chtype getbkgd (WINDOW *);
extern int getch (void);
extern int getnstr (char *, int);
extern int getstr (char *);
extern WINDOW * getwin (FILE *);
extern int halfdelay (int);
extern _Bool has_colors (void);
extern _Bool has_ic (void);
extern _Bool has_il (void);
extern int hline (chtype, int);
extern void idcok (WINDOW *, _Bool);
extern int idlok (WINDOW *, _Bool);
extern void immedok (WINDOW *, _Bool);
extern chtype inch (void);
extern int inchnstr (chtype *, int);
extern int inchstr (chtype *);
extern WINDOW * initscr (void);
extern int init_color (short,short,short,short);
extern int init_pair (short,short,short);
extern int innstr (char *, int);
extern int insch (chtype);
extern int insdelln (int);
extern int insertln (void);
extern int insnstr (const char *, int);
extern int insstr (const char *);
extern int instr (char *);
extern int intrflush (WINDOW *,_Bool);
extern _Bool isendwin (void);
extern _Bool is_linetouched (WINDOW *,int);
extern _Bool is_wintouched (WINDOW *);
extern const char * keyname (int);
extern int keypad (WINDOW *,_Bool);
extern char killchar (void);
extern int leaveok (WINDOW *,_Bool);
extern char * longname (void);
extern int meta (WINDOW *,_Bool);
extern int move (int, int);
extern int mvaddch (int, int, const chtype);
extern int mvaddchnstr (int, int, const chtype *, int);
extern int mvaddchstr (int, int, const chtype *);
extern int mvaddnstr (int, int, const char *, int);
extern int mvaddstr (int, int, const char *);
extern int mvchgat (int, int, int, attr_t, short, const void *);
extern int mvcur (int,int,int,int);
extern int mvdelch (int, int);
extern int mvderwin (WINDOW *, int, int);
extern int mvgetch (int, int);
extern int mvgetnstr (int, int, char *, int);
extern int mvgetstr (int, int, char *);
extern int mvhline (int, int, chtype, int);
extern chtype mvinch (int, int);
extern int mvinchnstr (int, int, chtype *, int);
extern int mvinchstr (int, int, chtype *);
extern int mvinnstr (int, int, char *, int);
extern int mvinsch (int, int, chtype);
extern int mvinsnstr (int, int, const char *, int);
extern int mvinsstr (int, int, const char *);
extern int mvinstr (int, int, char *);
extern int mvprintw (int,int, const char *,...)
  ;
extern int mvscanw (int,int, const char *,...)
  ;
extern int mvvline (int, int, chtype, int);
extern int mvwaddch (WINDOW *, int, int, const chtype);
extern int mvwaddchnstr (WINDOW *, int, int, const chtype *, int);
extern int mvwaddchstr (WINDOW *, int, int, const chtype *);
extern int mvwaddnstr (WINDOW *, int, int, const char *, int);
extern int mvwaddstr (WINDOW *, int, int, const char *);
extern int mvwchgat (WINDOW *, int, int, int, attr_t, short, const void *);
extern int mvwdelch (WINDOW *, int, int);
extern int mvwgetch (WINDOW *, int, int);
extern int mvwgetnstr (WINDOW *, int, int, char *, int);
extern int mvwgetstr (WINDOW *, int, int, char *);
extern int mvwhline (WINDOW *, int, int, chtype, int);
extern int mvwin (WINDOW *,int,int);
extern chtype mvwinch (WINDOW *, int, int);
extern int mvwinchnstr (WINDOW *, int, int, chtype *, int);
extern int mvwinchstr (WINDOW *, int, int, chtype *);
extern int mvwinnstr (WINDOW *, int, int, char *, int);
extern int mvwinsch (WINDOW *, int, int, chtype);
extern int mvwinsnstr (WINDOW *, int, int, const char *, int);
extern int mvwinsstr (WINDOW *, int, int, const char *);
extern int mvwinstr (WINDOW *, int, int, char *);
extern int mvwprintw (WINDOW*,int,int, const char *,...)
  ;
extern int mvwscanw (WINDOW *,int,int, const char *,...)
  ;
extern int mvwvline (WINDOW *,int, int, chtype, int);
extern int napms (int);
extern WINDOW * newpad (int,int);
extern SCREEN * newterm (const char *,FILE *,FILE *);
extern WINDOW * newwin (int,int,int,int);
extern int nl (void);
extern int nocbreak (void);
extern int nodelay (WINDOW *,_Bool);
extern int noecho (void);
extern int nonl (void);
extern void noqiflush (void);
extern int noraw (void);
extern int notimeout (WINDOW *,_Bool);
extern int overlay (const WINDOW*,WINDOW *);
extern int overwrite (const WINDOW*,WINDOW *);
extern int pair_content (short,short*,short*);
extern int PAIR_NUMBER (int);
extern int pechochar (WINDOW *, const chtype);
extern int pnoutrefresh (WINDOW*,int,int,int,int,int,int);
extern int prefresh (WINDOW *,int,int,int,int,int,int);
extern int printw (const char *,...)
  ;
extern int putwin (WINDOW *, FILE *);
extern void qiflush (void);
extern int raw (void);
extern int redrawwin (WINDOW *);
extern int refresh (void);
extern int resetty (void);
extern int reset_prog_mode (void);
extern int reset_shell_mode (void);
extern int ripoffline (int, int (*)(WINDOW *, int));
extern int savetty (void);
extern int scanw (const char *,...)
  ;
extern int scr_dump (const char *);
extern int scr_init (const char *);
extern int scrl (int);
extern int scroll (WINDOW *);
extern int scrollok (WINDOW *,_Bool);
extern int scr_restore (const char *);
extern int scr_set (const char *);
extern int setscrreg (int,int);
extern SCREEN * set_term (SCREEN *);
extern int slk_attroff (const chtype);
extern int slk_attr_off (const attr_t, void *);
extern int slk_attron (const chtype);
extern int slk_attr_on (attr_t,void*);
extern int slk_attrset (const chtype);
extern attr_t slk_attr (void);
extern int slk_attr_set (const attr_t,short,void*);
extern int slk_clear (void);
extern int slk_color (short);
extern int slk_init (int);
extern char * slk_label (int);
extern int slk_noutrefresh (void);
extern int slk_refresh (void);
extern int slk_restore (void);
extern int slk_set (int,const char *,int);
extern int slk_touch (void);
extern int standout (void);
extern int standend (void);
extern int start_color (void);
extern WINDOW * subpad (WINDOW *, int, int, int, int);
extern WINDOW * subwin (WINDOW *, int, int, int, int);
extern int syncok (WINDOW *, _Bool);
extern chtype termattrs (void);
extern char * termname (void);
extern void timeout (int);
extern int touchline (WINDOW *, int, int);
extern int touchwin (WINDOW *);
extern int typeahead (int);
extern int ungetch (int);
extern int untouchwin (WINDOW *);
extern void use_env (_Bool);
extern int vidattr (chtype);
extern int vidputs (chtype, NCURSES_OUTC);
extern int vline (chtype, int);
extern int vwprintw (WINDOW *, const char *,va_list);
extern int vw_printw (WINDOW *, const char *,va_list);
extern int vwscanw (WINDOW *, const char *,va_list);
extern int vw_scanw (WINDOW *, const char *,va_list);
extern int waddch (WINDOW *, const chtype);
extern int waddchnstr (WINDOW *,const chtype *,int);
extern int waddchstr (WINDOW *,const chtype *);
extern int waddnstr (WINDOW *,const char *,int);
extern int waddstr (WINDOW *,const char *);
extern int wattron (WINDOW *, int);
extern int wattroff (WINDOW *, int);
extern int wattrset (WINDOW *, int);
extern int wattr_get (WINDOW *, attr_t *, short *, void *);
extern int wattr_on (WINDOW *, attr_t, void *);
extern int wattr_off (WINDOW *, attr_t, void *);
extern int wattr_set (WINDOW *, attr_t, short, void *);
extern int wbkgd (WINDOW *, chtype);
extern void wbkgdset (WINDOW *,chtype);
extern int wborder (WINDOW *,chtype,chtype,chtype,chtype,chtype,chtype,chtype,chtype);
extern int wchgat (WINDOW *, int, attr_t, short, const void *);
extern int wclear (WINDOW *);
extern int wclrtobot (WINDOW *);
extern int wclrtoeol (WINDOW *);
extern int wcolor_set (WINDOW*,short,void*);
extern void wcursyncup (WINDOW *);
extern int wdelch (WINDOW *);
extern int wdeleteln (WINDOW *);
extern int wechochar (WINDOW *, const chtype);
extern int werase (WINDOW *);
extern int wgetch (WINDOW *);
extern int wgetnstr (WINDOW *,char *,int);
extern int wgetstr (WINDOW *, char *);
extern int whline (WINDOW *, chtype, int);
extern chtype winch (WINDOW *);
extern int winchnstr (WINDOW *, chtype *, int);
extern int winchstr (WINDOW *, chtype *);
extern int winnstr (WINDOW *, char *, int);
extern int winsch (WINDOW *, chtype);
extern int winsdelln (WINDOW *,int);
extern int winsertln (WINDOW *);
extern int winsnstr (WINDOW *, const char *,int);
extern int winsstr (WINDOW *, const char *);
extern int winstr (WINDOW *, char *);
extern int wmove (WINDOW *,int,int);
extern int wnoutrefresh (WINDOW *);
extern int wprintw (WINDOW *, const char *,...)
  ;
extern int wredrawln (WINDOW *,int,int);
extern int wrefresh (WINDOW *);
extern int wscanw (WINDOW *, const char *,...)
  ;
extern int wscrl (WINDOW *,int);
extern int wsetscrreg (WINDOW *,int,int);
extern int wstandout (WINDOW *);
extern int wstandend (WINDOW *);
extern void wsyncdown (WINDOW *);
extern void wsyncup (WINDOW *);
extern void wtimeout (WINDOW *,int);
extern int wtouchln (WINDOW *,int,int,int);
extern int wvline (WINDOW *,chtype,int);




extern int tigetflag (const char *);
extern int tigetnum (const char *);
extern char * tigetstr (const char *);
extern int putp (const char *);


extern char * tparm (const char *, ...);
# 823 "/usr/include/curses.h" 3 4
extern int getattrs (const WINDOW *);
extern int getcurx (const WINDOW *);
extern int getcury (const WINDOW *);
extern int getbegx (const WINDOW *);
extern int getbegy (const WINDOW *);
extern int getmaxx (const WINDOW *);
extern int getmaxy (const WINDOW *);
extern int getparx (const WINDOW *);
extern int getpary (const WINDOW *);
# 846 "/usr/include/curses.h" 3 4
typedef int (*NCURSES_WINDOW_CB)(WINDOW *, void *);
typedef int (*NCURSES_SCREEN_CB)(SCREEN *, void *);
extern _Bool is_term_resized (int, int);
extern char * keybound (int, int);
extern const char * curses_version (void);
extern int assume_default_colors (int, int);
extern int define_key (const char *, int);
extern int get_escdelay (void);
extern int key_defined (const char *);
extern int keyok (int, _Bool);
extern int resize_term (int, int);
extern int resizeterm (int, int);
extern int set_escdelay (int);
extern int set_tabsize (int);
extern int use_default_colors (void);
extern int use_extended_names (_Bool);
extern int use_legacy_coding (int);
extern int use_screen (SCREEN *, NCURSES_SCREEN_CB, void *);
extern int use_window (WINDOW *, NCURSES_WINDOW_CB, void *);
extern int wresize (WINDOW *, int, int);
extern void nofilter(void);





extern WINDOW * wgetparent (const WINDOW *);
extern _Bool is_cleared (const WINDOW *);
extern _Bool is_idcok (const WINDOW *);
extern _Bool is_idlok (const WINDOW *);
extern _Bool is_immedok (const WINDOW *);
extern _Bool is_keypad (const WINDOW *);
extern _Bool is_leaveok (const WINDOW *);
extern _Bool is_nodelay (const WINDOW *);
extern _Bool is_notimeout (const WINDOW *);
extern _Bool is_scrollok (const WINDOW *);
extern _Bool is_syncok (const WINDOW *);
extern int wgetscrreg (const WINDOW *, int *, int *);
# 1325 "/usr/include/curses.h" 3 4
extern WINDOW * curscr;
extern WINDOW * newscr;
extern WINDOW * stdscr;
extern char ttytype[];
extern int COLORS;
extern int COLOR_PAIRS;
extern int COLS;
extern int ESCDELAY;
extern int LINES;
extern int TABSIZE;
# 1538 "/usr/include/curses.h" 3 4
typedef struct
{
    short id;
    int x, y, z;
    mmask_t bstate;
}
MEVENT;

extern _Bool has_mouse(void);
extern int getmouse (MEVENT *);
extern int ungetmouse (MEVENT *);
extern mmask_t mousemask (mmask_t, mmask_t *);
extern _Bool wenclose (const WINDOW *, int, int);
extern int mouseinterval (int);
extern _Bool wmouse_trafo (const WINDOW*, int*, int*, _Bool);
extern _Bool mouse_trafo (int*, int*, _Bool);
# 1567 "/usr/include/curses.h" 3 4
extern int mcprint (char *, int);
extern int has_key (int);
# 1577 "/usr/include/curses.h" 3 4
extern void _tracef (const char *, ...) ;
extern void _tracedump (const char *, WINDOW *);
extern char * _traceattr (attr_t);
extern char * _traceattr2 (int, chtype);
extern char * _nc_tracebits (void);
extern char * _tracechar (int);
extern char * _tracechtype (chtype);
extern char * _tracechtype2 (int, chtype);
# 1594 "/usr/include/curses.h" 3 4
extern char * _tracemouse (const MEVENT *);
extern void trace (const unsigned int);
# 1626 "/usr/include/curses.h" 3 4
# 1 "/usr/include/unctrl.h" 1 3 4
# 54 "/usr/include/unctrl.h" 3 4
# 1 "/usr/include/curses.h" 1 3 4
# 55 "/usr/include/unctrl.h" 2 3 4


 const char * unctrl (chtype);
# 1627 "/usr/include/curses.h" 2 3 4
# 79 "../include/zmtty.h" 2
# 202 "../include/zmtty.h"
extern unsigned char vmin, vtime;
# 288 "../include/zmtty.h"
extern ZTTY_t Ztty;
# 297 "../include/zmtty.h"
extern char
    del_line,
    del_word,
    del_char,
    reprint_line,
    eofc,
    lit_next,
    complete,
    complist;

extern void tty_settings (void);
# 39 "../include/zmail.h" 2
# 1 "../include/zmstring.h" 1
# 22 "../include/zmstring.h"
# 1 "../shell/zstrings.h" 1



char *reverse (char s[]);

char *no_newln (char *p);

char *any (const char *s1, const char *s2);

char *rany (const char *s1, const char *s2);
int chk_two_lists (const char *list1, const char *list2, const char *delimiters);







char *my_atoi (const char *p, int *val);

char *argv_to_string (register char *p, char **argv);

char *smart_argv_to_string (char *buf, char **argv, const char *chars_to_escape);
char *Sprintf (char *buf, const char *fmt, ...);
# 23 "../include/zmstring.h" 2

extern int stripq ( char ** );





extern int catv ( int, char ***, int, char ** );

extern char * ctrl_strcpy ( char *, char *, int );
extern void fmt_string ( char *, char *, int, int, int, int );


extern char * itoa ( int );


extern char * joinv ( char *, char **, const char * );

extern char * m_xlate ( char * );

extern void print_argv ( char ** );

extern void putstring ( char *, FILE * );
extern int re_glob ( char *, char *, int );


extern char * savestr ( const char * );


extern char * savestrn ( const char * , int );


extern char * strapp ( char **, const char * );

extern char * strcat ( char *, const char * );







extern int strcmp ( const char *, const char * );
extern char * strcpy ( char *, const char * );

extern int Strcpy ( char *, const char * );
extern int strnumcmp ( char **, char ** );

extern int strptrcmp ( const char **, const char ** );




extern char ** strvec ( const char *, const char *, int );

extern char ** unitp ( const char * );

extern char ** unitv ( const char * );
extern int vcat ( char ***, char ** );
extern int vcatstr ( char ***, const char * );
extern int vcpy ( char ***, char ** );
extern int vins ( char ***, char **, int );
extern char ** vavec ( char *, ... );
extern char ** vaptr ( char *, ... );
extern char *unhidestr ( int a, ... );

extern char ** vdup ( char ** );

extern char ** vindex ( char **, char * );
extern int vlen ( char ** );

extern char ** vvavec ( va_list );

extern char ** vvaptr ( va_list );
extern char * str_replace ( char **, const char * );
extern int vcmp (char **, char **);
# 40 "../include/zmail.h" 2
# 1 "../include/zmintr.h" 1






# 1 "../include/zmflag.h" 1
# 20 "../include/zmflag.h"
# 1 "../general/strcase.h" 1
# 12 "../general/strcase.h"
# 1 "../include/zcstr.h" 1
# 13 "../general/strcase.h" 2







# 1 "/usr/include/ctype.h" 1 3 4
# 30 "/usr/include/ctype.h" 3 4

# 48 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     __attribute__ ((__nothrow__)) __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     __attribute__ ((__nothrow__)) __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     __attribute__ ((__nothrow__)) __attribute__ ((__const));
# 96 "/usr/include/ctype.h" 3 4






extern int isalnum (int) __attribute__ ((__nothrow__));
extern int isalpha (int) __attribute__ ((__nothrow__));
extern int iscntrl (int) __attribute__ ((__nothrow__));
extern int isdigit (int) __attribute__ ((__nothrow__));
extern int islower (int) __attribute__ ((__nothrow__));
extern int isgraph (int) __attribute__ ((__nothrow__));
extern int isprint (int) __attribute__ ((__nothrow__));
extern int ispunct (int) __attribute__ ((__nothrow__));
extern int isspace (int) __attribute__ ((__nothrow__));
extern int isupper (int) __attribute__ ((__nothrow__));
extern int isxdigit (int) __attribute__ ((__nothrow__));



extern int tolower (int __c) __attribute__ ((__nothrow__));


extern int toupper (int __c) __attribute__ ((__nothrow__));








extern int isblank (int) __attribute__ ((__nothrow__));


# 142 "/usr/include/ctype.h" 3 4
extern int isascii (int __c) __attribute__ ((__nothrow__));



extern int toascii (int __c) __attribute__ ((__nothrow__));



extern int _toupper (int) __attribute__ ((__nothrow__));
extern int _tolower (int) __attribute__ ((__nothrow__));
# 247 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isalpha_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int iscntrl_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isdigit_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int islower_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isgraph_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isprint_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int ispunct_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isspace_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isupper_l (int, __locale_t) __attribute__ ((__nothrow__));
extern int isxdigit_l (int, __locale_t) __attribute__ ((__nothrow__));

extern int isblank_l (int, __locale_t) __attribute__ ((__nothrow__));



extern int __tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__));
extern int tolower_l (int __c, __locale_t __l) __attribute__ ((__nothrow__));


extern int __toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__));
extern int toupper_l (int __c, __locale_t __l) __attribute__ ((__nothrow__));
# 323 "/usr/include/ctype.h" 3 4

# 21 "../general/strcase.h" 2

extern int ci_strcmp (const char *, const char *);
extern int ci_strncmp (const char *, const char *, size_t);
extern int ci_istrcmp (const char *, const char *);
extern int ci_istrncmp (const char *, const char *, size_t);

extern int ci_identcmp (const char *, const char *);

extern char * ci_strcpy (register char *, register const char *);
extern char * ci_istrcpy (register char *, register const char *);

extern int ci_stringHash (const char *);
# 21 "../include/zmflag.h" 2
# 31 "../include/zmflag.h"
extern unsigned long
    glob_flags;
# 230 "../include/zmflag.h"
extern char *pri_names[31];


extern unsigned long pri_user_mask;


extern int pri_index (char *);
extern char *priority_string (int);
# 290 "../include/zmflag.h"
enum {
    HelpContext = ((unsigned long)1 << (unsigned long)(0)),
    HelpInterface = ((unsigned long)1 << (unsigned long)(1)),
    HelpNoComplain = ((unsigned long)1 << (unsigned long)(2)),
    HelpCommands = ((unsigned long)1 << (unsigned long)(3)),
    HelpContents = ((unsigned long)1 << (unsigned long)(4))
};
# 8 "../include/zmintr.h" 2
# 41 "../include/zmail.h" 2

# 1 "../include/zmopt.h" 1
# 13 "../include/zmopt.h"
typedef struct {
    struct link o_link;

    char *o_list;
    char *o_value;
    char **o_argv;
    int o_argc;
    unsigned long o_flags;
} Option;
# 31 "../include/zmopt.h"
struct options {
    char *option;
    char *value;
    struct options *next, *prev;
};
extern struct options
    *set_options,
    *aliases,
    *ignore_hdr,
    *show_hdr,
    *cmdsubs,
    *filters,
    *fkeys,
    *own_hdrs;
extern struct options *optlist_fetch (struct options **list, const char *str);
extern void optlist_sort (struct options **);
extern struct thread_hashtab *optlist2tht (struct options **);
extern void tht_thread (struct thread_hashtab *, struct options **);





extern int bool_option (const char *, const char *);
extern int chk_two_lists (const char *, const char *, const char *);

extern char *zm_set (struct options **, const char *);
# 43 "../include/zmail.h" 2

# 1 "../shell/refresh.h" 1
# 9 "../shell/refresh.h"
# 1 "../include/zmopt.h" 1
# 10 "../shell/refresh.h" 2
# 1 "../include/callback.h" 1
# 10 "../include/callback.h"
typedef struct zmCallbackList {
    const char *name;
    int type;
    struct zmCallback *list;
} zmCallbackList;

typedef struct zmCallback {
    struct link c_link;
    struct zmCallback *chain;
    zmCallbackList *parent;
    void (*routine)();
    char *data;
} zmCallback;

typedef struct zmCallbackData {
    int event;
    VPTR xdata;
} zmCallbackData;
# 48 "../include/callback.h"
typedef struct zmCallback *ZmCallback;
typedef struct zmCallbackList *ZmCallbackList;
typedef struct zmCallbackData *ZmCallbackData;

ZmCallback ZmCallbackAdd (const char *, int, void (*)(), VPTR);
void ZmCallbackCallAll (const char *, int, int, VPTR);
void ZmCallbackRemove (ZmCallback);
# 11 "../shell/refresh.h" 2


extern char using_pop;
extern char pop_initialized;


extern void using_pop_cb (char *, ZmCallbackData);



extern char using_imap;
extern char imap_initialized;
extern void using_imap_cb (char *, ZmCallbackData);
# 32 "../shell/refresh.h"
typedef struct ftrack {
    struct link ft_link;

    long ft_mtime;
    long ft_size;
    void_proc ft_call;
    VPTR ft_data;
} Ftrack;

extern Ftrack *global_ftlist_head, **global_ftlist;

extern void ftrack_Init( );
extern Ftrack *ftrack_CreateStat( );
extern Ftrack *ftrack_Create( );
extern int ftrack_Do( );
extern int ftrack_Stat( );
extern int ftrack_Add( );
extern Ftrack *ftrack_Get( );
extern void ftrack_Destroy( );
extern int ftrack_Del( );
extern int ftrack_CheckFile( );
extern void ftrack_CheckAll( );
# 64 "../shell/refresh.h"
typedef enum {
    DeferredBuiltin,
    DeferredCommand,
    DeferredFileCheck,
    DeferredFileOp,
    DeferredSigFunc,
    DeferredSigTrap,
    DeferredSpecial
} DA_type;

typedef struct deferred_action {
    union {



 struct link link;
 Option option;
 Ftrack ftrack;
    } da_u;



    DA_type da_type;
    int da_finished;
} DeferredAction;


extern void init_periodic (void);




extern void shell_refresh (void);
extern void trigger_actions (void);

struct mgroup;

int exec_deferred (int argc, char **argv, struct mgroup *list);
int cmd_deferred (char *buf, struct mgroup *list);
int func_deferred (void_proc, VPTR);
int add_deferred (void_proc, VPTR);


void pop_init();
# 45 "../include/zmail.h" 2
# 1 "../msgs/attach.h" 1
# 12 "../msgs/attach.h"
# 1 "../include/zcunix.h" 1
# 13 "../msgs/attach.h" 2
# 1 "../include/gui_def.h" 1
# 14 "../msgs/attach.h" 2



# 1 "../general/dpipe.h" 1
# 12 "../general/dpipe.h"
# 1 "../general/dlist.h" 1
# 12 "../general/dlist.h"
# 1 "../general/glist.h" 1
# 19 "../general/glist.h"
struct glist {
    int used, allocated, eltSize, growSize;
    void *elts;
};

extern int glist_Add (struct glist *, const void *);
extern void glist_CleanDestroy (struct glist *, void (*) (void *));

extern void glist_Destroy (struct glist *);
extern void *glist_GiveUpList (struct glist *);
extern void glist_Init (struct glist *, int, int);
extern void glist_Insert (struct glist *, const void *, int);


extern void *glist_Last (struct glist *);
extern void *glist_Nth (struct glist *, int);
extern void glist_Remove (struct glist *, int);
extern void glist_Set (struct glist *, int, const void *);
extern void glist_Sort (struct glist *, int (*) (const void *, const void *));


extern void glist_Swap (struct glist *, int, int);

extern int glist_Bsearch (struct glist *, const void *, int (*) (const void *, const void *));



extern void glist_Map (struct glist *, void (*) (VPTR, VPTR), VPTR);
# 13 "../general/dlist.h" 2

struct dlistEntry {
    int next, prev;
};

struct dlist {
    struct glist entries;
    int head, tail, freeHead, freeTail, eltSize, length;
};
# 57 "../general/dlist.h"
extern void dlist_CleanDestroy (struct dlist *, void (*) (void *));

extern void dlist_Destroy (struct dlist *);

extern int dlist_Append (struct dlist *, const void *);

extern int dlist_InsertAfter (struct dlist *, int, const void *);

extern int dlist_InsertBefore (struct dlist *, int, const void *);

extern int dlist_Prepend (struct dlist *, const void *);

extern void dlist_Init (struct dlist *, int, int);
extern void dlist_Remove (struct dlist *, int);
extern void dlist_Replace (struct dlist *, int, const void *);


extern VPTR dlist_HeadElt (struct dlist *);
extern VPTR dlist_TailElt (struct dlist *);

extern void dlist_Map (struct dlist *, void (*) (VPTR, VPTR), VPTR);
# 13 "../general/dpipe.h" 2
# 1 "../general/except.h" 1
# 16 "../general/except.h"
# 1 "../maxsig.h" 1
# 17 "../general/except.h" 2

# 1 "../include/zcjmp.h" 1
# 19 "../general/except.h" 2


# 1 "../include/zmstring.h" 1
# 22 "../general/except.h" 2
# 62 "../general/except.h"
struct except_HandlerContext {
    struct except_HandlerContext *nested;
    jmp_buf env;
};
# 85 "../general/except.h"
typedef void (*except_sighandlerlist_t[15 +1]) (int);
extern void (**_except_SigHandlerList) (int);


extern void _except_RestoreSigHandlers (except_sighandlerlist_t);
extern void _except_HandleSignals(int sig, ...);
# 151 "../general/except.h"
extern const char *except_GetRaisedException (void);
extern void except_SetExceptionValue (void *);
extern void *except_GetExceptionValue (void);
extern void except_SetUncaughtExceptionHandler
              (void (*) ());
extern void (*except_GetUncaughtExceptionHandler())(void);
extern int except_RAISE (const char *, void *);




extern void except_PushContext (struct except_HandlerContext *);
extern int except_CheckException (const char *, struct except_HandlerContext *, int *);


extern void except_ResetContext (struct except_HandlerContext *);
extern struct except_HandlerContext *except_GetCurrentContext (void);
# 14 "../general/dpipe.h" 2

struct dpipe {
    struct dlist segments;
    void (*writer) (struct dpipe *, void *);
    void (*reader) (struct dpipe *, void *);
    void *wrdata, *rddata;
    int closed, autoflush, readpending, ready;
    long rdcount, wrcount;
};

struct dpipeline {
    struct dlist nodes;
    void (*writer) (struct dpipe *, void *);
    void (*reader) (struct dpipe *, void *);
    void *rddata, *wrdata;
    struct {
 struct {
     int installed;
     void (*fn) (struct dpipe *, void *);
     void *data;
 } source, sink;
    } foreign;
};

typedef void (*dpipe_Callback_t) (struct dpipe *, void *);
typedef void (*dpipeline_Filter_t) (struct dpipe *, struct dpipe *, void *);

typedef void (*dpipeline_Finalize_t) (dpipeline_Filter_t, void *);
# 54 "../general/dpipe.h"
extern void dpipe_Init (struct dpipe *, dpipe_Callback_t, void *, dpipe_Callback_t, void *, int);





extern int dpipe_Read (struct dpipe *, char *, int);
extern void dpipe_Write (struct dpipe *, const char *, int);
extern void dpipe_Flush (struct dpipe *);
extern int dpipe_Eof (struct dpipe *);
extern int dpipe_StrictEof (struct dpipe *);
extern void dpipe_Close (struct dpipe *);
extern void dpipe_Destroy (struct dpipe *);
extern void dpipe_Unread (struct dpipe *, const char *, int);

extern int dpipe_Getchar (struct dpipe *);
extern void dpipe_Putchar (struct dpipe *, int);
extern void dpipe_Ungetchar (struct dpipe *, int);
extern int dpipe_Peekchar (struct dpipe *);

extern void dpipe_Pump (struct dpipe *);

extern void dpipe_Put (struct dpipe *, char *, int);
extern int dpipe_Get (struct dpipe *, char **);
extern void dpipe_Unget (struct dpipe *, char *, int);

extern void dpipeline_Init (struct dpipeline *, dpipe_Callback_t, void *, dpipe_Callback_t, void *);


extern void dpipeline_Prepend (struct dpipeline *, dpipeline_Filter_t, void *, dpipeline_Finalize_t);


extern void dpipeline_Append (struct dpipeline *, dpipeline_Filter_t, void *, dpipeline_Finalize_t);


extern void dpipeline_PrependDpipe (struct dpipeline *, struct dpipe *);

extern void dpipeline_AppendDpipe (struct dpipeline *, struct dpipe *);

extern struct dpipe *dpipeline_UnprependDpipe (struct dpipeline *);
extern struct dpipe *dpipeline_UnappendDpipe (struct dpipeline *);
extern void dpipeline_Destroy (struct dpipeline *);

extern struct dpipe *dpipeline_wrEnd (struct dpipeline *);
extern struct dpipe *dpipeline_rdEnd (struct dpipeline *);

extern const char dpipe_err_NoReader[];
extern const char dpipe_err_NoWriter[];
extern const char dpipe_err_Closed[];
extern const char dpipe_err_Pipeline[];
# 18 "../msgs/attach.h" 2






# 1 "../msgs/mime.h" 1
# 16 "../msgs/mime.h"
# 1 "../msgs/mimetype.h" 1
# 16 "../msgs/mimetype.h"
# 1 "../general/c3/c3.h" 1
# 35 "../general/c3/c3.h"
# 1 "../general/c3/c3_macros.h" 1


# 1 "../general/c3/c3_string.h" 1






# 1 "../include/bfuncs.h" 1
# 17 "../include/bfuncs.h"
# 1 "/usr/include/memory.h" 1 3 4
# 18 "../include/bfuncs.h" 2
# 8 "../general/c3/c3_string.h" 2
# 4 "../general/c3/c3_macros.h" 2
# 36 "../general/c3/c3.h" 2
# 73 "../general/c3/c3.h"
extern struct ccs_no_id_mime *ccs_noidmime;
extern int ccs_noidmime_length;
# 201 "../general/c3/c3.h"
typedef short int c3bool;
# 213 "../general/c3/c3.h"
struct stream_properties {



 int src_cs;
 int tgt_cs;
 int ctype;
 char *src_lb;
 char *tgt_lb;
 int direct;
 char *sign;
 char *sign_dubst;
 int select;
 char *approx[2];
 struct {
  int ints[2];
  char *strs[3];
 } data_err;
 struct {
  char *name;
  int value;
 } **factors;




 int max_string_length;


};

extern struct stream_properties *c3_stream_properties ( int );


struct api_info {



 char *dialog_language;
 char *dialog_charset;
 char *csyst;
 int outcome_handling_level;



 char *d_dialog_language;
 char *d_dialog_charset;
 char *d_csyst;



 char **dialog_language_values;
 char **dialog_charset_values;
 char *csyst_values;
};

extern struct api_info * c3_api_info ( void );


struct c3struct_values_param {
    int *src_ccs;
    int *tgt_ccs;
    int *ctype;
    int *direct;
    int *select;
    struct {
 int factor;
 int highest_value;
    } **factors;
};

extern struct c3struct_values_param * c3_values_param (void);


struct c3struct_charset_properties {
    int encoding_unit_length;
    char *ccs_id;
    char *mime_name;
};

extern struct c3struct_charset_properties *
c3_charset_properties ( const int );

extern char *
charset_topic ( const int, const char *);

struct convop_properties {
 int is_finalizable;
 struct {
  int enc_units;
  int illegal_units;
  int chars;
 } src_info;
  struct {
  int enc_units;
  int chars;
  int errors;
 } tgt_info;
};

extern struct convop_properties *
c3_latest_convop_properties ( const int);

void
c3_initialize ( const char *);

int
c3_create_stream (void);

void
c3_set_iparam ( const int, const int, const int );

void
c3_set_sparam ( const int, const int, const char * );

char *
c3_bconv (const int, char *, const char *, const unsigned int , int *, const unsigned int );


char *
c3_strnconv ( const int, char *const, const char *, const unsigned int, const unsigned int );



void
c3_finalize_stream ( const int );

void
c3_finalize (void);

void
c3_set_exception_handling ( const int, const int );







int
c3_outcome_code ( char **);




char *
c3_exception_data (void);

extern int
c3_ccs_number ( const char *, const char *);

extern c3bool
_c3_ccs_is_available ( int );
# 17 "../msgs/mimetype.h" 2
# 28 "../msgs/mimetype.h"
typedef enum {
UnknownMimeType,
IllegalMimeType,
ExtendedMimeType,
ApplicationOctetStream,
ApplicationPostscript,
AudioBasic,
ImageGif,
ImageJpeg,
MessageExternalBody,
MessageNews,
MessagePartial,
MessageRfc822,
MultipartAlternative,
MultipartAppledouble,
MultipartDigest,
MultipartEnabledMail,
MultipartEncrypted,
MultipartMixed,
MultipartParallel,
MultipartSigned,
TextPlain,
VideoMpeg,
NumMimeType
} mimeType;

extern char *mimeTypeStr[(int)NumMimeType];





typedef enum {
UnknownMimePrimaryType,
IllegalMimePrimaryType,
ExtendedMimePrimaryType,
MimeApplication,
MimeAudio,
MimeImage,
MimeMessage,
MimeMultipart,
MimeText,
MimeVideo,
NumMimePrimaryType
} mimePrimaryType;

extern char *mimePrimaryTypeStr[(int)NumMimePrimaryType];





typedef enum {
UnknownMimeSubType,
IllegalMimeSubType,
ExtendedMimeSubType,
MimeOctetStream,
MimePostscript,
MimeBasic,
MimeGif,
MimeJpeg,
MimeExternalBody,
MimeNews,
MimePartial,
MimeRfc822,
MimeAlternative,
MimeDigest,
MimeMixed,
MimeParallel,
MimeEnabledMail,
MimePlain,
MimeMpeg,
NumMimeSubType
} mimeSubType;

extern char *mimeSubTypeStr[(int)NumMimeSubType];




typedef enum {
UnknownMimeEncoding,
IllegalMimeEncoding,
ExtendedMimeEncoding,
SevenBit,
EightBit,
Base64,
Binary,
QuotedPrintable,
NumMimeEncoding
} mimeEncoding;

extern char *mimeEncodingStr[(int)NumMimeEncoding];
# 133 "../msgs/mimetype.h"
typedef enum {
UnknownMimeTextParam,
IllegalMimeTextParam,
ExtendedMimeTextParam,
CharSetParam,
NumMimeTextParam
} mimeTextParam;

extern char *mimeTextParamStr[(int)NumMimeTextParam];



typedef enum {
UnknownMimeExternalParam,
IllegalMimeExternalParam,
ExtendedMimeExternalParam,
AccessTypeParam,
ExpirationParam,
SizeParam,
PermissionParam,
NameParam,
SiteParam,
DirParam,
ModeParam,
ServerParam,
SubjectParam,
NumMimeExternalParam
} mimeExternalParam;

extern char *mimeExternalParamStr[(int)NumMimeExternalParam];
# 185 "../msgs/mimetype.h"
typedef enum {
UnknownMimeGlobalParam,
IllegalMimeGlobalParam,
ExtendedMimeGlobalParam,
BoundaryParam,
GlobalNameParam,
NumMimeGlobalParam
} mimeGlobalParam;

extern char *mimeGlobalParamStr[(int)NumMimeGlobalParam];
# 216 "../msgs/mimetype.h"
typedef struct mimeContentParams {
    char **paramNames;
    char **paramValues;
    int numParamsUsed;
    int numParamsAlloced;
} mimeContentParams;
# 232 "../msgs/mimetype.h"
extern long outMimeCharSet, inMimeCharSet,
     displayCharSet, printerCharSet,
   fileCharSet, currentCharSet;
# 17 "../msgs/mime.h" 2


extern int IsAsciiSuperset (long);
extern char *GetDefaultEncodingStr();
extern int init_mime();
extern int out_charset_callback (char *, ZmCallbackData);
extern int in_charset_callback (char *, ZmCallbackData);
extern int display_charset_callback (char *, ZmCallbackData);
extern int printer_charset_callback (char *, ZmCallbackData);
extern int file_charset_callback (char *, ZmCallbackData);
extern int charset_callback (char *, ZmCallbackData);
extern int SortMimeEncodings();
extern int SortMimeTypes();
extern void SetCurrentCharSet (long);
extern long GetMimeCharSet (const char *);
extern const char *GetMimeCharSetName (long);
extern mimeEncoding GetMimeEncoding();
extern mimePrimaryType MimePrimaryType();
extern mimeSubType MimeSubType();
extern mimePrimaryType GetMimePrimaryType();
extern mimeSubType GetMimeSubType();
extern mimeType GetClosestMimeType();
extern mimeType GetMimeType();
extern void DeriveMimeInfo();
extern void ValidateMimeInfo();
# 60 "../msgs/mime.h"
# 1 "../msgs/mmailext.h" 1
# 17 "../msgs/mmailext.h"
struct Attach;

void AddContentParameter (mimeContentParams *, const char *, const char *);
int CopyContentParameters (mimeContentParams *, mimeContentParams *);
void InsertContentParameters (char *, char *, struct Attach *);
void ParseContentParameters (char *, mimeContentParams *);
void FreeContentParameters();
int PrintContentParameters (char *, mimeContentParams *);
char *FindParam (const char *, const mimeContentParams *);
char *Cleanse (char *);
char *StripLeadingSpace (char *);
void StripTrailingSpace (char *);
int strcpyStrip (char *, const char *, int);
# 61 "../msgs/mime.h" 2
# 25 "../msgs/attach.h" 2



typedef struct Attach {

    struct link a_link;

    unsigned long a_flags;

    unsigned long content_offset;
    unsigned long content_length;
    unsigned long content_lines;
    char *content_type;
    char *content_name;
    char *content_abstract;
    char *encoding_algorithm;


    char *mime_encoding_str;
    char *mime_content_id;

    mimeType mime_type;
    mimeEncoding mime_encoding;
    long mime_char_set;

    char *mime_content_type_str;


    char *orig_mime_content_type_str;



    char *orig_content_name;
    mimeContentParams content_params;

    char *decoding_hint;
    char *data_type;




} Attach;
# 84 "../msgs/attach.h"
struct Compose;

extern const char *add_attachment (struct Compose *compose, const char *file, const char *type, const char *desc, const char *encode, unsigned long flags, Attach **newAttachPtrPtr);



extern char *parse_encoding();
extern void sign_letter (register char *, unsigned long, FILE *);

extern void
    preview_attachment (struct Compose *, const char *),
    del_attachment (struct Compose *, char *),
    free_attachments (Attach **, int),
    free_attach (Attach*, int);

extern void copy_attachments();

typedef struct AttachProg {
    char *program;
    struct dpipe *stream;
    int checked, pipein, pipeout, givename, zmcmd, processp, exitStatus;
} AttachProg;

typedef struct AttachKey {
    struct link k_link;

    AttachProg encode, decode;
    char *use_code;

    ZcIcon bitmap;





    char *description;
} AttachKey;

typedef struct AttachTypeAlias {
    struct link a_link;

    char *type_key;
} AttachTypeAlias;

extern int has_simple_encoding (const Attach *);
extern int can_show_inline (const Attach *);
extern int is_plaintext (const Attach *);
extern int is_multipart (const Attach *);
extern int is_readabletext (const Attach *);

extern int is_known_type (const char *);
extern int is_inline_type (const char *);
extern AttachKey *get_attach_keys (int, Attach *, const char *);
extern void list_attach_keys (AttachKey *, int, int);
extern const char *get_type_from_alias (const char *);



extern int get_create_type_keys (char ***);
extern int get_compose_type_keys (char ***);
extern int get_display_type_keys (char ***);

extern int get_compose_code_keys (char ***);
extern int get_display_code_keys (char ***);

extern int attach_files (struct Compose *);
extern int list_attachments (Attach *, Attach *, char ***, int, int);
extern int get_attachments_list (Attach *, const char *);
extern int get_comp_attachments_info (struct Compose *, char **);
extern int get_attachments_info (const Attach *, const char *, const char *);
extern int list_templates (char ***, const char *, int);

extern char *check_attach_prog (AttachProg *program, int is_coder);

extern int internal_coder (char *);
extern AttachProg *coder_prog (int, Attach *, const char *, char *, const char *, int);
extern int pclose_coder (const AttachProg *);
extern Attach *lookup_part (const Attach *, int, const char *);
extern void check_detach_dir (void);

extern char *get_detach_dir (void);
extern int test_binary (const char *);
extern char *new_attach_filename (struct Compose *, char *);
extern struct dpipe *popen_coder (AttachProg *, const char *, const char *, const char *);
extern int content_header (char *, Attach **);
extern int handle_coder_err (int, char *, char *);

enum DetachFlags {
    DetachDisplay = 1<<0,
    DetachSave = 1<<1,
    DetachAll = 1<<2,
    DetachOverwrite = 1<<3,
    DetachCharsetOk = 1<<4,
    DetachExplode = 1<<5,
    DetachCopy = 1<<6
};
extern int detach_parts (int, int, const char *, const char *, const char *, const char *, unsigned long);

typedef enum {
    HT_ulong, HT_string, HT_encoded, HT_magic, HT_end
} HeaderType;

typedef struct DescribeAttach {
    HeaderType header_type;
    char *header_name;
    int header_length;
    int header_offset;
} DescribeAttach;
# 204 "../msgs/attach.h"
extern const char *get_attach_label (Attach *, int);




typedef struct AttachInfo {
    GuiItem shell;
    GuiItem list_w;

    GuiItem file_w;
    GuiItem datatype_w;
    GuiItem autotype_w;
    GuiItem encoding_w;
    GuiItem comment_w;
    int is_compose;
    int count;
    GuiItem action_area;
    int comment_modified;
} AttachInfo;
# 46 "../include/zmail.h" 2
# 1 "../include/zfolder.h" 1
# 9 "../include/zfolder.h"
# 1 "../include/zcbits.h" 1





# 1 "../include/bfuncs.h" 1
# 7 "../include/zcbits.h" 2
# 10 "../include/zfolder.h" 2




# 1 "../include/catalog.h" 1
# 105 "../include/catalog.h"
extern char **catgetrefvec (catalog_ref *, int);
# 15 "../include/zfolder.h" 2




# 1 "../msgs/mcache.h" 1
# 10 "../msgs/mcache.h"
# 1 "../general/hashtab.h" 1
# 14 "../general/hashtab.h"
struct hashtab {
    unsigned int (*hashfn) (const void *);
    int (*matchfn) (const void *, const void *);

    int eltsize, length;
    struct {
 int bucket, elt;
    } lastfind;
    struct glist buckets;
};





struct hashtab_iterator {
    int bucket, elt;
};

extern void hashtab_Init (struct hashtab *, unsigned int (*) (const void *), int (*) (const void *, const void *), int, int);




extern void hashtab_Add (struct hashtab *, const void *);

extern void *hashtab_Find (struct hashtab *, const void *);

extern void hashtab_Remove (struct hashtab *, const void *);

extern void hashtab_InitIterator (struct hashtab_iterator *);
extern void *hashtab_Iterate (struct hashtab *, struct hashtab_iterator *);

extern unsigned int hashtab_StringHash (const char *);
extern void hashtab_Stats (const struct hashtab *, double *, double *);


extern void hashtab_Rehash (struct hashtab *, int, unsigned int (*) (const void *));


extern void hashtab_Map (struct hashtab *, void (*) (VPTR, VPTR), VPTR);
extern void hashtab_Destroy (struct hashtab *);

extern void hashtab_CleanDestroy (struct hashtab *, void (*) (void *));
# 11 "../msgs/mcache.h" 2






typedef struct headerText {
    char *fieldname;
    char *fieldbody;
    char *showntext;
} HeaderText, HeaderCacheElt;


typedef struct headerCache {
    char initialized;
    struct hashtab hashtable;
} HeaderCache;
# 42 "../msgs/mcache.h"
void headerCache_Init (HeaderCache *);
void headerCache_Erase (HeaderCache *);
HeaderCache *headerCache_Create();
void headerCache_Destroy (HeaderCache *);
# 56 "../msgs/mcache.h"
struct Msg;

void message_HeaderCacheInsert (struct Msg *, char *, char *);
void message_HeaderCacheAppend (struct Msg *, char *, char *);
HeaderText *message_HeaderCacheFetch (struct Msg *, const char *);
char *messageStore_HeaderFetch (struct Msg *, const char *);
void messageStore_Reset (void);
# 20 "../include/zfolder.h" 2
# 41 "../include/zfolder.h"
typedef unsigned long FolderType;

extern FolderType stat_folder(), test_folder(), def_fldr_type;







typedef struct Msg {
    unsigned long m_flags;
    unsigned long m_pri;



    unsigned long m_offset;
    unsigned long m_size;
    int m_lines;
    char *m_date_recv;
    char *m_date_sent;

    struct headerCache *m_cache;





    char *m_id;
    Attach *m_attach;

    unsigned long uid;

} Msg;






typedef struct mindex {
    struct link mi_link;

    int mi_num;
    long mi_adjust;
    Msg mi_msg;
} msg_index;

typedef struct findex {
    msg_index *f_load_ix;
    msg_index *f_sort_ix;
    msg_index *f_wait_ix;
    msg_index *f_ext_ix;
    long f_folder_size;
    long f_index_time;
} fldr_index;

extern char *ix_locate (char *, char *);
extern void ix_header (FILE *, msg_index *);
extern void ix_footer (FILE *, long);
extern msg_index *ix_gen (int, unsigned long, msg_index *);
extern void ix_write (int, msg_index *, unsigned long, FILE *);
extern void ix_destroy (msg_index **, int);
extern void ix_confirm (int);
extern void ix_complete (int);



typedef struct mgroup {
    struct link mg_link;



    int mg_current;
    int mg_is_local;
    int mg_max;
    unsigned char *mg_list;
    int mg_count;
} msg_group;

typedef struct mfolder {
    Ftrack mf_track;




    long mf_last_size;
    FolderType mf_type;
    struct mfolder *mf_backup;
    struct mfolder *mf_parent;
    int mf_number;
    char *mf_tempname;
    FILE *mf_file;
    long mf_flags;
    struct Msg **mf_msgs;
    struct mgroup mf_group;


    int mf_last_count;


    GuiItem mf_hdr_list;
    int mf_hdr_list_ct;


    struct mgroup mf_hidden;

    int *mf_pick_list;
    int *mf_msg_slots;




    struct mailinfo {
 int new_ct, unread_ct, deleted_ct;
    } mf_info;
    DeferredAction *mf_callbacks;
# 166 "../include/zfolder.h"
    unsigned long uidval;
    char *imap_path;
    char *imap_user;
    char *imap_prefix;

} msg_folder;




extern msg_group
    work_group,
    *msg_list;

extern msg_folder
    **open_folders,
    *current_folder,
    spool_folder,
    empty_folder,
    *lookup_folder();

extern int folder_count;

extern long last_spool_size;
extern char *msg_separator;
extern char *match_msg_sep (char *, FolderType);

extern void folder_new_mail (msg_folder *, struct stat *);
extern void check_other_folders (void);
# 289 "../include/zfolder.h"
extern int init_msg_group (msg_group *, int, int);
extern int resize_msg_group (msg_group *, int);
extern void destroy_msg_group (msg_group *);
extern int next_msg_in_group (int, msg_group *);
extern int chk_msg (const char *);

extern void parse_header (char *, Msg *, struct Attach **, int, long, int);
extern void backup_folder (void);
extern int check_flags (unsigned long);
extern int bringup_folder (msg_folder *, msg_group *, unsigned long);
extern int shutdown_folder (msg_folder *, unsigned long, char *);
extern int change_folder (char *, msg_folder *, msg_group *, unsigned long, long, int);
extern int close_backups (int, char *);
# 47 "../include/zmail.h" 2
# 1 "../shell/funct.h" 1
# 11 "../shell/funct.h"
enum func_help_priority {
  HelpPrimary,
  HelpFallback
};


typedef struct zmFunction {
    struct link f_link;
    char **f_cmdv;

    enum func_help_priority help_priority;

    char **help_text;
} zmFunction;




extern zmFunction *function_list, *folder_filters, *new_filters;





extern void free_funct();



extern Option *zmfunc_args;
# 48 "../include/zmail.h" 2

# 1 "../include/getpath.h" 1
# 14 "../include/getpath.h"
extern char *getdir (const char *, int);

extern char *getpath (const char *, int *);
# 50 "../include/zmail.h" 2
# 1 "../shell/quote.h" 1







extern char *quotezs (const char *, const int);


extern char *quotesh (const char *, const int, const int);


extern char *quoteit (const char *, const int, const int);


extern char **quote_argv (char **, int, int);


extern char *backwhack (const char *);


extern void strip_quotes (char *, char *);
# 51 "../include/zmail.h" 2
# 68 "../include/zmail.h"
# 1 "../include/zmprint.h" 1
# 29 "../include/zmprint.h"
# 1 "../shell/zprint.h" 1






void clr_bot_line (void);


extern void print (const char *, ...);





extern void wprint_status (const char *, ...);
extern char *zmVaStr (const char *, ...);
# 30 "../include/zmprint.h" 2
# 69 "../include/zmail.h" 2
# 1 "../shell/misc.h" 1






struct mgroup;
struct zmCallback;

void make_widget_name (register char *label, register char *ret);
int print_help (int argc, char **argv);
FILE *seek_help (const char *str, const char *file, int complain, char *first_str);
int help (int flags, void *str, void *file);
int cmd_line (char buf[], struct mgroup *list);
int edit_file (const char *file, const char *editor, int noisy);
void paint_title (char *buf);
int check_flags (unsigned long flags);
struct zmCallback *ZmCallbackAdd (const char *name, int type, void (*callback)(), VPTR data);

void ZmCallbackCallAll (const char *name, int type, int event, VPTR xdata);
void ZmCallbackRemove (struct zmCallback *);
void bell (void);
# 70 "../include/zmail.h" 2


# 1 "../include/zmdebug.h" 1
# 15 "../include/zmdebug.h"
extern char debug;

extern void zmDebug (char *, ...);
# 73 "../include/zmail.h" 2

struct cmd {
    char *command;
    int (*func)();
};
extern struct cmd ucb_cmds[];
extern struct cmd cmds[], hidden_cmds[];

struct expand {
    char *orig;
    char *exp;
    char *rest;
};


struct printdata {
    char *printer, *printcmd;
    int single_process;
};

struct mgroup;



# 1 "../shell/file.h" 1
# 9 "../shell/file.h"
struct stat;


char *homepath (char *buf, char *p);

char *spoolpath (char *buf, char *p);

char *pluspath (char *buf, char *p);

char *mboxpath (char *buf, char *p);
int pathstat (const char *p, char *buf, struct stat *s_buf);
int getstat (const char *p, char *buf, struct stat *s_buf);
int dgetstat (const char *dir, const char *file, char *buf, struct stat *s_buf);
char *getpath (const char *p, int *isdir);
int dvarstat (const char *dir, const char *file, char *buf, struct stat *s_buf);
int varstat (const char *file, char *buf, struct stat *s_buf);

char *varpath (const char *path, int *isdir);
char *pathclean (char *, const char *);

char *fullpath (char *path, int hardpath);
char *expandpath (const char *path, char *newpath, int hardpath);
char *getdir (const char *path, int makeit);
int file_to_fp (register char *p, register FILE *fp, char *mode, int add_newline);
long fp2fp (FILE *infp, long start, long len, FILE *outfp);
long fp_to_fp (FILE *infp, long start, long len, FILE *outfp);
long fioxlate (FILE *in, long start, long len, FILE *out, long (*xlate)(), VPTR state);

long xlcount (char *input, long len, char **output, char *state);
int emptyfile (register FILE **fp, register char *fname);
int nopenfiles (int argc);
int closefileds_above (int n);

FILE *open_file (register char *p, int program, int lockit);
int open_list (char *names[], FILE *files[], int size);
int find_files (register char *s, char *names[], int size, int force, int recorduser);
int StatAccess (struct stat *buf, int mode);

int Access (const char *file, int mode);


FILE *mask_fopen (const char *file, const char *mode);

char *trim_filename (const char *name);
char *alloc_tempfname (const char *seedname);
char *alloc_tempfname_dir (const char *seedname, const char *dir_prefix);

FILE *open_tempfile (const char *seedname, char **tmpname);
void touch (const char *path);
int zwipe (const char *path);






int exists_dir (const char *path, int chklast);
int zmkdir (const char *path, int mode);
int zmkpath (const char *path, int mode, int mklast);
long file_size (FILE *fp);
# 98 "../include/zmail.h" 2
# 1 "../shell/lock.h" 1
# 14 "../shell/lock.h"
extern FILE *lock_fopen (const char *, const char *);
extern int close_lock (const char *, FILE *);
# 99 "../include/zmail.h" 2


FILE *popen (const char *, const char *);
int pclose (FILE *);


extern char
    *default_rc,
    *alt_def_rc,
    *zmailroot,
    *form_templ_dir,
    *variables_file,
    *encodings_file,
    *def_cmd_help,
    *def_function_help,
    *def_tool_help,
    *zmlibdir;
# 132 "../include/zmail.h"
# 1 "../shell/commands.h" 1
# 9 "../shell/commands.h"
struct dynstr;
struct mgroup;


extern int toggle_debug (int, char **);
extern int read_msg (int, char **, struct mgroup *);
extern unsigned long display_flags (void);
extern int zm_view (int, char **, struct mgroup *);
extern int preserve (int, char **, struct mgroup *);
extern int save_msg (int, char **, struct mgroup *);
extern int respond (int, char **, struct mgroup *);
extern int has_root_prefix (char *);
extern int cd (int, char **);
extern int zm_chroot (int, char **);
extern int zm_quit (int, char **);
extern int zm_delete (int, char **, struct mgroup *);
extern int zm_undelete (int, char **, struct mgroup *);
extern int zm_from (int, char **, struct mgroup *);
extern int ls (int, char **);
extern int sh (int, char **);
extern void GetWineditor (struct dynstr *);
extern void GetWindowShell (struct dynstr *);
extern int stop (int, char **);
extern int Setenv (int, char **);
extern int Unsetenv (int, char **);
extern int Printenv (int, char **);
extern int my_stty (int, char **);
extern int edit_msg (int, char **, struct mgroup *);
extern int pipe_msg (int, char **, struct mgroup *);
extern int zm_echo (int, char **);
extern int eval_cmd (int, char **, struct mgroup *);
extern int await (int, char **, struct mgroup *);
extern int mark_msg (int, char **, struct mgroup *);
extern int zm_priority (int, char **, struct mgroup *);
extern int zm_ask (int, char **, struct mgroup *);
extern int dyn_choose_one (struct dynstr *, const char *, const char *, char **, int, unsigned long);

extern int choose_one (char *, char *, const char *, char **, int, unsigned long);

extern int zm_trap (int, char **, struct mgroup *);
extern int zm_dialog (int, char **, struct mgroup *);
extern int zm_rm (int, char **, struct mgroup *);
extern int zm_multikey (int, char **, struct mgroup *);
extern int zm_unmultikey (int, char **, struct mgroup *);
extern int zm_bindkey (int, char **, struct mgroup *);
extern int screencmd (int, char **, struct mgroup *);


extern int child_debug (int, char **);
# 133 "../include/zmail.h" 2
# 1 "../msgs/compose.h" 1







struct Compose;
struct HeaderField;
struct mfolder;
struct mgroup;

struct HeaderField *create_header (char *name, char *body);
struct HeaderField *duplicate_header (struct HeaderField *hf);
void destroy_header (struct HeaderField *hf);
void free_headers (struct HeaderField **hf);
long store_headers (struct HeaderField **fields, FILE *fp);
struct HeaderField *lookup_header (struct HeaderField **hf, char *name, char *join, int crunch);



void merge_headers (struct HeaderField **hf1, struct HeaderField **hf2, char *join, int crunch);



int output_headers (struct HeaderField **hf, FILE *fp, int all);
int validate_from (char *from);
int interactive_header (struct HeaderField *hf, char *command, char *value);
int is_dynamic_header (struct HeaderField *hf);
int dynhdr_to_choices (char ***choices, char **comment, char **body, char *name);



int dynamic_header (struct Compose *compose, struct HeaderField *hf);
void personal_headers (struct Compose *compose);
void mta_headers (struct Compose *compose);
void gui_compose_headers (struct Compose *compose);
long generate_headers (struct Compose *compose, FILE *fp, int merge);
int start_compose (void);
void assign_compose (struct Compose *dest_compose, struct Compose *src_compose);
void reset_compose (struct Compose *compose);
void stop_compose (void);
void suspend_compose (struct Compose *compose);
void resume_compose (struct Compose *compose);
void clean_compose (int sig);
void mark_replies (struct Compose *compose);
int check_replies (struct mfolder *fldr, struct mgroup *mgrp, int query);
int BinaryTextOk (struct Compose *);
const char *MimeCharSetParam (struct Compose *compose);
int SunStylePreambleString (struct Compose *compose, int lines, char *buf);
int MimeBodyPreambleString (struct Compose *compose, int lines, char *buf);
void MimeHeaderTransferEncoding (struct Compose *compose);
void MimeHeaderContentType (struct Compose *compose);
void MimeHeaderVersion (struct Compose *compose);
void add_headers (FILE *files[], int size, int log_file);
char *get_envelope_addresses (struct Compose *compose);
char *set_header (char *str, const char *curstr, int do_prompt);
void input_header (char *h, char *p, int negate);
void input_address (int h, char *p);
int generate_addresses (char **, char *, int, struct mgroup *);
void request_receipt (struct Compose *compose, int on, const char *p);
void request_priority (struct Compose *compose, const char *p);
char *get_priority (struct Compose *compose);
char **addr_vec (const char *s);
int addr_count (const char *p);
void set_address (struct Compose *compose, int hdr_index, char **value);
char **get_address (struct Compose *compose, int hdr_index);
void add_address (struct Compose *compose, int hdr_index, char *value);
# 134 "../include/zmail.h" 2
# 1 "../shell/curs_io.h" 1






struct cmd_map;
struct dynstr;

void tty_settings (void);
int dyn_Getstr (struct dynstr *dstr, char *pmpt);
int Getstr (char *pmpt, char *string, int length, int offset);
int check_map (int c, struct cmd_map *map_list);
int line_wrap (struct dynstr *dstr);
int errbell (int ret);
int completion (struct dynstr *dstr, int showlist, int ignore);
int fignore (int argc, char ***argvp);
# 135 "../include/zmail.h" 2
# 1 "../msgs/dates.h" 1





# 1 "../include/zctime.h" 1
# 7 "../msgs/dates.h" 2


long getzoff (char *zone);
time_t time2gmt (struct tm *tym, char *zone, int how);
struct tm *time_n_zone (char *zone);

char *tm_time_str (register const char *, struct tm *);

char *time_str (register const char *opts, time_t now);
int days_in_month (int Year, int Month);
int day_number (int Year, int Month, int Day);

char *parse_date (register char *p, time_t today);

char *vals_to_date (char *Date, int Year, int Month, int Day, int Hour, int Minute, int Second, char *Zone);
# 30 "../msgs/dates.h"
char *strings_to_date (char *Date, char *Year, char *Month, char *Day, char *Tim, char *Zone);






char *date_to_string (char *Date, char *Year, char *Month, char *Day, char *Wkday, char *Tim, char *Zone, char *ret_buf);
# 46 "../msgs/dates.h"
char *date_to_ctime (char *Date);

char *rfc_date (char buf[]);
int month_to_n (const char *name);
# 136 "../include/zmail.h" 2
# 1 "../msgs/edmail.h" 1
# 9 "../msgs/edmail.h"
struct compose;
struct dynstr;
struct mgroup;


int add_to_letter (char line[], int noisy);
struct edmail *fetch_comp_command (char *name);
int zm_edmail (int argc, char **argv, struct mgroup *list);
int interpose_on_send (struct Compose *compose);
char *job_numbers (void);
int zm_jobs (int argc, char **argv, struct mgroup *unused);
char *dyn_gets (struct dynstr *dsp, FILE *fp);
char *get_message_state (void);
char *get_main_state (void);
char *get_compose_state (void);
void set_compose_state (const char *item, int how);


int strs_from_program (const char *command, char ***strs);
# 137 "../include/zmail.h" 2
# 1 "../shell/execute.h" 1







int execute (char * const *argv);

void sigchldcatcher (int);
# 138 "../include/zmail.h" 2
# 1 "../shell/expr.h" 1







char *zm_range (register const char *p, struct mgroup *list1);
char *list_to_str (struct mgroup *list);
char *str_to_list (struct mgroup *list, const char *str);
char *eval_expr (register const char *p, struct mgroup *new_list);

int eq_to (char *lhs, char *rhs);
int lthan (char *lhs, char *rhs);
int lt_or_eq (char *lhs, char *rhs);
int gthan (char *lhs, char *rhs);
int gt_or_eq (char *lhs, char *rhs);
int zm_match (int, char **, struct mgroup *);
# 139 "../include/zmail.h" 2
# 1 "../msgs/folders.h" 1





# 1 "../include/zfolder.h" 1
# 7 "../msgs/folders.h" 2

struct Msg;
struct mgroup;
struct mfolder;
struct stat;



void clearMsg (struct Msg *m, int f);
void flush_msgs (void);
int vrfy_update (struct mfolder *new, unsigned long *flags, int updating);
int folder (int argc, char **argv, struct mgroup *list);
int change_folder (char *buf, struct mfolder *newfolder, struct mgroup *list, unsigned long flgs, long prev_size, int updating);





char *ident_folder (char *name, char *buf);
int bringup_folder (struct mfolder *fldr, struct mgroup *list, unsigned long flgs);
struct mfolder *new_folder (int n, FolderType fotype);
struct mfolder *lookup_folder (char *name, int n, unsigned long flgs);
void backup_folder (void);
void unhook_backup (struct mfolder *fldr);
int close_backups (int updating, char *query);

char *fldr_numbers (void);

char *folder_info_text (int n, struct mfolder *fldr);
char *folder_shortname (struct mfolder *fldr, char *buf);
int shutdown_folder (struct mfolder *fldr, unsigned long flgs, char *query);
int update_folders (unsigned long flgs, char *query, int vrfy_each);
int folders (int argc, char **argv);
int is_rfc822_header (char *line, int prev_is_rfc822);
FolderType stat_folder (const char *name, struct stat *s_buf);
FolderType test_folder (const char *name, const char *query);
int rm_folder (char *file, unsigned long prompt_flags);
int merge_folders (int n, register const char **argv, struct mgroup *list);
int zm_undigest (int n, char *argv[], struct mgroup *list);
int rename_folder (int argc, char **argv, struct mgroup *list);
void sort_new_mail (void);
int zm_uudecode (int argc, char *argv[], struct mgroup *list);
# 140 "../include/zmail.h" 2
# 1 "../msgs/foload.h" 1
# 10 "../msgs/foload.h"
struct Attach;
struct Source;
struct mgroup;

char *match_msg_sep (char *buf, FolderType fotype);
void parse_from (struct Source *ss, char path[]);
int explode_multipart (int, struct Attach *, struct Source *, int *, int);
int load_attachments (int, struct Source *, int *, int);
void parse_header (char *buf, Msg *mesg, struct Attach **attach, int want_status, long today, int cnt);





int load_headers (char *line, int cnt, struct Source *ss, int *lines);
int recover_folder (void);
int load_folder (const char *file, int append, int last, struct mgroup *list);

long from_stuff (char *line, long len, char **output, char *state);
unsigned long parse_priorities (const char *str);
# 141 "../include/zmail.h" 2
# 1 "../msgs/format.h" 1







char *format_unindent_lines (char **lines, int plen);
int format_prefix_length (char **lines, int all_sp_ok);
char *format_indent_lines (char **lines, char *pfix);
char *format_fill_lines (char **lines, int wrap);
char *format_pipe_str (char *in, char *cmd);
# 142 "../include/zmail.h" 2
# 1 "../msgs/hdrs.h" 1




struct Msg;
struct mgroup;

long msg_seek (struct Msg *mesg, int whence);

char *msg_get (int n, char *from, int count);

char *header_field (int n, const char *str);

char *from_field (int n);

char *to_field (int n);

char *subj_field (int n);

char *id_field (int n);

char *reply_to (int n, int all, char buf[]);
void fix_my_addr (char *buf);

char *clean_subject (char *subj, int fix_re);

char *subject_to (int n, char *buf, int add_re);

char *cc_to (int n, char *buf);

char *concat_hdrs (int n, char *hdrs, int tartare, int *olen);

char *format_hdr (int cnt, const char *hdr_fmt, int show_to);

char *compose_hdr (int cnt);
char *priority_string (int i);
int zm_hdrs (int argc, char **argv, struct mgroup *list);
# 143 "../include/zmail.h" 2
# 1 "../shell/hostname.h" 1






char *zm_gethostname (void);
# 144 "../include/zmail.h" 2
# 1 "../shell/init.h" 1




# 1 "../shell/zmsource.h" 1
# 9 "../shell/zmsource.h"
typedef enum {
    SourceFile,
    SourceString,
    SourceArray,
    SourceStack
} SourceControl;

typedef struct Source {
    SourceControl sc;



    union {

 FILE *fp;

 struct {
     char **array, *position;
     int indx;
 } ap;
 struct {
     char *string, *position;
     int eof;
     int len;
 } sp;
    } ss;
    struct Source *st;
} Source;

extern Source
    *Sopen(), *stdSource, *inSource;

extern Source *Sinit (SourceControl, VPTR);

extern char
    *Sgets();

extern long
    Sseek(), Stell();

extern int
    Sclose(), Sgetc(), Sungetc(), Sread(), Spush(), Squeue();

extern void
    Spop();
# 63 "../shell/zmsource.h"
extern long Source_to_fp();
# 6 "../shell/init.h" 2

extern Source *stdSource, *inSource;

void init_user (char *);
void init_host (char *);
int init_lib (const char *);
int init (void);
char **get_ourname (void);
char *zmRcFileName (int, int, int);
int source (int, char **, struct mgroup *);
int src_Source (char *, Source *);
int src_parse (char *, Source *, int, int, int *, struct mgroup *);
# 145 "../include/zmail.h" 2
# 1 "../shell/loop.h" 1




# 1 "../general/dynstr.h" 1
# 16 "../general/dynstr.h"
struct dynstr {
    int used, allocated;
    char *strng;
};
# 33 "../general/dynstr.h"
extern int dynstr_Length (const struct dynstr *);
extern int dynstr_Chop (struct dynstr *);
extern void dynstr_ChopN (struct dynstr *, unsigned);
extern void dynstr_KeepN (struct dynstr *, unsigned);
extern void dynstr_Append (struct dynstr *, const char *);
extern void dynstr_AppendN (struct dynstr *, const char *, int);
extern int dynstr_AppendChar (struct dynstr *, int);
extern void dynstr_Destroy (struct dynstr *);
extern char *dynstr_GiveUpStr (struct dynstr *);
extern void dynstr_Init (struct dynstr *);
extern void dynstr_InitFrom (struct dynstr *, char *);
extern void dynstr_Set (struct dynstr *, const char *);
extern void dynstr_Replace (struct dynstr *, int, int, const char *);
extern void dynstr_ReplaceChar (struct dynstr *, int, int, int);
extern void dynstr_ReplaceN (struct dynstr *, int, int, const char *, int);
# 6 "../shell/loop.h" 2

struct mgroup;

extern void zm_loop (void);
extern void add_history (int, char **);

extern char **make_command (const char *, register char ***, int *);
extern int zm_command (int, char **, struct mgroup *);
extern int alias_stuff (struct dynstr *, int, char **);
extern char *alias_expand (char *);
extern char *hist_expand (const char *, register char **, int *);

extern char *check_internal (char *);
extern int varexp (struct expand *);

extern char *get_var_value (char *);
extern int dyn_filename_expand (struct dynstr *);
extern int dyn_variable_expand (struct dynstr *);
extern int variable_expand (char *);

extern char **mk_argv (const char *, int *, int);
extern char *reference_hist (const char *, struct dynstr *, char **);
extern char *hist_from_str (char *, int *);
extern int disp_hist (int, char **);
extern void init_history (int);
# 146 "../include/zmail.h" 2
# 1 "../shell/lpr.h" 1





struct mgroup;
struct printdata;
struct zmPager;

int zm_lpr (int argc, char **argv, struct mgroup *list);
char *printer_choose_one (const char *allPrinters);
struct zmPager *printer_setup (const struct printdata *pdata, int use_same_printer);
# 147 "../include/zmail.h" 2
# 1 "../shell/macros.h" 1






extern struct cmd_map *mac_stack, *mac_hide;


int mac_push (register const char *str);
int mac_queue (register char *str);
void mac_pop (void);
void mac_flush (void);
int mac_pending (void);
int get_mac_input (int newline);
int m_getchar (void);
void m_ungetc (int c);
int read_long_cmd (char *buf);
int reserved_cmd (char *buf, int do_exec);
int check_mac_bindings (char *buf);
# 148 "../include/zmail.h" 2
# 1 "../msgs/mail.h" 1



void compose_mode (int on);
int zm_mail (register int n, register char **argv, struct mgroup *list);
char *get_template_path (const char *str, int quiet);
int compose_letter (void);
int finish_up_letter (void);
int extract_addresses (char *addr_list, char **names, int next_file, int size);
void rm_edfile (int sig);
int write_draft (char *file, char *outbox_addresses);
void dead_letter (int sig);
int prepare_edfile (void);
int truncate_edfile (struct Compose *compose, long new_size);
int open_edfile (struct Compose *compose);
int close_edfile (struct Compose *compose);
int parse_edfile (struct Compose *compose);
int reload_edfile (void);
void invoke_editor (const char *edit);
int run_editor (const char *edit);
int init_attachment (const char *attachment);
FILE *do_start_sendmail (struct Compose *compose, char *addr_list);
int do_sendmail (struct Compose *compose);
# 149 "../include/zmail.h" 2
# 1 "../shell/main.h" 1






void shell_init (int argc, char *argv[]);
int zm_hostinfo (void);
int zm_version (void);
void set_cwd (void);
int verify_malloc (int argc, char *argv[]);
# 150 "../include/zmail.h" 2
# 1 "../msgs/msgs.h" 1
# 10 "../msgs/msgs.h"
int init_msg_group (struct mgroup *grp, int n, int is_local);
int resize_msg_group (struct mgroup *grp, int n);
void destroy_msg_group (struct mgroup *grp);
int next_msg_in_group (int current, struct mgroup *group);
void display_msg (register int n, unsigned long flg);
void set_mbox_time (char *name);
int check_folder_space (const char *primary, const char *secondary, int isspool);


int copy_all (FILE *mail_fp, FILE *mbox, unsigned long flg, int isspool, int *held, int *saved);





int copyback (char *query, int final);
int mail_size (const char *curfile, int checkspool);

void zmail_mail_status (int as_prompt);



char *get_spool_name (char *buf);
char *abbrev_foldername (const char *name);

char *format_prompt (struct mfolder *fldr, const char *fmt);
int chk_msg (const char *s);
int next_msg (int current, int direction);
int f_next_msg (struct mfolder *fldr, int curr, int direction);
int count_msg_list (struct mgroup *list);
int get_msg_list (char **argv, struct mgroup *list);
int letter_to_flags (int letter, unsigned long *onbits, unsigned long *offbits);

char *flags_to_letters (unsigned long flags, int loud);
int msg_flags (int c, char **v, struct mgroup *list);
int set_hidden (struct mfolder *fldr, int *hidden_ct);
void clear_hidden (void);
# 151 "../include/zmail.h" 2
# 1 "../msgs/newmail.h" 1






struct stat;


int get_new_mail (int);
void process_new_mail (int, int);
int show_new_mail (void);
void zm_license_failed (void);
int check_new_mail (void);
void folder_new_mail (msg_folder *, struct stat *);
void check_other_folders (void);
# 152 "../include/zmail.h" 2
# 1 "../shell/pager.h" 1
# 16 "../shell/pager.h"
# 1 "../msgs/mimetype.h" 1
# 17 "../shell/pager.h" 2
# 1 "../include/zmflag.h" 1
# 18 "../shell/pager.h" 2


struct FrameDataRec;
struct mgroup;


typedef struct zmPager zmPager, *ZmPager;
typedef struct zmPagerDevice zmPagerDevice, *ZmPagerDevice;
typedef enum {
    PgHelp,
    PgHelpIndex,
    PgText,
    PgMessage,
    PgNormal,
    PgInternal,
    PgPrint,
    PgOutput,
    PgTotalTypes
} ZmPagerType;

struct zmPager {
    ZmPagerDevice device;
    int (*write_func) (ZmPager, char *);
    void (*end_func) (ZmPager);
    char *title, *file, *prog, *printer;
    long charset;

    pid_t pid;

    char *outfile, *errfile;


    FILE *fp;
    unsigned long flags;
    int line_chct, line_ct, cur_msg;
    struct mgroup *msg_list;
# 74 "../shell/pager.h"
    int tot_len;

    int last;
    char *text;
    struct FrameDataRec *frame;
    GuiItem text_w;


    void *pagerdata;
};

struct zmPagerDevice {
    ZmPagerType type;
    void (*init_func) (ZmPager);
    int (*write_func) (ZmPager, char *);
    void (*end_func) (ZmPager);
    unsigned long flags;
};
# 131 "../shell/pager.h"
ZmPager ZmPagerStart (ZmPagerType);
void ZmPagerSetType (ZmPager, ZmPagerType);
void ZmPagerStop (ZmPager);
void ZmPagerWrite (ZmPager, char *);
void ZmPagerInitialize (ZmPager);

extern ZmPager cur_pager;

char *printer_choose_one (const char *);
long fiopager (char *, long, char **, char *);
int c_more (register const char *);
int pg_check_interrupt (ZmPager, size_t);
int pg_check_max_text_length (ZmPager);
# 153 "../include/zmail.h" 2
# 1 "../msgs/pick.h" 1






struct mgroup;


int zm_pick (register int n, register char **argv, struct mgroup *list);
# 154 "../include/zmail.h" 2
# 1 "../include/popenv.h" 1
# 12 "../include/popenv.h"
int popenve (FILE **, FILE **, FILE **, const char *, char **, char **);
int popenv (FILE **, FILE **, FILE **, const char *, char **);
int popenvp (FILE **, FILE **, FILE **, const char *, char **);
int popensh (FILE **, FILE **, FILE **, const char *);
int popencsh (FILE **, FILE **, FILE **, const char *);
int popencsh_f (FILE **, FILE **, FILE **, const char *);
int pclosev (int);

int popenle (FILE **, FILE **, FILE **, const char *, ...);
int popenl (FILE **, FILE **, FILE **, const char *, ...);
int popenlp (FILE **, FILE **, FILE **, const char *, ...);
# 155 "../include/zmail.h" 2

# 1 "../custom/imaplib.h" 1
# 18 "../custom/imaplib.h"
extern char imap_error[];

extern int imap_debug;



typedef struct _folders {
        int delimiter;
        char *name;
        long attributes;
 int level;
 struct _folders *parent;
        struct _folders **sibs;
 int nsibs;
} Folders;
# 157 "../include/zmail.h" 2

# 1 "../custom/poplib.h" 1
# 30 "../custom/poplib.h"
extern char pop_error[];


extern int pop_debug;

typedef struct _PopServer {
     int file, data, ispop;
     int pop_rset_flag;
     char buffer[1024+128 + 2], *dp;
} *PopServer;
# 55 "../custom/poplib.h"
struct sockaddr_in;




PopServer pop_open (const char *host, const char *username, char *password, int flags);
int pop_stat (PopServer server, int *count, int *size);
int pop_list (PopServer server, int message, int **IDs, int **sizes);
void pop_read_server (struct dpipe *dp, void *rddata);
struct dpipe *pop_retrieve (PopServer server, int message);
int pop_delete (PopServer server, int message);
int pop_noop (PopServer server);
int pop_last (PopServer server);
int pop_reset (PopServer server);
int pop_quit (PopServer server);
void pop_close (PopServer server);
int get_ip_addr (struct sockaddr_in *addr, const char *ip);


char *poplib_getline (PopServer server);
int sendline (PopServer server, const char *line);
int fullwrite (int fd, const char *buf, int nbytes);
int getok (PopServer server);

int socket_connection (const char *, int);
# 159 "../include/zmail.h" 2
# 1 "../shell/setopts.h" 1



struct Variable;
struct mgroup;
struct options;
struct thread_hashtab;
struct zmFunction;

struct thread_hashtab *optlist2tht (struct options **list);
struct options *optlist_fetch (struct options **list, const char *str);
void tht_thread (struct thread_hashtab *tht, struct options **list);
void optlist_sort (struct options **list);
int reset_state (struct options *tmp, struct options **list);
int add_option (struct options **list, const char *const *argv);
int set_var (const char *var, const char *eq, const char *val);
int set_int_var (char *var, char *eq, long val);
int user_set (struct options **, const char * const *);
int user_unset (struct options **list, char *varname);
int user_settable (struct options **list, const char *varname, struct Variable **varptr);
int set_env (char *var, char *val);
int unset_env (char *var);
char *zm_set (register struct options **list, register const char *str);
int un_set (struct options **list, const char *p);
int set (int argc, char **argv, struct mgroup *list);
int zm_readonly (int argc, char **argv, struct mgroup *list);
int var_mark_readonly (const char *name);
int alts (int argc, VPTR arg);
int save_opts (int cnt, char **argv);
struct options **name2optlist (char ***argvp);
int zm_alias (int argc, char **argv);
int zm_unalias (int argc, char **argv);
int bool_option (const char *value, const char *field);
void stow_state (void);
void cache_funct (struct zmFunction **list, struct zmFunction *fun);
int funct_modified (struct zmFunction *fun, struct zmFunction **list);
void clean_funct (struct zmFunction **funlist, char *command, FILE *fp);
void add_var_callbacks (void);
# 160 "../include/zmail.h" 2
# 1 "../shell/signals.h" 1
# 9 "../shell/signals.h"
void intrpt (int sig);
int handle_intrpt (unsigned long flags, char *str, long percentage);
int set_user_handler (int sig, char *handler);


void catch (int sig);


void stop_start (int);
void cleanup (int sig);

void bus_n_seg (int sig);
# 161 "../include/zmail.h" 2
# 1 "../msgs/sort.h" 1






struct mgroup;



int sort (int argc, char *argv[], struct mgroup *list);
# 162 "../include/zmail.h" 2
# 1 "../shell/while.h" 1






struct mgroup;

int zm_while (int argc, char **argv, struct mgroup *messageList);
# 163 "../include/zmail.h" 2

# 1 "../shell/zstrings.h" 1



char *reverse (char s[]);

char *no_newln (char *p);

char *any (const char *s1, const char *s2);

char *rany (const char *s1, const char *s2);
int chk_two_lists (const char *list1, const char *list2, const char *delimiters);







char *my_atoi (const char *p, int *val);

char *argv_to_string (register char *p, char **argv);

char *smart_argv_to_string (char *buf, char **argv, const char *chars_to_escape);
char *Sprintf (char *buf, const char *fmt, ...);
# 165 "../include/zmail.h" 2

extern char
    **alternates,
    *cmd_help,
    *escape,
    *function_help,
    *hdr_format,
    *hdrs_only,
    **known_hosts,
    *zlogin,
    *next_line (char [], int, FILE *, int *),

    **ourname,
    *prog_name,
    *prompt_var,
    *prompt2,
    *spooldir,
    *spoolfile,


    *variable_stuff (int, const char *);


# 1 "../shell/version.h" 1
# 9 "../shell/version.h"
extern char *zmCopyright (void);
extern char *zmName (void);
extern char *zmRelease (void);
extern char *zmVersion (int);
extern char *zmMainName (void);
# 189 "../include/zmail.h" 2

struct dynstr;
struct zmFunction;
struct Source;

extern int
    crt,
    exec_pid,
    hist_no,
    hist_size,
    index_size,
    intr_level,
    iscurses,
    istool,
    n_array[128],
    screen,
    wrapcolumn;

extern int
    question_mark (int, char **),
    zm_attach (int, char **, struct mgroup *),
    zm_button (int, char **, struct mgroup *),
    zm_detach (int, char **, struct mgroup *),
    zm_foreach (int, char **, struct mgroup *),

    zm_filter (int, char **, struct mgroup *),

    zm_funct (int, char **, struct mgroup *),
    zm_shift (int, char **, struct mgroup *),
    zm_sound (int, char **),






    uniconic (int, char **, struct mgroup *),

    gui_task_meter (int, char **),
    insert_pos (GuiItem),

    xsync (int, char **, struct mgroup *),







    call_function (struct zmFunction *, int, char **, struct mgroup *),
    push_args (int, char **, struct mgroup *),

    gui_iconify (void),


    gui_choose_one (struct dynstr *, char *, const char *, const char **, int, unsigned long),

    exec_argv (int, register char **, struct mgroup *),
    curses_help_msg (int);

extern void
    pop_args (void),
    timeout_cursors (int);

extern void
    filter_msg (char *, struct mgroup *, struct zmFunction *),
    save_filter (char *, zmFunction **, FILE *),
    save_funct (char *, zmFunction **, FILE *);



int curses_init (int, register char **);
# 4 "signals.c" 2
# 1 "../include/zmcomp.h" 1
# 25 "../include/zmcomp.h"
# 1 "../include/zmaddr.h" 1
# 11 "../include/zmaddr.h"
# 1 "../msgs/addrs.h" 1






int compare_addrs (char *list1, char *list2, char *ret_buf);
char *unscramble_addr (char *addr, char *naddr);
char *bang_form (char *d, char *s);
void route_addresses (char *to, char *cc, char *route_path);
void improve_uucp_paths (char *original, int size, char *route_path, int fix_route);



void rm_cmts_in_addr (register char *str);
void take_me_off (char *str);
void fix_up_addr (char *str, int safety);
void rm_redundant_addrs (char *to, char *cc);
char *get_name_n_addr (register const char *str, register char *name, register char *addr);


int append_address (char *buf, const char *addr, int size);
int addrs_from_file (char *buf, char *file, int size);
int addrs_from_alias (char *buf, char *s, int size);
char *alias_to_address (register const char *s);
char *wrap_addrs (char *str, int n, int as822);
void prepare_mta_addrs (char *str, unsigned long);
char *message_id (char *buf);
char *message_boundary (void);
char *get_from_host (int use_domain, int not_ourhost);
char *get_full_hostname (void);
# 12 "../include/zmaddr.h" 2
# 26 "../include/zmcomp.h" 2


# 1 "../motif/attach/area.h" 1







# 1 "../include/frtype.h" 1
# 17 "../include/frtype.h"
typedef enum {
    FrameUnknown = 0,
    FrameAlias,
    FrameAttachments,
    FrameBrowseAddrs,
    FrameCompAliases,
    FrameCompHdrs,
    FrameCompOpts,
    FrameCompose,
    FrameConfirmAddrs,
    FrameCustomHdrs,
    FrameFileFinder,
    FrameFolders,
    FrameFontSetter,
    FrameHeaders,
    FrameHelpIndex,
    FrameMain,
    FrameOpenFolders,
    FrameOptions,
    FramePageMsg,
    FramePageText,
    FramePainter,
    FramePickDate,
    FramePickPat,
    FramePinMsg,
    FramePrinter,
    FrameSaveMsg,
    FrameScript,
    FrameSearchReplace,
    FrameSort,
    FrameTaskMeter,
    FrameTemplates,
    FrameToolbox,
    FrameLicense,
    FrameAddFolder,
    FrameRemoveFolder,
    FrameCompOptions,
    FrameDynamicHdrs,
    FrameReopenFolders,
    FrameNewFolder,
    FramePageEditText,
    FrameRenameFolder,
    FrameFilters,
    FrameFunctions,
    FrameMenus,
    FrameButtons,
    FrameSubmenus,
    FrameFunctionsHelp,
    FrameMenuToggle,
    FrameAskFF,
    FrameAskMultiple,
    FrameAskInput,
    FrameAskRetry,



    FrameAskMessageList,
    FrameLogin,
    FrameAbout,
    FrameZCal,
# 85 "../include/frtype.h"
    FrameTclTk,
    FrameTotalDialogs,

    FrameHelpContents = FrameHelpIndex,

    FrameTrailingGarbage
} FrameTypeName;
# 9 "../motif/attach/area.h" 2
# 1 "../include/zmframe.h" 1
# 12 "../include/zmframe.h"
# 1 "../include/frtype.h" 1
# 13 "../include/zmframe.h" 2


struct mfolder;
# 50 "../include/zmframe.h"
typedef enum {
    FrameEndArgs = 0,
    FrameType,
    FrameFolder,
    FrameMsgString,
    FrameMsgItem,
    FrameMsgItemStr,
    FrameMsgList,
    FrameFlags,
    FrameFlagOn,
    FrameFlagOff,
    FrameTogglePix,
    FrameRefreshProc,
    FrameClientData,
    FrameFreeClient,
    FrameMsgsCallback,
    FrameFolderCallback,
    FrameIcon,
    FrameIconItem,
    FrameIconPix,
    FrameIconFile,
    FrameTitle,
    FrameIconTitle,
    FrameIsPopup,
    FrameClass,
    FrameChildClass,
    FrameChild,
    FrameToggleItem,




    FrameActivateFolder,
    FrameCloseCallback,
    FramePane,
    FrameTextItem,
    FrameStatusBar,

    FrameDismissButton,

    FrameArgEnd
} FrameArg;

typedef struct FrameDataRec {
    struct link link;
# 106 "../include/zmframe.h"
    FrameTypeName type;
    GuiItem child;
    GuiItem folder_label;
    GuiItem toggle_item;
    GuiItem icon_item;
    struct mfolder *this_folder;
    void (*folder_callback)();
    unsigned long flags;

    ZcIcon icon;

    char *msgs_str;
    GuiItem msgs_item;
    void (*msgs_callback)();
    caddr_t client_data;
    void (*free_client)();
    int (*refresh_callback)();
    int (*close_callback)( );
    char *folder_info;
    GuiItem pane;
    struct statusBar *sbar;
    struct FrameDataRec *parent;
    GuiItem text_item;

    GuiItem dismissButton;

} FrameData;

extern FrameTypeName FrameGetType (FrameData *);

typedef FrameData *ZmFrame;
# 181 "../include/zmframe.h"
extern ZmFrame
    frame_list,
    FrameCreate (const char *name, FrameTypeName type, GuiItem parent, ...),
    FrameGetData (GuiItem),
    CreateMsgFrame (GuiItem *, FrameTypeName);


extern ZmFrame
    DialogCreateAlias(),
    DialogCreateBrowseAddrs(),
    DialogCreateCompose(),
    DialogCreateCustomHdrs(),
    DialogCreateFolders(),
    DialogCreateHeaders(),
    DialogCreateHelpIndex(),
    DialogCreateOpenFolders(),
    DialogCreateOptions(),
    DialogCreateLicense(),
    DialogCreatePickDate(),
    DialogCreatePickPat(),
    DialogCreatePrinter (GuiItem, GuiItem),
    DialogCreateSaveMsg(),
    DialogCreateScript(),
    DialogCreateSort(),
    DialogCreateTemplates(),
    DialogCreateToolbox(),

    DialogCreateFontSetter(),


    DialogCreatePainter(),

    DialogCreateCompAliases(),
    DialogCreateAddFolder(),
    DialogCreateSearchReplace(),
    DialogCreateCompOptions(),

    DialogCreateDynamicHdrs(),

    DialogCreateAttachments(),
    DialogCreateReopenFolders(),
    DialogCreateNewFolder(),
    DialogCreateRenameFolder(),

    DialogCreateFilters(),

    DialogCreatePinMsg(),
    DialogCreatePageMsg(),
    DialogCreateFunctions(),
    DialogCreateMenus(),
    DialogCreateButtons(),
    DialogCreateFunctionsHelp(),
    DialogCreateTk(),
    DialogCreateZCal();


extern int
    FrameSet (FrameData *data, ...),
    FrameGet (FrameData *data, ...),
    FrameRefresh (FrameData *, struct mfolder *, unsigned long),
    generic_frame_refresh (ZmFrame, struct mfolder *, unsigned long);

extern void
    FrameCopyContext (FrameData *, FrameData *),
    FramePopup (FrameData *),
    FrameClose (FrameData *, int),
    FrameDestroy (FrameData *, int),
    DeleteFrameCallback (GuiItem, FrameData *),
    DestroyFrameCallback (GuiItem, FrameData *),
    PopdownFrameCallback (GuiItem, FrameData *),
    popup_dialog (GuiItem, FrameTypeName);

extern void FrameFolderLabelAdd (ZmFrame, GuiItem, unsigned long);
extern void FrameMessageLabelAdd (ZmFrame, GuiItem, unsigned long);
# 10 "../motif/attach/area.h" 2
# 22 "../motif/attach/area.h"
typedef GuiItem AttachArea;





void attach_rehash_cb (AttachArea, ZmCallbackData);

AttachArea create_attach_area (Widget, FrameTypeName);
void draw_attach_area (AttachArea, ZmFrame);
# 29 "../include/zmcomp.h" 2







typedef struct HeaderField {
    struct link hf_link;

    char *hf_body;



    unsigned long hf_flags;

} HeaderField;
# 67 "../include/zmcomp.h"
extern char *address_headers[];
# 80 "../include/zmcomp.h"
enum mref_type {
    mref_Reply, mref_Delete, mref_Forward
};


typedef struct mref {
    struct link link;
    unsigned long offset;
    enum mref_type type;
} msg_ref;

typedef struct Compose {
    struct link link;

    char *addresses[5];
    HeaderField *headers;
    long body_pos;
    Attach *attachments;

    char *rrto;
    msg_group replied_to;
    msg_ref *reply_refs;
    msg_group inc_list;
    char *hfile;
    char *Hfile;
    char *edfile;
    FILE *ed_fp;
    int exec_pid;
    char *boundary;

    unsigned long flags;
# 136 "../include/zmcomp.h"
    unsigned long send_flags;
# 169 "../include/zmcomp.h"
    struct ComposeInterface *interface;


    char *transport;
    char *record;
    char *logfile;
    char *remark;
    char *signature;
    char *sorter;
    char *addressbook;
    unsigned long mta_flags;
# 189 "../include/zmcomp.h"
    int autosave_ct;

    struct zmInterposeTable *interpose_table;


    unsigned long splitsize;

    long out_char_set;
} Compose;

extern void reset_comp_opts (Compose *, int);
extern void update_comp_struct (Compose *);




extern struct Compose *comp_list, *comp_current;
# 587 "../include/zmcomp.h"
# 1 "../msgs/dirserv.h" 1
# 9 "../msgs/dirserv.h"
# 1 "../include/zmcomp.h" 1
# 10 "../msgs/dirserv.h" 2
# 1 "../include/zm_ask.h" 1
# 11 "../msgs/dirserv.h" 2



extern time_t address_cache_timeout;


extern int addrs_from_lookup (char *, const char *, int);
extern char *address_book (const char *, int, int);
extern int check_all_addrs (Compose *, int);
extern AskAnswer confirm_addresses (Compose *);
extern char **addr_list_sort (char **addrs);

extern int lookup_run (const char *, const char *, const char *, char ***);
extern char **lookup_split (char **, int, char *);

extern char *fetch_cached_addr (const char *);
extern void cache_address (const char *, const char *, int);
extern char *uncache_address (const char *);
extern char *revert_address (const char *);
extern int lookup_add_cached (const char *, char ***, char ***);

extern void address_cache_erase();

extern void cache_timeout_reset();
# 588 "../include/zmcomp.h" 2







# 1 "../include/zmframe.h" 1
# 596 "../include/zmcomp.h" 2
extern Compose *FrameComposeGetComp (ZmFrame);
extern Widget *FrameComposeGetItems (ZmFrame);
# 5 "signals.c" 2
# 1 "../include/catalog.h" 1
# 105 "../include/catalog.h"
extern char **catgetrefvec (catalog_ref *, int);
# 6 "signals.c" 2

# 1 "../include/hooks.h" 1
# 8 "signals.c" 2
# 1 "signals.h" 1
# 9 "signals.c" 2
# 19 "signals.c"
extern Ftrack *fake_spoolfile;


# 1 "../license/server.h" 1
# 14 "../license/server.h"
# 1 "../include/catalog.h" 1
# 105 "../include/catalog.h"
extern char **catgetrefvec (catalog_ref *, int);
# 15 "../license/server.h" 2

# 1 "../license/lsfile.h" 1
# 9 "../license/lsfile.h"
struct license_data;

      struct license_data *ls_rdentry (FILE *, struct license_data *);
const struct license_data *ls_wrentry (FILE *, const struct license_data *);
# 17 "../license/server.h" 2
# 1 "../license/lsutil.h" 1
# 14 "../license/lsutil.h"
void ls_long_to_key (unsigned long, char[8]);
void ls_makekey (const char *, const char *, const char *, char *);

void ls_pack (unsigned char[8], short, unsigned long, unsigned short);
void ls_unpack (unsigned char[8], short *, unsigned long *, unsigned short *);


char *ls_make_tstamp (long, unsigned long);
long ls_grok_tstamp (const char *, unsigned long);


int AtoUL (const char *, unsigned long *);
int ls_is_a_password (const char *);

char *ls_delete_first_arg (char **);
int ls_argvlen (char **);
void ls_append_to_malloced_argv (char ***, char *);
void ls_append_to_malloced_ulv (unsigned long **, unsigned long);
# 18 "../license/server.h" 2
# 41 "../license/server.h"
typedef struct license_data {
    char *password;
    char *version;
    char *hostname;
    char *progname;
    unsigned long hostid;
    time_t expiration_date;
    unsigned long max_users;
    long flags;
    char **valid_users;
} license_data;

typedef struct license_float {
    struct link link;
    char password[17];
    unsigned long max_users;
    unsigned long current_users;
    unsigned long max_index_in_use;
    struct float_request {
 char user[16];
 unsigned long host;
 unsigned long pid;
 unsigned long key;
 long last_contact;
    } *accepted;
} license_float;
# 75 "../license/server.h"
extern void ls_freeentry(), ls_warn_expires();



extern char *ls_encode(), *ls_decode(), *ls_password(),
     *ls_password_for_named_program();
extern char **ls_read_malloced_argv_of_malloced_in_addrs(),
      *ls_delete_first_arg();
extern void ls_give_back_token();
extern char *GetPeerName();
extern int GetLocalPortOfSocket();





extern long license_expiration;
# 117 "../license/server.h"
extern int ls_verbose;
extern char *ls_err;
extern char ls_errbuf[80];
# 195 "../license/server.h"
extern unsigned long license_flags;
# 220 "../license/server.h"
long ls_gethostid(),



     ls_concoct_hostid();
# 287 "../license/server.h"
extern int nls_fuckoff_mode;
extern char nls_fuckoff_who[80];


extern unsigned long nls_backwards_compat;
# 23 "signals.c" 2
# 89 "signals.c"
char *user_handler[65 +1];

static int was_stopped, block_user_handlers;
static int asking_to_quit;
static int call_user_handler();

void
intrpt(sig)
int sig;
{
    call_user_handler(sig);
    (void) signal(sig, intrpt);
    if (!was_stopped)
 if (debug == 0) {;} else zmDebug("interrupt() caught: %d\n", sig);
    if (sig == 2 && asking_to_quit) cleanup(sig);
    if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0)))))))
 return;
    mac_flush();
    ((glob_flags) |= (unsigned long)(((unsigned long)1 << (unsigned long)(1))));
}
# 134 "signals.c"
int
handle_intrpt(flags, str, percentage)
unsigned long flags;
char *str;
long percentage;
{
    static void (*oldsigs[32])();
    static int ss;
    static char *title_stack[32];

    if (ss > 30) {
 ss = 0;
 error(ZmErrFatal, catgets( catalog, 12, 711, "Interrupt stack too deep!" ));
    }

    if ((!(!((unsigned long)(flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0))))))) {
 if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(1)))))))
     if (debug == 0) {;} else zmDebug("Clearing SIGINT!\n");
 ((glob_flags) &= ~(unsigned long)(((unsigned long)1 << (unsigned long)(1))));
 oldsigs[ss++] = signal(2, intrpt);
 oldsigs[ss++] = signal(3, intrpt);





 (xfree (title_stack[ss/2 - 1]), title_stack[ss/2 - 1] = savestr(str? str : catgets( catalog, 12, 712, "Working..." )));
    } else if ((!(!((unsigned long)(flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(1))))))) {
 if (ss > 1) {
     (void) signal(3, oldsigs[--ss]);
     (void) signal(2, oldsigs[--ss]);
 }
 xfree(title_stack[ss/2]);
 title_stack[ss/2] = ((void *)0);

 if (ss == 0)
     ((glob_flags) &= ~(unsigned long)(((unsigned long)1 << (unsigned long)(1))));
    }

    block_user_handlers = ss;






    if ((!(!((unsigned long)(flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(3)))))) && (!((unsigned long)(flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(2))))) &&
     (ss > 0 || (!((unsigned long)(flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(1)))))))
 return (!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(1))))));


    if (istool > 1 )
 return gui_handle_intrpt(flags, ss/2,
     str? str : title_stack[ss/2-1], percentage);
# 197 "signals.c"
    return (!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(1))))));

}

static int
call_user_handler(sig)
int sig;
{
    unsigned long save_flags = glob_flags;
    char *handler, buf[128];
    int n = -1;

    if (sig < 0)
 sig = 0;
    handler = user_handler[sig];
    user_handler[sig] = ((void *)0);

    ((glob_flags) |= (unsigned long)(((unsigned long)1 << (unsigned long)(19))));
    if (sig == 0 && block_user_handlers >= 0) {
 if ((zmFunction *)retrieve_link((struct link *)function_list, "exit_hook", (int (*)()) strcmp) != 0) {
     (void) strcpy(buf, "exit_hook");
     n = cmd_line(buf, (msg_group *)0);
 }
 if (!!zm_set(&set_options, (var_table[(int)(VT_ExitSaveopts)].vt_default.v_link.l_name)) && !hdrs_only) {
     const char * const arguments = zm_set(&set_options, (var_table[(int)(VT_ExitSaveopts)].vt_default.v_link.l_name));
     sprintf(buf, "builtin saveopts %s", arguments ? arguments : "");
     n = cmd_line(buf, (msg_group *)0);
 }
    }

    if (handler) {
 if (sig > 0 && ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0)))))) ||
  block_user_handlers || (!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(29))))))) {
     (void) signal(sig, ((__sighandler_t) 1));
     n = trap_deferred(sig, handler);
 } else if (block_user_handlers == 0 ||
  sig == 0 && block_user_handlers > 0) {



     (void) sprintf(buf, "%s %d", handler, sig);
     n = cmd_line(buf, (msg_group *)0);
     user_handler[sig] = handler;
     (void) signal(sig, (void (*)()) call_user_handler);
 }
    }
    if ((!((unsigned long)(save_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(19))))))
 ((glob_flags) &= ~(unsigned long)(((unsigned long)1 << (unsigned long)(19))));
    return n;
}

int
set_user_handler(sig, handler)
int sig;
char *handler;
{
    char *old = user_handler[sig];

    user_handler[sig] = ((void *)0);
    xfree(old);

    if (handler && *handler) {




 switch (sig) {
     case 0 :
  break;




     case 1 : case 2 : case 3 : case 15 :
  break;
     case 4 : case 7 : case 11 :
     case 13 : case 14 : case 17 :

     case 19 : case 20 : case 18 :


     case 21 : case 22 :


     case 26 :

  return -1;
     default :
  if ((int)signal(sig, (void (*)()) call_user_handler) < 0)
      return -1;

 }
 user_handler[sig] = savestr(handler);
    }

    return 0;
}
# 351 "signals.c"
void
quit_on_sig()
{
    ask_item = tool;
    if (ask(WarnNo, catgets( catalog, 12, 713, "Interrupt: Quit Z-Mail?" )) == AskYes)
 (void) zm_quit(0, (char **)0);
    asking_to_quit = 0;
}







void
catch(sig)
int sig;
{
    if (!was_stopped)
 if (debug == 0) {;} else zmDebug("Caught signal: %d\n", sig);
    (void) signal(sig, catch);
    if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0)))))) && sig != 15 && sig != 1)
 return;

    if (sig == 2 && istool == 2 && !user_handler[sig]) {
 if (!asking_to_quit && func_deferred(quit_on_sig, ((void *)0)) == 0) {
     asking_to_quit = 1;
     return;
 }
    }

    mac_flush();
    if (!was_stopped)
 print("%s: %s\n", prog_name, sys_siglist[sig]);
    ((glob_flags) &= ~(unsigned long)(((unsigned long)1 << (unsigned long)(18))));

    if (call_user_handler(sig) == 0)
 return;

    if (istool || sig == 15 || sig == 1) {

 if (istool)
     istool = 1;

 (void) ((jmpbuf.jgood = !(jmpbuf.jret = _setjmp (jmpbuf.jbuf))), jmpbuf.jret);
 if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(15)))))))
     rm_edfile(-1);
 cleanup(sig);
    }

    if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(12))))))) {

 if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(15))))))) {
     char *fix = zm_set(&set_options, (var_table[(int)(VT_Wrapcolumn)].vt_default.v_link.l_name));
     if (fix && *fix)
  wrapcolumn = atoi(fix);
 }
 ((glob_flags) &= ~(unsigned long)(((unsigned long)1 << (unsigned long)(15))));







 (void) signal(14, ((__sighandler_t) 1));
 if ((jmpbuf.jgood != 1 || jmpbuf.jret != 0)) {;} else longjmp(jmpbuf.jbuf,1);
    } else
 cleanup(sig);

}



jmp_buf ttoubuf;

void
tostop()
{
    (void) signal(22, ((__sighandler_t) 0));
    if (was_stopped)
 longjmp(ttoubuf, 1);
}


void
stop_start(sig)
int sig;
{




    if (debug == 0) {;} else zmDebug("Caught signal: %d\n", sig);
    if (sig == 18) {







 (void) signal(20, stop_start);
 (void) signal(18, stop_start);

 (void) signal(22, tostop);
 if (_setjmp (ttoubuf) == 0) {
     if (Ztty.c_lflag && (!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(4)))))) ((iscurses) ? (Ztty.c_lflag &= ~0000002, Ztty.c_cc[6] = 1, (tcsetattr((0), 1, (&Ztty)))) : (Ztty.c_lflag &= ~0000002, Ztty.c_cc[6] = 1, (tcsetattr((0), 1, (&Ztty))))), ((iscurses) ? noecho(): (Ztty.c_lflag &= ~0000010, (tcsetattr((0), 1, (&Ztty)))));
     was_stopped = 0;
 }

 else
     iscurses = 0;




 if (istool || was_stopped || (!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0)))))) && !iscurses)
     return;

 if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(15))))))) {
     if (comp_current->ed_fp)
  print(catgets( catalog, 12, 337, "(continue editing message)\n" ));
 }

 else if (iscurses)
     if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0))))))) {
  clr_bot_line();
  if ((current_folder->mf_group.mg_count))
      puts(compose_hdr((current_folder->mf_group.mg_current)));

                zmail_mail_status(1), waddnstr(stdscr,"...continue... ",-1);



  wrefresh(stdscr);
     } else {
  int curlin = (((1) > ((current_folder->mf_group.mg_current) - n_array[0] + 1)) ? (1) : ((current_folder->mf_group.mg_current) - n_array[0] + 1));
  clearok(curscr, 1), wrefresh(curscr);
  print("Continue");
  wmove(stdscr,curlin,0);
  wrefresh(stdscr);

  if ((!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(8)))))) && (current_folder->mf_group.mg_count)) {
      char buf[256];
      (void) strncpy(buf, compose_hdr((current_folder->mf_group.mg_current)), COLS-1);
      buf[COLS-1] = 0;
      (wmove(stdscr,curlin,0) == (-1) ? (-1) : waddnstr(stdscr,buf,-1));
  }
     }





    } else {
# 523 "signals.c"
 if (iscurses) {





     ((glob_flags) |= (unsigned long)(((unsigned long)1 << (unsigned long)(1))));
     if ((!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0))))) && (!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(8)))))) &&
      (current_folder->mf_group.mg_count)) {
  int curlin = (((1) > ((current_folder->mf_group.mg_current) - n_array[0] + 1)) ? (1) : ((current_folder->mf_group.mg_current) - n_array[0] + 1));
  char buf[256];
  scrn_line(curlin, buf);
  wmove(stdscr,curlin,0), ((int)((stdscr)->_attrs = (((1UL) << ((8) + 8))))), waddnstr(stdscr,buf,-1), ((int)((stdscr)->_attrs = ((1UL - 1UL))));
     }
     print("Stopping...");
 }

 if (Ztty.c_lflag && (!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(4)))))) ((iscurses) ? (Ztty.c_lflag |= 0000002,Ztty.c_cc[6] = vmin,Ztty.c_iflag |= 0000400, Ztty.c_cc[5] = vtime, (tcsetattr((0), 1, (&Ztty)))) : (Ztty.c_lflag |= 0000002,Ztty.c_cc[6] = vmin,Ztty.c_iflag |= 0000400, Ztty.c_cc[5] = vtime, (tcsetattr((0), 1, (&Ztty))))), ((iscurses) ? echo(): (Ztty.c_lflag |= (0000010|0000020), (tcsetattr((0), 1, (&Ztty)))));
 (void) signal(20, ((__sighandler_t) 0));
 (void) signal(18, stop_start);
 was_stopped = 1;
 (void) kill(getpid(), sig);
    }
}



void
cleanup(sig)
int sig;
{
    char buf[128], c;


    if (sig != 11 && sig != 7)
 drop_locks();

    if (sig > 0)
 ((glob_flags) |= (unsigned long)(((unsigned long)1 << (unsigned long)(20))));

    (void) call_user_handler(0);

    if (sig != 15 && sig != 1 && (!(!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0)))))))
 c = 'n';
    else
 c = 'y';
# 581 "signals.c"
    if (iscurses && sig != 1)
 iscurses = 0, endwin();



    gui_cleanup();


    if (!was_stopped || istool != 1)
 if (Ztty.c_lflag && (!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(4)))))) ((iscurses) ? (Ztty.c_lflag |= 0000002,Ztty.c_cc[6] = vmin,Ztty.c_iflag |= 0000400, Ztty.c_cc[5] = vtime, (tcsetattr((0), 1, (&Ztty)))) : (Ztty.c_lflag |= 0000002,Ztty.c_cc[6] = vmin,Ztty.c_iflag |= 0000400, Ztty.c_cc[5] = vtime, (tcsetattr((0), 1, (&Ztty))))), ((iscurses) ? echo(): (Ztty.c_lflag |= (0000010|0000020), (tcsetattr((0), 1, (&Ztty)))));

    if (comp_list)
 clean_compose(sig);


    if ((sig == 11 || sig == 7) && (!((unsigned long)(glob_flags) & (unsigned long)(((unsigned long)1 << (unsigned long)(0))))) &&
     !istool) {
 (void) fprintf(stderr, catgets( catalog, 12, 720, "remove all tempfiles? [y] " ));
 (void) fflush(stderr);
 if (fgets(buf, sizeof(buf), stdin))
     c = ('A' <= (*buf) && (*buf) <= 'Z' ? (*buf) | 0x20 : (*buf));
    }
    if (c != 'n') {
 intr_level = -1;
 if (sig == 1 && !!zm_set(&set_options, (var_table[(int)(VT_Hangup)].vt_default.v_link.l_name)))
     (void) update_folders(((unsigned long)0), ((void *)0), 0);
 else if (sig > 0 && sig != 1)
     (void) update_folders(((unsigned long)1 << (unsigned long)(2)), ((void *)0), 0);
 else
     (void) update_folders(((unsigned long)1 << (unsigned long)(0)), ((void *)0), 0);
    }



    if (fake_spoolfile)
 (void) unlink((fake_spoolfile)->ft_link.l_name);
# 638 "signals.c"
    zimap_close( 0, 0 );



    if (sig == 11 || sig == 7 || sig < -1) {
 abort();
    }
    exit(sig);





}


void
bus_n_seg(sig)
int sig;
{
    (void) signal(sig, ((__sighandler_t) 0));
    if (!was_stopped)
 (void) fprintf(stderr, "%s: %s\n", prog_name,
     (sig == 11)? catgets( catalog, 12, 738, "Segmentation violation" ): catgets( catalog, 12, 739, "Bus error" ));
    block_user_handlers = -1;
    cleanup(sig);
}
